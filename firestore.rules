/**
 * @fileoverview Firestore Security Rules for the Ahorro Ya application.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-tenant security model where users can access data associated with tenants they are members of.
 * Ownership is enforced for user-specific data and tenant-owned resources. Superadmin privileges provide bypass capabilities.
 *
 * Data Structure:
 * - /tenants/{tenantId}: Stores tenant information, with 'ownerUid' indicating the owner.
 * - /licenses/{licenseId}: Stores license information related to a tenant, with 'tenantId' linking to the tenant.
 * - /memberships/{membershipId}: Stores user memberships within tenants, defining roles ('owner', 'admin', 'member').
 * - /users/{userId}: Stores user profile data, including a superadmin flag.
 * - Other Collections: (/currencies, /fx_rates, /categories, /subcategories, /entities, /expenses, /budgets, /alerts, /receipts_raw, /receipts_fingerprints, /audit_logs):
 *   Each of these collections stores data related to a specific tenant, with a 'tenantId' field for access control.
 *
 * Key Security Decisions:
 * - All write operations are restricted based on tenant membership and role.
 * - Superadmins have elevated privileges, but this requires a 'get()' call to the /users/{userId} document.
 * - List operations are generally allowed for members of a tenant to list tenant-specific data.
 * - Data types are not strictly enforced in this prototyping phase to allow for flexible schema changes.
 *
 * Denormalization for Authorization:
 * The 'tenantId' field is included in most documents to avoid needing to perform additional reads for authorization.
 * The 'ownerUid' field exists in the 'tenants' collection for quickly verifying ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Checks for authentication.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's UID matches the provided userId.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user-based ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the tenant based on the tenant's ownerUid.
     * @path N/A
     * @allow N/A
     * @deny N/A
     */
    function isTenantOwner(tenantId) {
        return get(/databases/$(database)/documents/tenants/$(tenantId)).data.ownerUid == request.auth.uid;
    }

    /**
     * @description Checks if the user is a member of the tenant based on the memberships collection.
     * @path N/A
     * @allow N/A
     * @deny N/A
     */
    function isTenantMember(tenantId) {
        return exists(/databases/$(database)/documents/memberships/$(tenantId)_$(request.auth.uid));
    }

    /**
     * @description Checks if the user is a superadmin. Requires a 'get()' call.
     * @path N/A
     * @allow N/A
     * @deny N/A
     */
    function isSuperAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperadmin == true;
    }
    
    /**
     * @description Checks if the user is the existing owner and that the document exists.
     * @path N/A
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && get(/databases/$(database)/documents/users/$(userId)).data.uid == request.auth.uid;
    }

    /**
     * @description Rules for the /tenants collection.
     * @path /tenants/{tenantId}
     * @allow (create) User with UID matching request.auth.uid can create a tenant.
     * @deny (create) User attempts to create a tenant with an ownerUid that doesn't match their UID.
     * @allow (get) Any authenticated user can get a tenant.
     * @deny (update) User attempts to update a tenant they don't own.
     * @principle Enforces tenant ownership for writes and authenticated access for reads.
     */
    match /tenants/{tenantId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update: if isSignedIn() && isTenantOwner(tenantId);
      allow delete: if isSignedIn() && isTenantOwner(tenantId);
    }

    /**
     * @description Rules for the /licenses collection.
     * @path /licenses/{licenseId}
     * @allow (create) User can create a license if they are the owner of the tenant.
     * @deny (create) User attempts to create a license for a tenant they don't own.
     * @allow (get) Any authenticated user can get a license.
     * @deny (update) User attempts to update a license for a tenant they don't own.
     * @principle Enforces tenant ownership for writes and authenticated access for reads.
     */
    match /licenses/{licenseId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Rules for the /memberships collection.
     * @path /memberships/{membershipId}
     * @allow (create) User can create a membership if they are the owner of the tenant.
     * @deny (create) User attempts to create a membership for a tenant they don't own.
     * @allow (get) Any authenticated user can get a membership.
     * @deny (update) User attempts to update a membership for a tenant they don't own.
     * @principle Enforces tenant ownership for writes and authenticated access for reads.
     */
    match /memberships/{membershipId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (create) User can create their own user document.
     * @deny (create) User attempts to create a user document for another user.
     * @allow (get) Any authenticated user can get a user profile.
     * @deny (update) User attempts to update another user's profile.
     * @principle Enforces user ownership for writes and authenticated access for reads.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow delete: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
    }

    /**
     * @description Rules for the /currencies collection.
     * @path /currencies/{currencyCode}
     * @allow (get, list) Public read access for currencies.
     * @deny (create, update, delete) No write access allowed.
     * @principle Provides public read access to currency data.
     */
    match /currencies/{currencyCode} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /fx_rates collection.
     * @path /fx_rates/{fxRateId}
     * @allow (create) User can create an fx rate if they are a member of the tenant.
     * @deny (create) User attempts to create an fx rate for a tenant they are not a member of.
     * @allow (get, list) Any authenticated user can read fx rates.
     * @deny (update) User attempts to update an fx rate for a tenant they are not a member of.
     * @principle Enforces tenant membership for writes and authenticated access for reads.
     */
    match /fx_rates/{fxRateId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Rules for the /categories collection.
     * @path /categories/{categoryId}
     * @allow (create) User can create a category if they are a member of the tenant.
     * @deny (create) User attempts to create a category for a tenant they are not a member of.
     * @allow (get, list) Any authenticated user can read categories.
     * @deny (update) User attempts to update a category for a tenant they are not a member of.
     * @principle Enforces tenant membership for writes and authenticated access for reads.
     */
    match /categories/{categoryId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Rules for the /subcategories collection.
     * @path /subcategories/{subcategoryId}
     * @allow (create) User can create a subcategory if they are a member of the tenant.
     * @deny (create) User attempts to create a subcategory for a tenant they are not a member of.
     * @allow (get, list) Any authenticated user can read subcategories.
     * @deny (update) User attempts to update a subcategory for a tenant they are not a member of.
     * @principle Enforces tenant membership for writes and authenticated access for reads.
     */
    match /subcategories/{subcategoryId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Rules for the /entities collection.
     * @path /entities/{entityId}
     * @allow (create) User can create an entity if they are a member of the tenant.
     * @deny (create) User attempts to create an entity for a tenant they are not a member of.
     * @allow (get, list) Any authenticated user can read entities.
     * @deny (update) User attempts to update an entity for a tenant they are not a member of.
     * @principle Enforces tenant membership for writes and authenticated access for reads.
     */
    match /entities/{entityId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Rules for the /expenses collection.
     * @path /expenses/{expenseId}
     * @allow (create) User can create an expense if they are a member of the tenant.
     * @deny (create) User attempts to create an expense for a tenant they are not a member of.
     * @allow (get, list) Any authenticated user can read expenses.
     * @deny (update) User attempts to update an expense for a tenant they are not a member of.
     * @principle Enforces tenant membership for writes and authenticated access for reads.
     */
    match /expenses/{expenseId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId) && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Rules for the /budgets collection.
     * @path /budgets/{budgetId}
     * @allow (create) User can create a budget if they are a member of the tenant.
     * @deny (create) User attempts to create a budget for a tenant they are not a member of.
     * @allow (get, list) Any authenticated user can read budgets.
     * @deny (update) User attempts to update a budget for a tenant they are not a member of.
     * @principle Enforces tenant membership for writes and authenticated access for reads.
     */
    match /budgets/{budgetId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Rules for the /alerts collection.
     * @path /alerts/{alertId}
     * @allow (create) User can create an alert if they are a member of the tenant.
     * @deny (create) User attempts to create an alert for a tenant they are not a member of.
     * @allow (get, list) Any authenticated user can read alerts.
     * @deny (update) User attempts to update an alert for a tenant they are not a member of.
     * @principle Enforces tenant membership for writes and authenticated access for reads.
     */
    match /alerts/{alertId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Rules for the /receipts_raw collection.
     * @path /receipts_raw/{receiptRawId}
     * @allow (create) User can create a receipt if they are a member of the tenant and the userId matches.
     * @deny (create) User attempts to create a receipt for a tenant they are not a member of.
     * @allow (get, list) Any authenticated user can read receipts.
     * @deny (update) User attempts to update a receipt for a tenant they are not a member of.
     * @principle Enforces tenant membership for writes and authenticated access for reads.
     */
    match /receipts_raw/{receiptRawId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId) && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Rules for the /receipts_fingerprints collection.
     * @path /receipts_fingerprints/{receiptFingerprintId}
     * @allow (get, list) Any authenticated user can read receipts fingerprints.
     * @deny (create, update, delete) No write access allowed.
     * @principle Provides public read access to receipt fingerprint data.
     */
    match /receipts_fingerprints/{receiptFingerprintId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /audit_logs collection.
     * @path /audit_logs/{auditLogId}
     * @allow (create) User can create an audit log if they are a member of the tenant.
     * @deny (create) User attempts to create an audit log for a tenant they are not a member of.
     * @allow (get, list) Any authenticated user can read audit logs.
     * @deny (update) User attempts to update an audit log for a tenant they are not a member of.
     */
    match /audit_logs/{auditLogId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }
  }
}