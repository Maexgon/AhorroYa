/**
 * @fileoverview Firestore Security Rules for "Ahorro Ya" Expense Tracking App.
 *
 * Core Philosophy: This ruleset enforces a multi-tenant security model where users can only access data
 * belonging to tenants they are members of. Ownership is enforced for user-specific data.
 *
 * Data Structure:
 * - /tenants/{tenantId}: Represents a tenant. The 'ownerUid' field determines the owner.
 * - /licenses/{licenseId}: Represents a tenant's license, linked via 'tenantId'.
 * - /memberships/{membershipId}: Represents a user's membership in a tenant, storing 'tenantId', 'uid', and 'role'.
 * - /users/{userId}: Represents a user. 'uid' must match the authenticated user's UID.
 * - /currencies/{currencyCode}: Represents currency data (public read).
 * - /fx_rates/{fxRateId}: Represents FX rates for a tenant, linked via 'tenantId'.
 * - /categories/{categoryId}: Represents expense categories for a tenant, linked via 'tenantId'.
 * - /subcategories/{subcategoryId}: Represents expense subcategories for a tenant, linked via 'tenantId'.
 * - /entities/{entityId}: Represents business entities for a tenant, linked via 'tenantId'.
 * - /expenses/{expenseId}: Represents expenses for a tenant, linked via 'tenantId' and 'userId'.
 * - /budgets/{budgetId}: Represents budgets for a tenant, linked via 'tenantId'.
 * - /alerts/{alertId}: Represents alerts for a tenant, linked via 'tenantId'.
 * - /receipts_raw/{receiptRawId}: Represents raw receipt data, linked via 'tenantId' and 'userId'.
 * - /receipts_fingerprints/{receiptFingerprintId}: Represents fingerprints for deduplication.
 * - /audit_logs/{auditLogId}: Audit logs for a tenant, linked via 'tenantId'.
 *
 * Key Security Decisions:
 * - Explicitly deny write access where not granted.
 * - Use tenantId and userId for authorization checks.
 * - Public read access to the 'currencies' collection.
 * - Tenant members can list tenant resources.
 * - Enforce ownership and existence checks for updates and deletes.
 *
 * Denormalization for Authorization:  Tenant IDs are denormalized (copied) onto documents
 * to avoid costly `get()` calls in security rules. This allows rules to directly check
 * if the user has access to a particular tenant's data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function getTenantId() {
        return request.resource.data.tenantId;
    }

    function isTenantMember(tenantId) {
      return exists(/databases/$(database)/documents/memberships/$(request.auth.uid)_$(tenantId));
    }

    /**
     * @description Controls access to tenant documents.
     * @path /tenants/{tenantId}
     * @allow (create) User with matching auth UID can create a tenant with themselves as the owner.
     * @deny (create) User attempts to create a tenant with a different ownerUid.
     * @allow (read) Tenant owner or member can read the tenant document.
     * @deny (update, delete) Only the tenant owner can update or delete the tenant.
     * @principle Enforces tenant ownership and membership for data access.
     */
    match /tenants/{tenantId} {
      allow get: if isSignedIn() && (resource.data.ownerUid == request.auth.uid || isTenantMember(tenantId));
      allow list: if isSignedIn() && (resource.data.ownerUid == request.auth.uid || isTenantMember(tenantId));
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
    }

    /**
     * @description Controls access to license documents.
     * @path /licenses/{licenseId}
     * @allow (create) Tenant owner can create a license.
     * @deny (create) Non-tenant owner attempts to create a license.
     * @allow (read) Tenant owner or member can read the license document.
     * @deny (update, delete) Only the tenant owner can update or delete the license.
     * @principle Enforces tenant ownership and membership for data access.
     */
    match /licenses/{licenseId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Controls access to membership documents.
     * @path /memberships/{membershipId}
     * @allow (create) User can create a membership for themselves in a tenant.
     * @deny (create) User attempts to create a membership for another user.
     * @allow (read) Tenant owner or member can read the membership document.
     * @deny (update, delete) Only the tenant owner can update or delete memberships.
     * @principle Enforces tenant membership management.
     */
    match /memberships/{membershipId} {
      allow get: if isSignedIn() && (resource.data.uid == request.auth.uid || isTenantMember(resource.data.tenantId));
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow delete: if isSignedIn() && request.resource.data.uid == request.auth.uid;
    }

    /**
     * @description Controls access to user documents.
     * @path /users/{userId}
     * @allow (create) User can create their own user document.
     * @deny (create) User attempts to create a user document for another user.
     * @allow (read, update, delete) User can read, update, and delete their own user document.
     * @principle Enforces user ownership of their profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to currency documents.
     * @path /currencies/{currencyCode}
     * @allow (read) Anyone can read currency data.
     * @deny (write) No one can write currency data.
     * @principle Provides public read access to currency data.
     */
    match /currencies/{currencyCode} {
      allow get, list: if true;
    }

    /**
     * @description Controls access to FX rate documents.
     * @path /fx_rates/{fxRateId}
     * @allow (create) Tenant owner or member can create FX rates.
     * @deny (create) Non-tenant owner/member attempts to create FX rates.
     * @allow (read) Tenant owner or member can read FX rates.
     * @deny (update, delete) Only tenant owner or member can update or delete FX rates.
     * @principle Enforces tenant ownership and membership for data access.
     */
    match /fx_rates/{fxRateId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Controls access to category documents.
     * @path /categories/{categoryId}
     * @allow (create) Tenant owner or member can create categories.
     * @deny (create) Non-tenant owner/member attempts to create categories.
     * @allow (read) Tenant owner or member can read categories.
     * @deny (update, delete) Only tenant owner or member can update or delete categories.
     * @principle Enforces tenant ownership and membership for data access.
     */
    match /categories/{categoryId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Controls access to subcategory documents.
     * @path /subcategories/{subcategoryId}
     * @allow (create) Tenant owner or member can create subcategories.
     * @deny (create) Non-tenant owner/member attempts to create subcategories.
     * @allow (read) Tenant owner or member can read subcategories.
     * @deny (update, delete) Only tenant owner or member can update or delete subcategories.
     * @principle Enforces tenant ownership and membership for data access.
     */
    match /subcategories/{subcategoryId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Controls access to entity documents.
     * @path /entities/{entityId}
     * @allow (create) Tenant owner or member can create entities.
     * @deny (create) Non-tenant owner/member attempts to create entities.
     * @allow (read) Tenant owner or member can read entities.
     * @deny (update, delete) Only tenant owner or member can update or delete entities.
     * @principle Enforces tenant ownership and membership for data access.
     */
    match /entities/{entityId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Controls access to expense documents.
     * @path /expenses/{expenseId}
     * @allow (create) Tenant owner or member can create expenses.
     * @deny (create) Non-tenant owner/member attempts to create expenses.
     * @allow (read) Tenant owner or member can read expenses.
     * @deny (update, delete) Only tenant owner or member can update or delete expenses.
     * @principle Enforces tenant ownership and membership for data access.
     */
    match /expenses/{expenseId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId) && resource.data.userId == request.auth.uid;
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId) && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId) && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId) && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Controls access to budget documents.
     * @path /budgets/{budgetId}
     * @allow (create) Tenant owner or member can create budgets.
     * @deny (create) Non-tenant owner/member attempts to create budgets.
     * @allow (read) Tenant owner or member can read budgets.
     * @deny (update, delete) Only tenant owner or member can update or delete budgets.
     * @principle Enforces tenant ownership and membership for data access.
     */
    match /budgets/{budgetId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Controls access to alert documents.
     * @path /alerts/{alertId}
     * @allow (create) Tenant owner or member can create alerts.
     * @deny (create) Non-tenant owner/member attempts to create alerts.
     * @allow (read) Tenant owner or member can read alerts.
     * @deny (update, delete) Only tenant owner or member can update or delete alerts.
     * @principle Enforces tenant ownership and membership for data access.
     */
    match /alerts/{alertId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Controls access to receipt raw documents.
     * @path /receipts_raw/{receiptRawId}
     * @allow (create) Tenant owner or member can create receipt raw documents.
     * @deny (create) Non-tenant owner/member attempts to create receipt raw documents.
     * @allow (read) Tenant owner or member can read receipt raw documents.
     * @deny (update, delete) Only tenant owner or member can update or delete receipt raw documents.
     * @principle Enforces tenant ownership and membership for data access.
     */
    match /receipts_raw/{receiptRawId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId) && resource.data.userId == request.auth.uid;
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId) && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId) && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId) && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Controls access to receipt fingerprint documents.
     * @path /receipts_fingerprints/{receiptFingerprintId}
     * @allow (create) Tenant owner or member can create receipt fingerprint documents.
     * @deny (create) Non-tenant owner/member attempts to create receipt fingerprint documents.
     * @allow (read) Tenant owner or member can read receipt fingerprint documents.
     * @deny (update, delete) Only tenant owner or member can update or delete receipt fingerprint documents.
     * @principle Enforces tenant ownership and membership for data access.
     */
    match /receipts_fingerprints/{receiptFingerprintId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Controls access to audit log documents.
     * @path /audit_logs/{auditLogId}
     * @allow (create) Tenant owner or member can create audit log documents.
     * @deny (create) Non-tenant owner/member attempts to create audit log documents.
     * @allow (read) Tenant owner or member can read audit log documents.
     * @deny (update, delete) Only tenant owner or member can update or delete audit log documents.
     * @principle Enforces tenant ownership and membership for data access.
     */
    match /audit_logs/{auditLogId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }
  }
}