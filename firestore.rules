/**
 * @fileoverview Firestore Security Rules for "Ahorro Ya" Expense Tracking App.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-tenant data model with strong ownership and
 * role-based access control.  It prioritizes authorization independence and
 * structural segregation for security and scalability.  Most collections
 * include a `tenantId` and often `userId` for efficient authorization.
 *
 * Data Structure:
 * - /tenants/{tenantId}: Tenant information, owned by a specific user.
 * - /licenses/{licenseId}: License information, associated with a tenant.
 * - /memberships/{membershipId}: User's membership within a tenant (roles).
 * - /users/{userId}: User profile data.
 * - /currencies/{currencyCode}: Currency data.
 * - /fx_rates/{fxRateId}: Exchange rates for a tenant.
 * - /categories/{categoryId}: Expense categories for a tenant.
 * - /subcategories/{subcategoryId}: Expense subcategories for a tenant.
 * - /entities/{entityId}: Business or bank entities for a tenant.
 * - /expenses/{expenseId}: Expense records for a tenant.
 * - /budgets/{budgetId}: Budget data for a tenant.
 * - /alerts/{alertId}: Alert notifications for a tenant.
 * - /receipts_raw/{receiptRawId}: Raw receipt data (OCR) for a tenant.
 * - /receipts_fingerprints/{receiptFingerprintId}: Receipt fingerprints for de-duplication.
 * - /audit_logs/{auditLogId}: Audit logs for a tenant.
 *
 * Key Security Decisions:
 * - Strict owner-only access for most write operations, enforced via `tenantId` and `userId` fields.
 * - Denormalization of `tenantId` and `userId` to avoid costly `get()` calls in rules.
 * - No public listing of any collections containing private user data.
 * - Superadmin role bypass using the `isSuperadmin` field on the `/users/{userId}` document (requires a `get()` call).
 *
 * Denormalization for Authorization:
 * - Most entities include `tenantId` to easily scope data to a tenant.
 * - Some entities include `userId` to easily scope data to a user within a tenant.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Requires authentication for protected resources.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource based on the uid.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces ownership for user-specific data.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and the resource exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Requires that documents exist before updating or deleting.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Checks if the authenticated user is a member of the tenant.
     * @path N/A
     */
    function isTenantMember(tenantId) {
        return exists(/databases/$(database)/documents/memberships/$(request.auth.uid)_$(tenantId));
    }

    /**
     * @description Checks if the authenticated user is an admin of the tenant.
     * @path N/A
     */
    function isTenantAdmin(tenantId) {
        return get(/databases/$(database)/documents/memberships/$(request.auth.uid)_$(tenantId)).data.role == 'admin';
    }

    /**
     * @description Checks if the authenticated user is the owner of the tenant.
     * @path N/A
     */
     function isTenantOwner(tenantId) {
        return get(/databases/$(database)/documents/tenants/$(tenantId)).data.ownerUid == request.auth.uid;
     }

    /**
     * @description Checks if the authenticated user is a superadmin.
     * @path N/A
     */
    function isSuperadmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperadmin == true;
    }

    /**
     * @description Rules for the /tenants/{tenantId} collection.
     * @path /tenants/{tenantId}
     * @allow (create) If the user's ID matches the tenant's ownerUid and the tenant ID matches the path.
     * @deny (create) If the user's ID does not match the tenant's ownerUid.
     * @allow (read) If the user is a member of the tenant.
     * @deny (read) If the user is not a member of the tenant.
     * @principle Enforces tenant ownership and membership.
     */
    match /tenants/{tenantId} {
      allow get: if isTenantMember(tenantId) || isSuperadmin();
      allow list: if false;

      allow create: if isSignedIn() && request.auth.uid == request.resource.data.ownerUid && request.resource.data.id == tenantId;
      allow update: if isTenantOwner(tenantId) || isSuperadmin();
      allow delete: if isTenantOwner(tenantId) || isSuperadmin();
    }

    /**
     * @description Rules for the /licenses/{licenseId} collection.
     * @path /licenses/{licenseId}
     * @allow (create) If the user is the owner of the tenant associated with the license.
     * @deny (create) If the user is not the owner of the tenant.
     * @allow (read) If the user is a member of the tenant associated with the license.
     * @deny (read) If the user is not a member of the tenant.
     * @principle Enforces tenant ownership and membership for licenses.
     */
    match /licenses/{licenseId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperadmin();
      allow list: if false;

      allow create: if isTenantOwner(request.resource.data.tenantId) || isSuperadmin();
      allow update: if isTenantOwner(resource.data.tenantId) || isSuperadmin();
      allow delete: if isTenantOwner(resource.data.tenantId) || isSuperadmin();
    }

    /**
     * @description Rules for the /memberships/{membershipId} collection.
     * @path /memberships/{membershipId}
     * @allow (create) If the user's ID matches the membership's uid and the tenant ID in the path matches the membership's tenantId.
     * @deny (create) If the user's ID does not match the membership's uid or tenant IDs mismatch.
     * @allow (get) If the user is the owner of the tenant the membership belongs to, or is the user referenced by the membership
     * @deny (get) If the user is neither the tenant owner nor the user referenced by the membership
     * @principle Enforces membership creation by the user and tenant ownership.
     */
    match /memberships/{membershipId} {
        allow get: if (isTenantOwner(resource.data.tenantId) || isOwner(resource.data.uid)) || isSuperadmin();
        allow list: if false;
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.uid;
        allow update: if isTenantOwner(resource.data.tenantId) || isSuperadmin();
        allow delete: if isTenantOwner(resource.data.tenantId) || isSuperadmin();
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) If the user's ID matches the path.
     * @deny (create) If the user's ID does not match the path.
     * @allow (read) If the user's ID matches the path.
     * @deny (read) If the user's ID does not match the path.
     * @principle Enforces user-ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isSuperadmin();
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isSuperadmin();
      allow delete: if false;
    }

    /**
     * @description Rules for the /currencies/{currencyCode} collection.
     * @path /currencies/{currencyCode}
     * @allow (read) Public read access for currency data.
     * @deny (write) No write access allowed.
     * @principle Provides public access to currency information.
     */
    match /currencies/{currencyCode} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /fx_rates/{fxRateId} collection.
     * @path /fx_rates/{fxRateId}
     * @allow (read) If the user is a member of the tenant associated with the exchange rate.
     * @deny (read) If the user is not a member of the tenant.
     * @principle Enforces tenant membership for exchange rate data.
     */
    match /fx_rates/{fxRateId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperadmin();
      allow list: if false;

      allow create: if isTenantAdmin(resource.data.tenantId) || isSuperadmin();
      allow update: if isTenantAdmin(resource.data.tenantId) || isSuperadmin();
      allow delete: if isTenantAdmin(resource.data.tenantId) || isSuperadmin();
    }

    /**
     * @description Rules for the /categories/{categoryId} collection.
     * @path /categories/{categoryId}
     * @allow (read) If the user is a member of the tenant associated with the category.
     * @deny (read) If the user is not a member of the tenant.
     * @principle Enforces tenant membership for category data.
     */
    match /categories/{categoryId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperadmin();
      allow list: if false;

      allow create: if isTenantAdmin(resource.data.tenantId) || isSuperadmin();
      allow update: if isTenantAdmin(resource.data.tenantId) || isSuperadmin();
      allow delete: if isTenantAdmin(resource.data.tenantId) || isSuperadmin();
    }

    /**
     * @description Rules for the /subcategories/{subcategoryId} collection.
     * @path /subcategories/{subcategoryId}
     * @allow (read) If the user is a member of the tenant associated with the subcategory.
     * @deny (read) If the user is not a member of the tenant.
     * @principle Enforces tenant membership for subcategory data.
     */
    match /subcategories/{subcategoryId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperadmin();
      allow list: if false;

      allow create: if isTenantAdmin(resource.data.tenantId) || isSuperadmin();
      allow update: if isTenantAdmin(resource.data.tenantId) || isSuperadmin();
      allow delete: if isTenantAdmin(resource.data.tenantId) || isSuperadmin();
    }

    /**
     * @description Rules for the /entities/{entityId} collection.
     * @path /entities/{entityId}
     * @allow (read) If the user is a member of the tenant associated with the entity.
     * @deny (read) If the user is not a member of the tenant.
     * @principle Enforces tenant membership for entity data.
     */
    match /entities/{entityId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperadmin();
       allow list: if false;

      allow create: if isTenantAdmin(request.resource.data.tenantId) || isSuperadmin();
      allow update: if isTenantAdmin(resource.data.tenantId) || isSuperadmin();
      allow delete: if isTenantAdmin(resource.data.tenantId) || isSuperadmin();
    }

    /**
     * @description Rules for the /expenses/{expenseId} collection.
     * @path /expenses/{expenseId}
     * @allow (read) If the user is a member of the tenant associated with the expense.
     * @deny (read) If the user is not a member of the tenant.
     * @principle Enforces tenant membership for expense data.
     */
    match /expenses/{expenseId} {
      allow get: if (isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId)) || isSuperadmin();
      allow list: if false;

      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) && request.auth.uid == request.resource.data.userId;
      allow update: if (isTenantMember(resource.data.tenantId) && isExistingOwner(request.resource.data.userId)) || isSuperadmin();
      allow delete: if (isTenantMember(resource.data.tenantId) && isExistingOwner(request.resource.data.userId)) || isSuperadmin();
    }

    /**
     * @description Rules for the /budgets/{budgetId} collection.
     * @path /budgets/{budgetId}
     * @allow (read) If the user is a member of the tenant associated with the budget.
     * @deny (read) If the user is not a member of the tenant.
     * @principle Enforces tenant membership for budget data.
     */
    match /budgets/{budgetId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperadmin();
      allow list: if false;

      allow create: if isTenantAdmin(request.resource.data.tenantId) || isSuperadmin();
      allow update: if isTenantAdmin(resource.data.tenantId) || isSuperadmin();
      allow delete: if isTenantAdmin(resource.data.tenantId) || isSuperadmin();
    }

    /**
     * @description Rules for the /alerts/{alertId} collection.
     * @path /alerts/{alertId}
     * @allow (read) If the user is a member of the tenant associated with the alert.
     * @deny (read) If the user is not a member of the tenant.
     * @principle Enforces tenant membership for alert data.
     */
    match /alerts/{alertId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperadmin();
      allow list: if false;

      allow create: if isTenantAdmin(request.resource.data.tenantId) || isSuperadmin();
      allow update: if isTenantAdmin(resource.data.tenantId) || isSuperadmin();
      allow delete: if isTenantAdmin(resource.data.tenantId) || isSuperadmin();
    }

    /**
     * @description Rules for the /receipts_raw/{receiptRawId} collection.
     * @path /receipts_raw/{receiptRawId}
     * @allow (read) If the user is the owner of the receipt.
     * @deny (read) If the user is not the owner of the receipt.
     * @principle Enforces user-ownership for raw receipt data.
     */
    match /receipts_raw/{receiptRawId} {
      allow get: if (isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId)) || isSuperadmin();
      allow list: if false;

      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) && request.auth.uid == request.resource.data.userId;
      allow update: if (isTenantMember(resource.data.tenantId) && isExistingOwner(request.resource.data.userId)) || isSuperadmin();
      allow delete: if (isTenantMember(resource.data.tenantId) && isExistingOwner(request.resource.data.userId)) || isSuperadmin();
    }

    /**
     * @description Rules for the /receipts_fingerprints/{receiptFingerprintId} collection.
     * @path /receipts_fingerprints/{receiptFingerprintId}
     * @allow (read) Public read access for receipt fingerprint data.
     * @deny (write) No write access allowed.
     * @principle Provides public access to receipt fingerprint information.
     */
    match /receipts_fingerprints/{receiptFingerprintId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /audit_logs/{auditLogId} collection.
     * @path /audit_logs/{auditLogId}
     */
    match /audit_logs/{auditLogId} {
      allow get: if isTenantAdmin(resource.data.tenantId) || isSuperadmin();
      allow list: if false;

      allow create: if isTenantAdmin(request.resource.data.tenantId) || isSuperadmin();
      allow update: if false;
      allow delete: if false;
    }
  }
}