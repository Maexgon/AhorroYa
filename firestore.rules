/**
 * @fileoverview Firestore Security Rules for the Ahorro Ya application.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-tenant security model where users can only
 * access data related to tenants they are members of.  Ownership is enforced
 * for core entities like Tenants, Expenses, and ReceiptRaws. Superadmin
 * privileges provide bypass capabilities, but this should be considered
 * temporary for the prototyping stage.
 *
 * Data Structure:
 * - /tenants/{tenantId}: Stores tenant information, owned by a specific user.
 * - /licenses/{licenseId}: Stores license information for tenants.
 * - /memberships/{membershipId}: Stores user-tenant membership roles.
 * - /users/{userId}: Stores user profile data.
 * - /currencies/{currencyCode}: Stores currency data.
 * - /fx_rates/{fxRateId}: Stores FX rates, scoped to a tenant.
 * - /categories/{categoryId}: Stores expense categories, scoped to a tenant.
 * - /subcategories/{subcategoryId}: Stores expense subcategories, scoped to a tenant.
 * - /entities/{entityId}: Stores business/bank entities, scoped to a tenant.
 * - /expenses/{expenseId}: Stores expense records, scoped to a tenant and user.
 * - /budgets/{budgetId}: Stores budget data, scoped to a tenant.
 * - /alerts/{alertId}: Stores alert notifications, scoped to a tenant.
 * - /receipts_raw/{receiptRawId}: Stores raw receipt data, scoped to a tenant and user.
 * - /receipts_fingerprints/{receiptFingerprintId}: Stores receipt fingerprints for deduplication.
 * - /audit_logs/{auditLogId}: Stores audit log entries, scoped to a tenant.
 *
 * Key Security Decisions:
 * - Tenant-level isolation: All tenant-owned data includes 'tenantId' and
 *   is secured to only allow access from members of that tenant.
 * - Ownership enforcement: Tenant creation is restricted to authenticated
 *   users, and ownership of expenses and receipts is tied to the user ID.
 * - Superadmin bypass: The 'isSuperadmin' flag in the user document allows
 *   bypassing certain rules, but this requires a `get()` call and should be
 *   replaced with a dedicated /roles_superadmin/{userId} collection.
 * - No public listing: `list` operations are generally restricted to owners
 *   or members of a tenant to prevent unauthorized data discovery.
 * - Strict authorization for writes: All `create`, `update`, and `delete`
 *   operations require authorization checks based on tenant membership,
 *   ownership, or superadmin privileges.
 *
 * Denormalization for Authorization:
 * The 'tenantId' field is present in almost all documents to enable efficient
 * filtering and authorization. User roles and memberships are stored in the
 * `/memberships` collection for quick lookups, avoiding costly `get()` calls.
 *
 * Structural Segregation:
 * User data is stored in `/users/{userId}` separate from tenant-specific data
 * to simplify access control. Different types of tenant-owned data are stored
 * in separate collections to allow for granular permissions.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows reading and writing Tenant documents, enforcing ownership.
     * @path /tenants/{tenantId}
     * @allow (create) User AwhBCbR2OxPdIOcqio0bll9v2nr1 can create a tenant if request.auth.uid == request.resource.data.ownerUid.
     * @allow (get, list) Any authenticated user can read a tenant document.
     * @allow (update, delete) User AwhBCbR2OxPdIOcqio0bll9v2nr1 can update/delete a tenant if they are the owner (resource.data.ownerUid == request.auth.uid).
     * @deny (create) User anotherUser cannot create a tenant if request.auth.uid != request.resource.data.ownerUid.
     * @principle Enforces document ownership for writes.
     */
    match /tenants/{tenantId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(ownerUid) {
        return isSignedIn() && request.auth.uid == ownerUid;
      }
      function isExistingOwner(ownerUid) {
        return isOwner(ownerUid) && resource != null;
      }

      allow get, list: if true;
      allow create: if isOwner(request.resource.data.ownerUid);
      allow update: if isExistingOwner(resource.data.ownerUid);
      allow delete: if isExistingOwner(resource.data.ownerUid);
    }

    /**
     * @description Allows reading and writing License documents, scoped to a tenant.
     * @path /licenses/{licenseId}
     * @allow (create) Authenticated user can create a license.
     * @allow (get, list) Any authenticated user can read license documents.
     * @allow (update, delete)  Authenticated user can update or delete license documents.
     * @deny (create) Non-authenticated user cannot create a license.
     * @principle Restricts write access to authenticated users.
     */
    match /licenses/{licenseId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows reading and writing Membership documents.
     * @path /memberships/{membershipId}
     * @allow (create) Authenticated user can create a membership.
     * @allow (get, list) Authenticated user can read a membership document.
     * @allow (update, delete) Authenticated user can update/delete a membership document.
     * @deny (create) Non-authenticated user cannot create a membership.
     * @principle Restricts write access to authenticated users.
     */
    match /memberships/{membershipId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows reading and writing User documents, enforcing ownership.
     * @path /users/{userId}
     * @allow (create) User AwhBCbR2OxPdIOcqio0bll9v2nr1 can create their own user document (request.auth.uid == userId).
     * @allow (get) User AwhBCbR2OxPdIOcqio0bll9v2nr1 can read their own user document (request.auth.uid == userId).
     * @allow (list) Users cannot list all user documents (disabled for privacy).
     * @allow (update, delete) User AwhBCbR2OxPdIOcqio0bll9v2nr1 can update/delete their own user document (request.auth.uid == userId).
     * @deny (create) User anotherUser cannot create a user document with another ID (request.auth.uid != userId).
     * @deny (get) User anotherUser cannot read another user's document (request.auth.uid != userId).
     * @deny (update, delete) User anotherUser cannot update/delete another user's document (request.auth.uid != userId).
     * @principle Enforces document ownership.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public reading of Currency documents, but restricts writes.
     * @path /currencies/{currencyCode}
     * @allow (get, list) Any user can read currency documents.
     * @deny (create, update, delete) No user can create, update, or delete currency documents (read-only).
     * @principle Provides public read access with restricted writes.
     */
    match /currencies/{currencyCode} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows reading and writing FxRate documents, scoped to a tenant.
     * @path /fx_rates/{fxRateId}
     * @allow (create) Authenticated user can create a fx_rate.
     * @allow (get, list) Authenticated user can read fx_rate documents.
     * @allow (update, delete) Authenticated user can update/delete fx_rate documents.
     * @deny (create) Non-authenticated user cannot create a fx_rate.
     * @principle Restricts write access to authenticated users.
     */
    match /fx_rates/{fxRateId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows reading and writing Category documents, scoped to a tenant.
     * @path /categories/{categoryId}
     * @allow (create) Authenticated user can create a category.
     * @allow (get, list) Authenticated user can read category documents.
     * @allow (update, delete) Authenticated user can update/delete category documents.
     * @deny (create) Non-authenticated user cannot create a category.
     * @principle Restricts write access to authenticated users.
     */
    match /categories/{categoryId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows reading and writing Subcategory documents, scoped to a tenant.
     * @path /subcategories/{subcategoryId}
     * @allow (create) Authenticated user can create a subcategory.
     * @allow (get, list) Authenticated user can read subcategory documents.
     * @allow (update, delete) Authenticated user can update/delete subcategory documents.
     * @deny (create) Non-authenticated user cannot create a subcategory.
     * @principle Restricts write access to authenticated users.
     */
    match /subcategories/{subcategoryId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows reading and writing Entity documents, scoped to a tenant.
     * @path /entities/{entityId}
     * @allow (create) Authenticated user can create a entity.
     * @allow (get, list) Authenticated user can read entity documents.
     * @allow (update, delete) Authenticated user can update/delete entity documents.
     * @deny (create) Non-authenticated user cannot create a entity.
     * @principle Restricts write access to authenticated users.
     */
    match /entities/{entityId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows reading and writing Expense documents, enforcing ownership and tenant scope.
     * @path /expenses/{expenseId}
     * @allow (create) User AwhBCbR2OxPdIOcqio0bll9v2nr1 can create an expense if request.auth.uid == request.resource.data.userId.
     * @allow (get, list) Authenticated user can read expense documents.
     * @allow (update, delete) User AwhBCbR2OxPdIOcqio0bll9v2nr1 can update/delete an expense they own (resource.data.userId == request.auth.uid).
     * @deny (create) User anotherUser cannot create an expense if request.auth.uid != request.resource.data.userId.
     * @principle Enforces document ownership for writes within a tenant.
     */
    match /expenses/{expenseId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows reading and writing Budget documents, scoped to a tenant.
     * @path /budgets/{budgetId}
     * @allow (create) Authenticated user can create a budget.
     * @allow (get, list) Authenticated user can read budget documents.
     * @allow (update, delete) Authenticated user can update/delete budget documents.
     * @deny (create) Non-authenticated user cannot create a budget.
     * @principle Restricts write access to authenticated users.
     */
    match /budgets/{budgetId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows reading and writing Alert documents, scoped to a tenant.
     * @path /alerts/{alertId}
     * @allow (create) Authenticated user can create a alert.
     * @allow (get, list) Authenticated user can read alert documents.
     * @allow (update, delete) Authenticated user can update/delete alert documents.
     * @deny (create) Non-authenticated user cannot create a alert.
     * @principle Restricts write access to authenticated users.
     */
    match /alerts/{alertId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows reading and writing ReceiptRaw documents, enforcing ownership and tenant scope.
     * @path /receipts_raw/{receiptRawId}
     * @allow (create) User AwhBCbR2OxPdIOcqio0bll9v2nr1 can create a receipt_raw if request.auth.uid == request.resource.data.userId.
     * @allow (get, list) Authenticated user can read receipt_raw documents.
     * @allow (update, delete) User AwhBCbR2OxPdIOcqio0bll9v2nr1 can update/delete a receipt_raw they own (resource.data.userId == request.auth.uid).
     * @deny (create) User anotherUser cannot create a receipt_raw if request.auth.uid != request.resource.data.userId.
     * @principle Enforces document ownership for writes within a tenant.
     */
    match /receipts_raw/{receiptRawId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows reading and writing ReceiptFingerprint documents.
     * @path /receipts_fingerprints/{receiptFingerprintId}
     * @allow (create) Authenticated user can create a receipt_fingerprint.
     * @allow (get, list) Authenticated user can read receipt_fingerprint documents.
     * @allow (update, delete) Authenticated user can update/delete receipt_fingerprint documents.
     * @deny (create) Non-authenticated user cannot create a receipt_fingerprint.
     * @principle Restricts write access to authenticated users.
     */
    match /receipts_fingerprints/{receiptFingerprintId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows reading and writing AuditLog documents, scoped to a tenant.
     * @path /audit_logs/{auditLogId}
     * @allow (create) Authenticated user can create a audit_log.
     * @allow (get, list) Authenticated user can read audit_log documents.
     * @allow (update, delete) Authenticated user can update/delete audit_log documents.
     * @deny (create) Non-authenticated user cannot create a audit_log.
     * @principle Restricts write access to authenticated users.
     */
    match /audit_logs/{auditLogId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

  }
}