rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @principle Requires authentication for most operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     * @principle Enforces user-specific data access.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the tenant.
     * @param {string} ownerUid - The ownerUid in the document.
     * @principle Enforces tenant ownership for specific operations.
     */
    function isTenantOwner(ownerUid) {
      return isSignedIn() && request.auth.uid == ownerUid;
    }

    /**
     * @description Checks if the authenticated user is a member of the tenant.
     * @param {string} tenantId - The tenantId to check against the membership.
     * @principle Enforces tenant-based access control.
     */
    function isTenantMember(tenantId) {
        return isSignedIn() && exists(/databases/$(database)/documents/memberships/$(request.auth.uid + '_' + tenantId));
    }

    /**
     * @description Checks if the authenticated user is a superadmin.
     * @principle Allows superadmins to bypass tenant restrictions.
     */
    function isSuperadmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperadmin == true;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the document.
     * @param {string} userId - The user ID to compare against the document's owner.
     * @principle Ensures only the owner can modify or delete the document, and that the document exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows only authenticated users.
     * @path /tenants/{tenantId}
     * @allow (get) Authenticated user can get tenant data.
     * @deny (create) Non-authenticated user cannot create a tenant.
     * @principle Enforces authentication for all tenant operations.
     */
    match /tenants/{tenantId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      allow create: if isSignedIn() && isTenantOwner(request.resource.data.ownerUid) && request.resource.data.id == tenantId;
      allow update: if isSignedIn() && isTenantOwner(resource.data.ownerUid) && request.resource.data.ownerUid == resource.data.ownerUid;
      allow delete: if isSignedIn() && isTenantOwner(resource.data.ownerUid);
    }

    /**
     * @description Allows access to licenses based on tenant membership.
     * @path /licenses/{licenseId}
     * @allow (get) Authenticated user can get license data if a member of the tenant.
     * @deny (create) Non-authenticated user cannot create a license.
     * @principle Enforces tenant membership for license access.
     */
    match /licenses/{licenseId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);

      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId) && request.resource.data.tenantId == resource.data.tenantId;
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Allows management of memberships.
     * @path /memberships/{membershipId}
     * @allow (get) Authenticated user can get membership data if the user id matches.
     * @deny (create) Non-authenticated user cannot create a membership.
     * @principle Enforces user-specific membership access.
     */
    match /memberships/{membershipId} {
      allow get: if isOwner(resource.data.uid) || isSuperadmin();
      allow list: if isOwner(resource.data.uid) || isSuperadmin();

      allow create: if isSignedIn() && (isTenantMember(request.resource.data.tenantId) || isSuperadmin());
      allow update: if isSignedIn() && ((isOwner(resource.data.uid) && request.resource.data.uid == resource.data.uid) || isSuperadmin());
      allow delete: if isSignedIn() && ((isOwner(resource.data.uid)) || isSuperadmin());
    }

    /**
     * @description Allows access to user profiles.
     * @path /users/{userId}
     * @allow (get) Authenticated user can get their own profile data.
     * @deny (list) Listing all users is not allowed.
     * @principle Enforces user-specific profile access and prevents unauthorized listing.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Do not allow listing of users.

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId; // User can create their own profile.
      allow update: if isOwner(userId) && request.resource.data.uid == userId;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to currencies.
     * @path /currencies/{currencyCode}
     * @allow (get, list) Public read access to currencies.
     * @deny (create, update, delete) No write access allowed.
     * @principle Allows public access for currency data, restricts writes.
     */
    match /currencies/{currencyCode} {
      allow get, list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows access to FX rates based on tenant membership.
     * @path /fx_rates/{fxRateId}
     * @allow (get) Authenticated user can get FX rate data if a member of the tenant.
     * @deny (create) Non-authenticated user cannot create an FX rate.
     * @principle Enforces tenant membership for FX rate access.
     */
    match /fx_rates/{fxRateId} {
      allow get: if isSignedIn() && (isTenantMember(resource.data.tenantId) || isSuperadmin());
      allow list: if isSignedIn() && (isTenantMember(resource.data.tenantId) || isSuperadmin());

      allow create: if isSignedIn() && (isTenantMember(request.resource.data.tenantId) || isSuperadmin());
      allow update: if isSignedIn() && ((isTenantMember(resource.data.tenantId) && request.resource.data.tenantId == resource.data.tenantId) || isSuperadmin());
      allow delete: if isSignedIn() && ((isTenantMember(resource.data.tenantId)) || isSuperadmin());
    }

    /**
     * @description Allows access to categories based on tenant membership.
     * @path /categories/{categoryId}
     * @allow (get) Authenticated user can get category data if a member of the tenant.
     * @deny (create) Non-authenticated user cannot create a category.
     * @principle Enforces tenant membership for category access.
     */
    match /categories/{categoryId} {
      allow get: if isSignedIn() && (isTenantMember(resource.data.tenantId) || isSuperadmin());
      allow list: if isSignedIn() && (isTenantMember(resource.data.tenantId) || isSuperadmin());

      allow create: if isSignedIn() && (isTenantMember(request.resource.data.tenantId) || isSuperadmin());
      allow update: if isSignedIn() && ((isTenantMember(resource.data.tenantId) && request.resource.data.tenantId == resource.data.tenantId) || isSuperadmin());
      allow delete: if isSignedIn() && ((isTenantMember(resource.data.tenantId)) || isSuperadmin());
    }

    /**
     * @description Allows access to subcategories based on tenant membership.
     * @path /subcategories/{subcategoryId}
     * @allow (get) Authenticated user can get subcategory data if a member of the tenant.
     * @deny (create) Non-authenticated user cannot create a subcategory.
     * @principle Enforces tenant membership for subcategory access.
     */
    match /subcategories/{subcategoryId} {
      allow get: if isSignedIn() && (isTenantMember(resource.data.tenantId) || isSuperadmin());
      allow list: if isSignedIn() && (isTenantMember(resource.data.tenantId) || isSuperadmin());

      allow create: if isSignedIn() && (isTenantMember(request.resource.data.tenantId) || isSuperadmin());
      allow update: if isSignedIn() && ((isTenantMember(resource.data.tenantId) && request.resource.data.tenantId == resource.data.tenantId) || isSuperadmin());
      allow delete: if isSignedIn() && ((isTenantMember(resource.data.tenantId)) || isSuperadmin());
    }

    /**
     * @description Allows access to entities based on tenant membership.
     * @path /entities/{entityId}
     * @allow (get) Authenticated user can get entity data if a member of the tenant.
     * @deny (create) Non-authenticated user cannot create an entity.
     * @principle Enforces tenant membership for entity access.
     */
    match /entities/{entityId} {
      allow get: if isSignedIn() && (isTenantMember(resource.data.tenantId) || isSuperadmin());
      allow list: if isSignedIn() && (isTenantMember(resource.data.tenantId) || isSuperadmin());

      allow create: if isSignedIn() && (isTenantMember(request.resource.data.tenantId) || isSuperadmin());
      allow update: if isSignedIn() && ((isTenantMember(resource.data.tenantId) && request.resource.data.tenantId == resource.data.tenantId) || isSuperadmin());
      allow delete: if isSignedIn() && ((isTenantMember(resource.data.tenantId)) || isSuperadmin());
    }

    /**
     * @description Allows access to expenses based on tenant membership and user ownership.
     * @path /expenses/{expenseId}
     * @allow (get) Authenticated user can get expense data if a member of the tenant and the owner of the resource.
     * @deny (create) Non-authenticated user cannot create an expense.
     * @principle Enforces tenant membership and user ownership for expense access.
     */
    match /expenses/{expenseId} {
      allow get: if isSignedIn() && ((isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId)) || isSuperadmin());
      allow list: if isSignedIn() && ((isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId)) || isSuperadmin());

      allow create: if isSignedIn() && ((isTenantMember(request.resource.data.tenantId) && isOwner(request.resource.data.userId)) || isSuperadmin());
      allow update: if isSignedIn() && (((isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId)) && request.resource.data.tenantId == resource.data.tenantId && request.resource.data.userId == resource.data.userId) || isSuperadmin());
      allow delete: if isSignedIn() && (((isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId))) || isSuperadmin());
    }

    /**
     * @description Allows access to budgets based on tenant membership.
     * @path /budgets/{budgetId}
     * @allow (get) Authenticated user can get budget data if a member of the tenant.
     * @deny (create) Non-authenticated user cannot create a budget.
     * @principle Enforces tenant membership for budget access.
     */
    match /budgets/{budgetId} {
      allow get: if isSignedIn() && (isTenantMember(resource.data.tenantId) || isSuperadmin());
      allow list: if isSignedIn() && (isTenantMember(resource.data.tenantId) || isSuperadmin());

      allow create: if isSignedIn() && (isTenantMember(request.resource.data.tenantId) || isSuperadmin());
      allow update: if isSignedIn() && ((isTenantMember(resource.data.tenantId) && request.resource.data.tenantId == resource.data.tenantId) || isSuperadmin());
      allow delete: if isSignedIn() && ((isTenantMember(resource.data.tenantId)) || isSuperadmin());
    }

    /**
     * @description Allows access to alerts based on tenant membership.
     * @path /alerts/{alertId}
     * @allow (get) Authenticated user can get alert data if a member of the tenant.
     * @deny (create) Non-authenticated user cannot create an alert.
     * @principle Enforces tenant membership for alert access.
     */
    match /alerts/{alertId} {
      allow get: if isSignedIn() && (isTenantMember(resource.data.tenantId) || isSuperadmin());
      allow list: if isSignedIn() && (isTenantMember(resource.data.tenantId) || isSuperadmin());

      allow create: if isSignedIn() && (isTenantMember(request.resource.data.tenantId) || isSuperadmin());
      allow update: if isSignedIn() && ((isTenantMember(resource.data.tenantId) && request.resource.data.tenantId == resource.data.tenantId) || isSuperadmin());
      allow delete: if isSignedIn() && ((isTenantMember(resource.data.tenantId)) || isSuperadmin());
    }

    /**
     * @description Allows access to raw receipts based on tenant membership and user ownership.
     * @path /receipts_raw/{receiptRawId}
     * @allow (get) Authenticated user can get raw receipt data if a member of the tenant and the owner of the resource.
     * @deny (create) Non-authenticated user cannot create a raw receipt.
     * @principle Enforces tenant membership and user ownership for raw receipt access.
     */
    match /receipts_raw/{receiptRawId} {
      allow get: if isSignedIn() && ((isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId)) || isSuperadmin());
      allow list: if isSignedIn() && ((isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId)) || isSuperadmin());

      allow create: if isSignedIn() && ((isTenantMember(request.resource.data.tenantId) && isOwner(request.resource.data.userId)) || isSuperadmin());
      allow update: if isSignedIn() && (((isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId)) && request.resource.data.tenantId == resource.data.tenantId && request.resource.data.userId == resource.data.userId) || isSuperadmin());
      allow delete: if isSignedIn() && (((isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId))) || isSuperadmin());
    }

    /**
     * @description Allows access to receipt fingerprints.
     * @path /receipts_fingerprints/{receiptFingerprintId}
     */
    match /receipts_fingerprints/{receiptFingerprintId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows access to audit logs based on tenant membership.
     * @path /audit_logs/{auditLogId}
     * @allow (get) Authenticated user can get audit log data if a member of the tenant.
     * @deny (create) Non-authenticated user cannot create an audit log.
     * @principle Enforces tenant membership for audit log access.
     */
    match /audit_logs/{auditLogId} {
      allow get: if isSignedIn() && (isTenantMember(resource.data.tenantId) || isSuperadmin());
      allow list: if isSignedIn() && (isTenantMember(resource.data.tenantId) || isSuperadmin());

      allow create: if isSignedIn() && (isTenantMember(request.resource.data.tenantId) || isSuperadmin());
      allow update: if isSignedIn() && ((isTenantMember(resource.data.tenantId) && request.resource.data.tenantId == resource.data.tenantId) || isSuperadmin());
      allow delete: if isSignedIn() && ((isTenantMember(resource.data.tenantId)) || isSuperadmin());
    }
  }
}