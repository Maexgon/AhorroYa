/**
  * @description This ruleset enforces a strict user-ownership and tenant-based security model for the "Ahorro Ya" application. It leverages denormalized data and structural segregation to ensure data isolation and efficient authorization.
  * @dataStructure
  * - Users: Stored in `/users/{userId}`. User profiles are private and only accessible to the owner.
  * - Tenants: Stored in `/tenants/{tenantId}`. Tenants are owned by a user (`ownerUid`).
  * - Memberships: Stored in `/memberships/{membershipId}`. Defines user roles within tenants.
  * - Tenant-Owned Data: All other collections (expenses, categories, etc.) are tenant-specific and include a `tenantId` field. Access is restricted to members of the corresponding tenant.
  * @keySecurityDecisions
  * - User Listing: User listing is disabled for privacy.
  * - Superadmin Role: A `isSuperadmin` field on the user document grants bypass privileges, but requires a `get()` call and should be replaced with a dedicated collection (`/roles_superadmin/{userId}`).
  * - Default Deny: Any access not explicitly allowed is denied.
  * @denormalizationForAuthorization
  * - Tenant ID: The `tenantId` field is included in almost all collections to avoid costly `get()` calls for tenant membership checks.
  * - User ID: The `userId` field is included in the `expenses` and `receipts_raw` collections to establish ownership.
  * @structuralSegregation
  * - User Data: User profiles are stored separately from tenant-specific data.
  * - Private vs. Public: All data is considered private and requires authentication.
  */
 

 rules_version = '2';
 service cloud.firestore {
  match /databases/{database}/documents {
 

  function isSignedIn() {
  return request.auth != null;
  }
 

  function isOwner(userId) {
  return isSignedIn() && request.auth.uid == userId;
  }
 

  /**
  * @description Enforces owner-only access to user profiles.
  * @path /users/{userId}
  * @allow (create) User `user_abc` can create their profile if `request.auth.uid == 'user_abc'`.
  * @allow (get) User `user_abc` can read their profile if `request.auth.uid == 'user_abc'`.
  * @allow (update) User `user_abc` can update their profile if `request.auth.uid == 'user_abc'`.
  * @allow (delete) User `user_abc` can delete their profile if `request.auth.uid == 'user_abc'`.
  * @deny (create) User `user_xyz` cannot create a profile for `user_abc`.
  * @deny (get) User `user_xyz` cannot read profile for `user_abc`.
  * @principle Enforces document ownership for all operations.
  */
  match /users/{userId} {
  allow get: if isOwner(userId);
  allow list: if false;
  allow create: if isOwner(userId);
  allow update: if isOwner(userId);
  allow delete: if isOwner(userId);
  }
 

  /**
  * @description Enforces owner-only access to tenant documents based on the 'ownerUid' field.
  * @path /tenants/{tenantId}
  * @allow (create) User `user_abc` can create a tenant if `request.resource.data.ownerUid == 'user_abc'`.
  * @allow (get) User `user_abc` can read a tenant if `resource.data.ownerUid == 'user_abc'`.
  * @allow (update) User `user_abc` can update a tenant if `resource.data.ownerUid == 'user_abc'`.
  * @allow (delete) User `user_abc` can delete a tenant if `resource.data.ownerUid == 'user_abc'`.
  * @deny (create) User `user_xyz` cannot create a tenant with `ownerUid == 'user_abc'`.
  * @deny (get) User `user_xyz` cannot read a tenant with `ownerUid == 'user_abc'`.
  * @principle Enforces document ownership for writes; reads require authentication.
  */
  match /tenants/{tenantId} {
  allow get: if isSignedIn();
  allow list: if false;
  allow create: if request.resource.data.ownerUid == request.auth.uid;
  allow update: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
  allow delete: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
  }
 

  /**
  * @description Restricts access to licenses based on tenant ID.
  * @path /licenses/{licenseId}
  * @allow (get) Anyone can read license if it exists
  * @allow (create) Only authenticated users can create licenses
  * @allow (update) Only authenticated users can update licenses
  * @allow (delete) Only authenticated users can delete licenses
  * @deny (create) Non-authenticated users cannot create licenses.
  * @deny (get) Non-authenticated users cannot read licenses.
  * @principle Enforces tenant-level access control.
  */
  match /licenses/{licenseId} {
  allow get: if isSignedIn();
  allow list: if false;
  allow create: if isSignedIn();
  allow update: if isSignedIn();
  allow delete: if isSignedIn();
  }
 

  /**
  * @description Restricts access to memberships.
  * @path /memberships/{membershipId}
  * @allow (get) Only authenticated users can get memberships
  * @allow (create) Only authenticated users can create memberships
  * @allow (update) Only authenticated users can update memberships
  * @allow (delete) Only authenticated users can delete memberships
  * @deny (create) Non-authenticated users cannot create memberships.
  * @deny (get) Non-authenticated users cannot read memberships.
  * @principle Enforces tenant-level access control.
  */
  match /memberships/{membershipId} {
  allow get: if isSignedIn();
  allow list: if false;
  allow create: if isSignedIn();
  allow update: if isSignedIn();
  allow delete: if isSignedIn();
  }
 

  /**
  * @description Allows public read access to currencies.
  * @path /currencies/{currencyCode}
  * @allow (get) Anyone can read currencies.
  * @allow (list) Anyone can list currencies.
  * @deny (create) No one can create currencies.
  * @principle Provides public read access while restricting writes.
  */
  match /currencies/{currencyCode} {
  allow get, list: if true;
  allow create: if false;
  allow update: if false;
  allow delete: if false;
  }
 

  /**
  * @description Restricts access to FX rates based on tenant ID.
  * @path /fx_rates/{fxRateId}
  * @allow (get) Only authenticated users can get fx_rates
  * @allow (create) Only authenticated users can create fx_rates
  * @allow (update) Only authenticated users can update fx_rates
  * @allow (delete) Only authenticated users can delete fx_rates
  * @deny (create) Non-authenticated users cannot create fx_rates.
  * @deny (get) Non-authenticated users cannot read fx_rates.
  * @principle Enforces tenant-level access control.
  */
  match /fx_rates/{fxRateId} {
  allow get: if isSignedIn();
  allow list: if false;
  allow create: if isSignedIn();
  allow update: if isSignedIn();
  allow delete: if isSignedIn();
  }
 

  /**
  * @description Restricts access to categories based on tenant ID.
  * @path /categories/{categoryId}
  * @allow (get) Only authenticated users can get categories
  * @allow (create) Only authenticated users can create categories
  * @allow (update) Only authenticated users can update categories
  * @allow (delete) Only authenticated users can delete categories
  * @deny (create) Non-authenticated users cannot create categories.
  * @deny (get) Non-authenticated users cannot read categories.
  * @principle Enforces tenant-level access control.
  */
  match /categories/{categoryId} {
  allow get: if isSignedIn();
  allow list: if false;
  allow create: if isSignedIn();
  allow update: if isSignedIn();
  allow delete: if isSignedIn();
  }
 

  /**
  * @description Restricts access to subcategories based on tenant ID.
  * @path /subcategories/{subcategoryId}
  * @allow (get) Only authenticated users can get subcategories
  * @allow (create) Only authenticated users can create subcategories
  * @allow (update) Only authenticated users can update subcategories
  * @allow (delete) Only authenticated users can delete subcategories
  * @deny (create) Non-authenticated users cannot create subcategories.
  * @deny (get) Non-authenticated users cannot read subcategories.
  * @principle Enforces tenant-level access control.
  */
  match /subcategories/{subcategoryId} {
  allow get: if isSignedIn();
  allow list: if false;
  allow create: if isSignedIn();
  allow update: if isSignedIn();
  allow delete: if isSignedIn();
  }
 

  /**
  * @description Restricts access to entities based on tenant ID.
  * @path /entities/{entityId}
  * @allow (get) Only authenticated users can get entities
  * @allow (create) Only authenticated users can create entities
  * @allow (update) Only authenticated users can update entities
  * @allow (delete) Only authenticated users can delete entities
  * @deny (create) Non-authenticated users cannot create entities.
  * @deny (get) Non-authenticated users cannot read entities.
  * @principle Enforces tenant-level access control.
  */
  match /entities/{entityId} {
  allow get: if isSignedIn();
  allow list: if false;
  allow create: if isSignedIn();
  allow update: if isSignedIn();
  allow delete: if isSignedIn();
  }
 

  /**
  * @description Restricts access to expenses based on tenant ID and user ID.
  * @path /expenses/{expenseId}
  * @allow (get) Only authenticated users can get expenses
  * @allow (create) Only authenticated users can create expenses
  * @allow (update) Only authenticated users can update expenses
  * @allow (delete) Only authenticated users can delete expenses
  * @deny (create) Non-authenticated users cannot create expenses.
  * @deny (get) Non-authenticated users cannot read expenses.
  * @principle Enforces tenant-level access control.
  */
  match /expenses/{expenseId} {
  allow get: if isSignedIn();
  allow list: if false;
  allow create: if isSignedIn();
  allow update: if isSignedIn();
  allow delete: if isSignedIn();
  }
 

  /**
  * @description Restricts access to budgets based on tenant ID.
  * @path /budgets/{budgetId}
  * @allow (get) Only authenticated users can get budgets
  * @allow (create) Only authenticated users can create budgets
  * @allow (update) Only authenticated users can update budgets
  * @allow (delete) Only authenticated users can delete budgets
  * @deny (create) Non-authenticated users cannot create budgets.
  * @deny (get) Non-authenticated users cannot read budgets.
  * @principle Enforces tenant-level access control.
  */
  match /budgets/{budgetId} {
  allow get: if isSignedIn();
  allow list: if false;
  allow create: if isSignedIn();
  allow update: if isSignedIn();
  allow delete: if isSignedIn();
  }
 

  /**
  * @description Restricts access to alerts based on tenant ID.
  * @path /alerts/{alertId}
  * @allow (get) Only authenticated users can get alerts
  * @allow (create) Only authenticated users can create alerts
  * @allow (update) Only authenticated users can update alerts
  * @allow (delete) Only authenticated users can delete alerts
  * @deny (create) Non-authenticated users cannot create alerts.
  * @deny (get) Non-authenticated users cannot read alerts.
  * @principle Enforces tenant-level access control.
  */
  match /alerts/{alertId} {
  allow get: if isSignedIn();
  allow list: if false;
  allow create: if isSignedIn();
  allow update: if isSignedIn();
  allow delete: if isSignedIn();
  }
 

  /**
  * @description Restricts access to raw receipt data based on tenant ID and user ID.
  * @path /receipts_raw/{receiptRawId}
  * @allow (get) Only authenticated users can get receipt_raws
  * @allow (create) Only authenticated users can create receipt_raws
  * @allow (update) Only authenticated users can update receipt_raws
  * @allow (delete) Only authenticated users can delete receipt_raws
  * @deny (create) Non-authenticated users cannot create receipt_raws.
  * @deny (get) Non-authenticated users cannot read receipt_raws.
  * @principle Enforces tenant-level access control.
  */
  match /receipts_raw/{receiptRawId} {
  allow get: if isSignedIn();
  allow list: if false;
  allow create: if isSignedIn();
  allow update: if isSignedIn();
  allow delete: if isSignedIn();
  }
 

  /**
  * @description Restricts access to receipt fingerprints.
  * @path /receipts_fingerprints/{receiptFingerprintId}
  * @allow (get) Only authenticated users can get receipt_fingerprints
  * @allow (create) Only authenticated users can create receipt_fingerprints
  * @allow (update) Only authenticated users can update receipt_fingerprints
  * @allow (delete) Only authenticated users can delete receipt_fingerprints
  * @deny (create) Non-authenticated users cannot create receipt_fingerprints.
  * @deny (get) Non-authenticated users cannot read receipt_fingerprints.
  * @principle Enforces tenant-level access control.
  */
  match /receipts_fingerprints/{receiptFingerprintId} {
  allow get: if isSignedIn();
  allow list: if false;
  allow create: if isSignedIn();
  allow update: if isSignedIn();
  allow delete: if isSignedIn();
  }
 

  /**
  * @description Restricts access to audit logs based on tenant ID.
  * @path /audit_logs/{auditLogId}
  * @allow (get) Only authenticated users can get audit_logs
  * @allow (create) Only authenticated users can create audit_logs
  * @allow (update) Only authenticated users can update audit_logs
  * @allow (delete) Only authenticated users can delete audit_logs
  * @deny (create) Non-authenticated users cannot create audit_logs.
  * @deny (get) Non-authenticated users cannot read audit_logs.
  * @principle Enforces tenant-level access control.
  */
  match /audit_logs/{auditLogId} {
  allow get: if isSignedIn();
  allow list: if false;
  allow create: if isSignedIn();
  allow update: if isSignedIn();
  allow delete: if isSignedIn();
  }
  }
 }