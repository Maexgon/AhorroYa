/**
 * @file Firestore Security Rules for Ahorro Ya (Expense Tracking App)
 *
 * @core_philosophy:
 * This ruleset enforces a multi-tenant security model with strict user ownership within tenants.
 * Users can only access data belonging to tenants they are members of, and only owners can manage tenant settings.
 *
 * @data_structure:
 * - /users/{userId}: User profiles, accessible only by the user themselves.
 * - /tenants/{tenantId}: Tenant information, accessible only by tenant owners.
 * - /memberships/{membershipId}: User memberships in tenants.
 * - Other collections (expenses, categories, etc.): Include a 'tenantId' field to link them to a tenant.
 *
 * @key_security_decisions:
 * - User listing is disabled for privacy.
 * - Superadmin role is supported, but its use should be minimized in favor of more granular roles.
 * - All write operations require authentication.
 * - Data validation is limited to fields critical for authorization and relational integrity, focusing on rapid prototyping.
 * - Rules are structured to avoid complex queries and `get()` calls for performance and cost efficiency.
 *
 * @denormalization_for_authorization:
 * - 'tenantId' is included in most collections to avoid needing to query parent documents to determine the tenant.
 * - 'ownerUid' is included in the 'tenants' collection to authorize write access to the document.
 * - The memberships collection establishes the relationships between users and tenants
 *
 * @structural_segregation:
 * - User data is stored separately from tenant data to simplify access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Checks if the user is signed in.
     * @return: True if the user is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description: Checks if the authenticated user's UID matches the provided userId.
     * @param: userId - The user ID to compare against the authenticated user's UID.
     * @return: True if the UIDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description: Checks if the authenticated user's UID matches the ownerUid field in the resource data.
     * @param: ownerUid - The owner ID to compare against the authenticated user's UID.
     * @return: True if the UIDs match, false otherwise.
     */
    function isTenantOwner(ownerUid) {
      return isSignedIn() && request.auth.uid == ownerUid;
    }

    /**
     * @description: Checks if the authenticated user is a member of the tenant.
     * @param: tenantId - The ID of the tenant to check membership for.
     * @return: True if the user is a member of the tenant, false otherwise.
     */
    function isTenantMember(tenantId) {
        return exists(/databases/$(database)/documents/memberships/$(request.auth.uid + '_' + tenantId));
    }

    /**
     * @description: Checks if the authenticated user is a superadmin.
     * @return: True if the user is a superadmin, false otherwise.
     */
    function isSuperadmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperadmin == true;
    }

    /**
     * @description: Checks if the user is the owner and the resource exists
     * @param: userId - The user ID to compare against the authenticated user's UID.
     * @return: True if the user is the owner and resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /tenants collection.
     * @path /tenants/{tenantId}
     * @allow (create): Authenticated user can create a tenant if the ownerUid matches their UID.
     * @allow (get): Authenticated user can read a tenant if they are a member of it.
     * @deny (update): Non-owner cannot update a tenant.
     * @principle: Enforces tenant ownership and membership.
     */
    match /tenants/{tenantId} {
      allow get: if isTenantMember(tenantId) || isSuperadmin();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update: if isTenantOwner(resource.data.ownerUid) || isSuperadmin();
      allow delete: if false;
    }

    /**
     * @description Rules for the /licenses collection.
     * @path /licenses/{licenseId}
     * @allow (create): Authenticated user can create a license if they are a member of the tenant.
     * @allow (get): Authenticated user can read a license if they are a member of the tenant.
     * @deny (update): Non-member cannot update a license.
     * @principle: Enforces tenant membership.
     */
    match /licenses/{licenseId} {
      function getTenantId() {
          return resource.data.tenantId;
      }
      allow get: if isTenantMember(getTenantId()) || isSuperadmin();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.tenantId != null && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && getTenantId() != null && isTenantMember(getTenantId());
      allow delete: if false;
    }

    /**
     * @description Rules for the /memberships collection.
     * @path /memberships/{membershipId}
     * @allow (create): Authenticated user can create a membership if they are the tenant owner.
     * @allow (get): Authenticated user can read a membership if they are a member of the tenant.
     * @deny (update): Non-owner cannot update a membership.
     * @principle: Enforces tenant ownership and membership.
     */
    match /memberships/{membershipId} {
        function getTenantId() {
            return resource.data.tenantId;
        }
      allow get: if getTenantId() != null && isTenantMember(getTenantId()) || isSuperadmin();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.tenantId != null && isTenantOwner(get(/databases/$(database)/documents/tenants/$(request.resource.data.tenantId)).data.ownerUid);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (create): Authenticated user can create their own user document.
     * @allow (get): Authenticated user can read their own user document.
     * @deny (update): Non-owner cannot update a user document.
     * @principle: Enforces user ownership.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isSuperadmin();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Rules for the /currencies collection.
     * @path /currencies/{currencyCode}
     * @allow (get): Anyone can read currency data.
     * @allow (list): Anyone can list currencies.
     * @deny (create, update, delete): No one can create, update, or delete currencies (read-only).
     * @principle: Public read access, no write access.
     */
    match /currencies/{currencyCode} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /fx_rates collection.
     * @path /fx_rates/{fxRateId}
     * @allow (create): Authenticated user can create a fxRate if they are a member of the tenant.
     * @allow (get): Authenticated user can read a fxRate if they are a member of the tenant.
     * @deny (update): Non-member cannot update a fxRate.
     * @principle: Enforces tenant membership.
     */
    match /fx_rates/{fxRateId} {
      function getTenantId() {
          return resource.data.tenantId;
      }
      allow get: if isTenantMember(getTenantId()) || isSuperadmin();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.tenantId != null && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && getTenantId() != null && isTenantMember(getTenantId());
      allow delete: if false;
    }

    /**
     * @description Rules for the /categories collection.
     * @path /categories/{categoryId}
     * @allow (create): Authenticated user can create a category if they are a member of the tenant.
     * @allow (get): Authenticated user can read a category if they are a member of the tenant.
     * @deny (update): Non-member cannot update a category.
     * @principle: Enforces tenant membership.
     */
    match /categories/{categoryId} {
        function getTenantId() {
            return resource.data.tenantId;
        }
      allow get: if isTenantMember(getTenantId()) || isSuperadmin();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.tenantId != null && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && getTenantId() != null && isTenantMember(getTenantId());
      allow delete: if false;
    }

    /**
     * @description Rules for the /subcategories collection.
     * @path /subcategories/{subcategoryId}
     * @allow (create): Authenticated user can create a subcategory if they are a member of the tenant.
     * @allow (get): Authenticated user can read a subcategory if they are a member of the tenant.
     * @deny (update): Non-member cannot update a subcategory.
     * @principle: Enforces tenant membership.
     */
    match /subcategories/{subcategoryId} {
        function getTenantId() {
            return resource.data.tenantId;
        }
      allow get: if isTenantMember(getTenantId()) || isSuperadmin();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.tenantId != null && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && getTenantId() != null && isTenantMember(getTenantId());
      allow delete: if false;
    }

    /**
     * @description Rules for the /entities collection.
     * @path /entities/{entityId}
     * @allow (create): Authenticated user can create a entity if they are a member of the tenant.
     * @allow (get): Authenticated user can read a entity if they are a member of the tenant.
     * @deny (update): Non-member cannot update a entity.
     * @principle: Enforces tenant membership.
     */
    match /entities/{entityId} {
        function getTenantId() {
            return resource.data.tenantId;
        }
      allow get: if isTenantMember(getTenantId()) || isSuperadmin();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.tenantId != null && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && getTenantId() != null && isTenantMember(getTenantId());
      allow delete: if false;
    }

    /**
     * @description Rules for the /expenses collection.
     * @path /expenses/{expenseId}
     * @allow (create): Authenticated user can create a expense if they are a member of the tenant and the userId matches their UID.
     * @allow (get): Authenticated user can read a expense if they are a member of the tenant and the userId matches their UID.
     * @deny (update): Non-owner cannot update a expense.
     * @principle: Enforces tenant membership and user ownership.
     */
    match /expenses/{expenseId} {
        function getTenantId() {
            return resource.data.tenantId;
        }
      allow get: if getTenantId() != null && isTenantMember(getTenantId()) && resource.data.userId == request.auth.uid || isSuperadmin();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.tenantId != null && isTenantMember(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && getTenantId() != null && isTenantMember(getTenantId()) && resource.data.userId == request.auth.uid || isSuperadmin();
      allow delete: if isSignedIn() && getTenantId() != null && isTenantMember(getTenantId()) && resource.data.userId == request.auth.uid || isSuperadmin();
    }

    /**
     * @description Rules for the /budgets collection.
     * @path /budgets/{budgetId}
     * @allow (create): Authenticated user can create a budget if they are a member of the tenant.
     * @allow (get): Authenticated user can read a budget if they are a member of the tenant.
     * @deny (update): Non-member cannot update a budget.
     * @principle: Enforces tenant membership.
     */
    match /budgets/{budgetId} {
        function getTenantId() {
            return resource.data.tenantId;
        }
      allow get: if isTenantMember(getTenantId()) || isSuperadmin();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.tenantId != null && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && getTenantId() != null && isTenantMember(getTenantId());
      allow delete: if false;
    }

    /**
     * @description Rules for the /alerts collection.
     * @path /alerts/{alertId}
     * @allow (create): Authenticated user can create a alert if they are a member of the tenant.
     * @allow (get): Authenticated user can read a alert if they are a member of the tenant.
     * @deny (update): Non-member cannot update a alert.
     * @principle: Enforces tenant membership.
     */
    match /alerts/{alertId} {
        function getTenantId() {
            return resource.data.tenantId;
        }
      allow get: if isTenantMember(getTenantId()) || isSuperadmin();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.tenantId != null && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && getTenantId() != null && isTenantMember(getTenantId());
      allow delete: if false;
    }

    /**
     * @description Rules for the /receipts_raw collection.
     * @path /receipts_raw/{receiptRawId}
     * @allow (create): Authenticated user can create a receipt_raw if they are a member of the tenant and the userId matches their UID.
     * @allow (get): Authenticated user can read a receipt_raw if they are a member of the tenant and the userId matches their UID.
     * @deny (update): Non-owner cannot update a receipt_raw.
     * @principle: Enforces tenant membership and user ownership.
     */
    match /receipts_raw/{receiptRawId} {
        function getTenantId() {
            return resource.data.tenantId;
        }
      allow get: if getTenantId() != null && isTenantMember(getTenantId()) && resource.data.userId == request.auth.uid || isSuperadmin();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.tenantId != null && isTenantMember(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && getTenantId() != null && isTenantMember(getTenantId()) && resource.data.userId == request.auth.uid || isSuperadmin();
      allow delete: if false;
    }

     /**
      * @description Rules for the /receipts_fingerprints collection.
      * @path /receipts_fingerprints/{receiptFingerprintId}
      */
    match /receipts_fingerprints/{receiptFingerprintId} {
        function getTenantId() {
            return resource.data.tenantId;
        }
        allow get: if isTenantMember(getTenantId()) || isSuperadmin();
        allow list: if false; // Listing all fingerprints is likely not needed and could be a security risk
        allow create: if isSignedIn() && request.resource.data.tenantId != null && isTenantMember(request.resource.data.tenantId);
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Rules for the /audit_logs collection.
     * @path /audit_logs/{auditLogId}
     * @allow (create): Authenticated user can create a audit_log if they are a member of the tenant.
     * @allow (get): Authenticated user can read a audit_log if they are a member of the tenant.
     * @deny (update): Non-member cannot update a audit_log.
     * @principle: Enforces tenant membership.
     */
    match /audit_logs/{auditLogId} {
        function getTenantId() {
            return resource.data.tenantId;
        }
      allow get: if isTenantMember(getTenantId()) || isSuperadmin();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.tenantId != null && isTenantMember(request.resource.data.tenantId);
      allow update: if false;
      allow delete: if false;
    }
  }
}