/**
 * @file Firestore Security Rules for Ahorro Ya
 * @description This ruleset enforces a multi-tenant security model, restricting data access based on user identity, tenant ownership, and explicit membership roles. Data access is governed by tenantId and userId, which are denormalized for Authorization Independence.
 *
 * Data Structure:
 * - /tenants/{tenantId}: Root-level collection for tenant profiles.
 * - /licenses/{licenseId}: Root-level collection for licenses.
 * - /memberships/{membershipId}: Root-level collection for user memberships in tenants.
 * - /users/{userId}: Root-level collection for user profiles.
 * - /currencies/{currencyCode}: Root-level collection for currency data.
 * - /fx_rates/{fxRateId}: Root-level collection for FX rates, scoped by tenant.
 * - /categories/{categoryId}: Root-level collection for expense categories, scoped by tenant.
 * - /subcategories/{subcategoryId}: Root-level collection for expense subcategories, scoped by tenant.
 * - /entities/{entityId}: Root-level collection for business entities, scoped by tenant.
 * - /expenses/{expenseId}: Root-level collection for expense records, scoped by tenant and user.
 * - /budgets/{budgetId}: Root-level collection for budget data, scoped by tenant.
 * - /alerts/{alertId}: Root-level collection for alert notifications, scoped by tenant.
 * - /receipts_raw/{receiptRawId}: Root-level collection for raw receipt data, scoped by tenant and user.
 * - /receipts_fingerprints/{receiptFingerprintId}: Root-level collection for receipt fingerprints.
 * - /audit_logs/{auditLogId}: Root-level collection for audit logs, scoped by tenant.
 *
 * Key Security Decisions:
 * - Strict user-ownership for /users/{userId} collection.
 * - Tenant-level isolation for tenant-owned data.
 * - No user listing is allowed on /users collection.
 * - Authorization data (tenantId, userId, roles) is denormalized across collections to avoid complex queries in rules.
 * - Superadmin role can bypass authorization checks. To reduce `get()` calls, a dedicated `/roles_superadmin/{userId}` collection would be better than relying on the `isSuperadmin` field.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the ownerUid of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Checks if the authenticated user is a superadmin.
     * @securityWarning This function requires a `get()` call, which can impact performance. Consider using a dedicated `/roles_superadmin/{userId}` collection instead.
     */
    function isSuperAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperadmin == true;
    }

    /**
     * @description Allows the authenticated user to create their own user document, and read/write access to only their own user document.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create /users/user123
     * @allow (get, update, delete) User with UID 'user123' can get, update, or delete /users/user123
     * @deny (create) User with UID 'user123' cannot create /users/otherUser
     * @deny (get, update, delete) User with UID 'user123' cannot get, update, or delete /users/otherUser
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows read access to any user, but restricts write access to only the tenant owner.
     * @path /tenants/{tenantId}
     * @allow (get, list) Any user can read tenant information.
     * @allow (create) User with UID 'user123' can create /tenants/tenant123 if request.resource.data.ownerUid == 'user123'
     * @allow (update, delete) User with UID 'user123' can update or delete /tenants/tenant123 if resource.data.ownerUid == 'user123'
     * @deny (create) User with UID 'user123' cannot create /tenants/tenant123 if request.resource.data.ownerUid != 'user123'
     * @deny (update, delete) User with UID 'user123' cannot update or delete /tenants/tenant123 if resource.data.ownerUid != 'user123'
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /tenants/{tenantId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
    }

    /**
     * @description Allows read access to any user, but restricts write access to only the tenant owner.
     * @path /licenses/{licenseId}
     */
    match /licenses/{licenseId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to memberships.
     * @path /memberships/{membershipId}
     */
    match /memberships/{membershipId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read access to any user, but restricts write access to only the tenant owner.
     * @path /currencies/{currencyCode}
     */
    match /currencies/{currencyCode} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read access to any user, but restricts write access to only the tenant owner.
     * @path /fx_rates/{fxRateId}
     */
    match /fx_rates/{fxRateId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read access to any user, but restricts write access to only the tenant owner.
     * @path /categories/{categoryId}
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read access to any user, but restricts write access to only the tenant owner.
     * @path /subcategories/{subcategoryId}
     */
    match /subcategories/{subcategoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read access to any user, but restricts write access to only the tenant owner.
     * @path /entities/{entityId}
     */
    match /entities/{entityId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read access to any user, but restricts write access to only the tenant owner.
     * @path /expenses/{expenseId}
     */
    match /expenses/{expenseId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read access to any user, but restricts write access to only the tenant owner.
     * @path /budgets/{budgetId}
     */
    match /budgets/{budgetId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read access to any user, but restricts write access to only the tenant owner.
     * @path /alerts/{alertId}
     */
    match /alerts/{alertId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read access to any user, but restricts write access to only the tenant owner.
     * @path /receipts_raw/{receiptRawId}
     */
    match /receipts_raw/{receiptRawId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read access to any user, but restricts write access to only the tenant owner.
     * @path /receipts_fingerprints/{receiptFingerprintId}
     */
    match /receipts_fingerprints/{receiptFingerprintId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read access to any user, but restricts write access to only the tenant owner.
     * @path /audit_logs/{auditLogId}
     */
    match /audit_logs/{auditLogId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}