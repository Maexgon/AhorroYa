/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a multi-tenant security model for an expense tracking application ("Ahorro Ya").
 *
 * Core Philosophy:
 * This ruleset implements a strict, tenant-based access control model. Users can only access data
 * explicitly associated with a Tenant in which they have a defined Membership. The rules leverage
 * denormalization to avoid costly `get()` operations and ensure efficient authorization.  All write
 * operations are protected by authorization checks.
 *
 * Data Structure:
 * - /tenants/{tenantId}: Stores tenant information, including the owner.
 * - /licenses/{licenseId}: Stores license information for each tenant, secured by tenantId.
 * - /memberships/{membershipId}: Stores user-to-tenant membership information, including roles.
 * - /users/{userId}: Stores user profile data, accessible only by the user themselves.
 * - /currencies/{currencyCode}: Stores currency data. Public read-only.
 * - /fx_rates/{fxRateId}: Stores FX rates, secured by tenantId.
 * - /categories/{categoryId}: Stores expense categories, secured by tenantId.
 * - /subcategories/{subcategoryId}: Stores expense subcategories, secured by tenantId.
 * - /entities/{entityId}: Stores entities (businesses, banks), secured by tenantId.
 * - /expenses/{expenseId}: Stores expense records, secured by tenantId and userId.
 * - /budgets/{budgetId}: Stores budget data, secured by tenantId.
 * - /alerts/{alertId}: Stores alert notifications, secured by tenantId.
 * - /receipts_raw/{receiptRawId}: Stores raw receipt data, secured by tenantId and userId.
 * - /receipts_fingerprints/{receiptFingerprintId}: Stores receipt fingerprints, secured by tenantId.
 * - /audit_logs/{auditLogId}: Stores audit logs, secured by tenantId.
 *
 * Key Security Decisions:
 * - Strict tenant isolation: Users can only access resources within tenants they are members of.
 * - User-owned data: Users have full control over their own profile data in /users/{userId}.
 * - No public listing:  List operations are generally restricted to authenticated users and specific tenant contexts.
 *
 * Denormalization for Authorization:
 * The 'tenantId' field is included in most documents to enable efficient tenant-based access control. The 'ownerUid'
 * field is included in the 'tenants' collection. The 'userId' field is included in the 'expenses' and 'receipts_raw' collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @principle Verifies user authentication.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @principle Enforces path-based ownership.
     * @param {string} userId - The user ID to compare against request.auth.uid.
     * @returns {bool} - True if the user is signed in and the UIDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is signed in and the resource exists.
     * @principle Secures update and delete operations by verifying resource existence.
     * @param {string} userId - The user ID to compare against request.auth.uid.
     * @returns {bool} - True if the user is signed in, the UIDs match, and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is a member of the tenant.
     * @principle Enforces tenant-based access control.
     * @param {string} tenantId - The tenant ID to check against.
     * @returns {bool} - True if the user is a member of the tenant, false otherwise.
     */
    function isTenantMember(tenantId) {
        return get(/databases/$(database)/documents/memberships/$(request.auth.uid + "_" + tenantId)).data.uid == request.auth.uid;
    }

    /**
     * @description Checks if the user is the owner of the tenant.
     * @principle Enforces tenant ownership for administrative operations.
     * @param {string} tenantId - The tenant ID to check.
     * @returns {bool} - True if the user is the owner of the tenant, false otherwise.
     */
    function isTenantOwner(tenantId) {
      return get(/databases/$(database)/documents/tenants/$(tenantId)).data.ownerUid == request.auth.uid;
    }

    /**
     * @description Checks if the user is the owner of the tenant, based on existing resource.
     * @principle Enforces tenant ownership for administrative operations.
     * @param {string} tenantId - The tenant ID to check.
     * @returns {bool} - True if the user is the owner of the tenant, false otherwise.
     */
    function isExistingTenantOwner(tenantId) {
      return isTenantOwner(tenantId) && resource != null;
    }

    /**
     * @description Checks if the tenantId in the request matches the tenantId in the path.
     * @principle Enforces tenantId consistency on create operations.
     * @param {string} tenantId - The tenant ID from the path.
     * @returns {bool} - True if the tenant IDs match, false otherwise.
     */
    function isValidNewTenantId(tenantId) {
      return request.resource.data.tenantId == tenantId;
    }

    /**
     * @description Checks if the tenantId in the request remains immutable on update operations.
     * @principle Prevents modification of the tenantId field.
     * @param {string} tenantId - The tenant ID from the path.
     * @returns {bool} - True if the tenant IDs match, false otherwise.
     */
    function isTenantIdImmutable(tenantId) {
        return request.resource.data.tenantId == resource.data.tenantId;
    }

    /**
     * @description Checks if the user is a superadmin. This requires a `get()` call.
     * @principle Allows superadmins to bypass certain security restrictions. Use sparingly.
     * @returns {bool} - True if the user is a superadmin, false otherwise.
     */
    function isSuperadmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperadmin == true;
    }

    /**
     * @description Rules for the /tenants/{tenantId} collection.
     * @path /tenants/{tenantId}
     * @allow (create) If the user's auth UID matches the tenantId, allowing self-creation.
     * @deny (create) If the user's auth UID does not match the tenantId.
     * @allow (get) If the user is a member of the tenant.
     * @deny (get) If the user is not a member of the tenant.
     * @allow (update) If the user is the owner of the tenant and the tenant exists.
     * @deny (update) If the user is not the owner of the tenant or the tenant does not exist.
     * @allow (delete) If the user is the owner of the tenant and the tenant exists.
     * @deny (delete) If the user is not the owner of the tenant or the tenant does not exist.
     * @principle Enforces tenant ownership for writes, membership for reads, and self-creation for initial setup.
     */
    match /tenants/{tenantId} {
      allow get: if isTenantMember(tenantId) || isSuperadmin();
      allow list: if false;
      allow create: if isOwner(tenantId) && request.auth.uid == tenantId;
      allow update: if isTenantOwner(tenantId) || isSuperadmin();
      allow delete: if isTenantOwner(tenantId) || isSuperadmin();
    }

    /**
     * @description Rules for the /licenses/{licenseId} collection.
     * @path /licenses/{licenseId}
     * @allow (create) If the user is a member of the tenant associated with the license.
     * @deny (create) If the user is not a member of the tenant associated with the license.
     * @allow (get) If the user is a member of the tenant associated with the license.
     * @deny (get) If the user is not a member of the tenant associated with the license.
     * @allow (update) If the user is a member of the tenant associated with the license and tenantId remains immutable.
     * @deny (update) If the user is not a member of the tenant associated with the license or tenantId is changed.
     * @allow (delete) If the user is a member of the tenant associated with the license.
     * @deny (delete) If the user is not a member of the tenant associated with the license.
     * @principle Enforces tenant membership for access and ensures tenant ID consistency.
     */
    match /licenses/{licenseId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperadmin();
      allow list: if false;
      allow create: if isTenantMember(request.resource.data.tenantId) || isSuperadmin();
      allow update: if isTenantMember(resource.data.tenantId) && (resource.data.tenantId == request.resource.data.tenantId) || isSuperadmin();
      allow delete: if isTenantMember(resource.data.tenantId)  || isSuperadmin();
    }

    /**
     * @description Rules for the /memberships/{membershipId} collection.
     * @path /memberships/{membershipId}
     * @allow (create) If the user is a member of the tenant associated with the membership.
     * @deny (create) If the user is not a member of the tenant associated with the membership.
     * @allow (get) If the user is a member of the tenant associated with the membership OR is the owner of the membership.
     * @deny (get) If the user is not a member of the tenant associated with the membership.
     * @allow (update) If the user is a member of the tenant associated with the membership and tenantId remains immutable.
     * @deny (update) If the user is not a member of the tenant associated with the membership or tenantId is changed.
     * @allow (delete) If the user is a member of the tenant associated with the membership.
     * @deny (delete) If the user is not a member of the tenant associated with the membership.
     * @principle Enforces tenant membership for access and ensures tenant ID consistency.
     */
    match /memberships/{membershipId} {
      allow get: if (isTenantMember(resource.data.tenantId) || isOwner(resource.data.uid)) || isSuperadmin();
      allow list: if false;
      allow create: if isTenantMember(request.resource.data.tenantId) || isSuperadmin();
      allow update: if isTenantMember(resource.data.tenantId) && (resource.data.tenantId == request.resource.data.tenantId) || isSuperadmin();
      allow delete: if isTenantMember(resource.data.tenantId)  || isSuperadmin();
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) If the user's auth UID matches the userId.
     * @deny (create) If the user's auth UID does not match the userId.
     * @allow (get) If the user's auth UID matches the userId.
     * @deny (get) If the user's auth UID does not match the userId.
     * @allow (update) If the user's auth UID matches the userId.
     * @deny (update) If the user's auth UID does not match the userId.
     * @allow (delete) If the user's auth UID matches the userId.
     * @deny (delete) If the user's auth UID does not match the userId.
     * @principle Enforces user ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isSuperadmin();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isSuperadmin();
      allow delete: if isOwner(userId) || isSuperadmin();
    }

    /**
     * @description Rules for the /currencies/{currencyCode} collection.
     * @path /currencies/{currencyCode}
     * @allow (get, list): Public read access.
     * @deny (create, update, delete): No write access.
     * @principle Public read-only collection.
     */
    match /currencies/{currencyCode} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /fx_rates/{fxRateId} collection.
     * @path /fx_rates/{fxRateId}
     * @allow (create) If the user is a member of the tenant associated with the fxRate.
     * @deny (create) If the user is not a member of the tenant associated with the fxRate.
     * @allow (get) If the user is a member of the tenant associated with the fxRate.
     * @deny (get) If the user is not a member of the tenant associated with the fxRate.
     * @allow (update) If the user is a member of the tenant associated with the fxRate and tenantId remains immutable.
     * @deny (update) If the user is not a member of the tenant associated with the fxRate or tenantId is changed.
     * @allow (delete) If the user is a member of the tenant associated with the fxRate.
     * @deny (delete) If the user is not a member of the tenant associated with the fxRate.
     * @principle Enforces tenant membership for access and ensures tenant ID consistency.
     */
    match /fx_rates/{fxRateId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperadmin();
      allow list: if false;
      allow create: if isTenantMember(request.resource.data.tenantId) || isSuperadmin();
      allow update: if isTenantMember(resource.data.tenantId) && (resource.data.tenantId == request.resource.data.tenantId) || isSuperadmin();
      allow delete: if isTenantMember(resource.data.tenantId)  || isSuperadmin();
    }

    /**
     * @description Rules for the /categories/{categoryId} collection.
     * @path /categories/{categoryId}
     * @allow (create) If the user is a member of the tenant associated with the category.
     * @deny (create) If the user is not a member of the tenant associated with the category.
     * @allow (get) If the user is a member of the tenant associated with the category.
     * @deny (get) If the user is not a member of the tenant associated with the category.
     * @allow (update) If the user is a member of the tenant associated with the category and tenantId remains immutable.
     * @deny (update) If the user is not a member of the tenant associated with the category or tenantId is changed.
     * @allow (delete) If the user is a member of the tenant associated with the category.
     * @deny (delete) If the user is not a member of the tenant associated with the category.
     * @principle Enforces tenant membership for access and ensures tenant ID consistency.
     */
    match /categories/{categoryId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperadmin();
      allow list: if false;
      allow create: if isTenantMember(request.resource.data.tenantId) || isSuperadmin();
      allow update: if isTenantMember(resource.data.tenantId) && (resource.data.tenantId == request.resource.data.tenantId) || isSuperadmin();
      allow delete: if isTenantMember(resource.data.tenantId)  || isSuperadmin();
    }

    /**
     * @description Rules for the /subcategories/{subcategoryId} collection.
     * @path /subcategories/{subcategoryId}
     * @allow (create) If the user is a member of the tenant associated with the subcategory.
     * @deny (create) If the user is not a member of the tenant associated with the subcategory.
     * @allow (get) If the user is a member of the tenant associated with the subcategory.
     * @deny (get) If the user is not a member of the tenant associated with the subcategory.
     * @allow (update) If the user is a member of the tenant associated with the subcategory and tenantId remains immutable.
     * @deny (update) If the user is not a member of the tenant associated with the subcategory or tenantId is changed.
     * @allow (delete) If the user is a member of the tenant associated with the subcategory.
     * @deny (delete) If the user is not a member of the tenant associated with the subcategory.
     * @principle Enforces tenant membership for access and ensures tenant ID consistency.
     */
    match /subcategories/{subcategoryId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperadmin();
      allow list: if false;
      allow create: if isTenantMember(request.resource.data.tenantId) || isSuperadmin();
      allow update: if isTenantMember(resource.data.tenantId) && (resource.data.tenantId == request.resource.data.tenantId) || isSuperadmin();
      allow delete: if isTenantMember(resource.data.tenantId)  || isSuperadmin();
    }

    /**
     * @description Rules for the /entities/{entityId} collection.
     * @path /entities/{entityId}
     * @allow (create) If the user is a member of the tenant associated with the entity.
     * @deny (create) If the user is not a member of the tenant associated with the entity.
     * @allow (get) If the user is a member of the tenant associated with the entity.
     * @deny (get) If the user is not a member of the tenant associated with the entity.
     * @allow (update) If the user is a member of the tenant associated with the entity and tenantId remains immutable.
     * @deny (update) If the user is not a member of the tenant associated with the entity or tenantId is changed.
     * @allow (delete) If the user is a member of the tenant associated with the entity.
     * @deny (delete) If the user is not a member of the tenant associated with the entity.
     * @principle Enforces tenant membership for access and ensures tenant ID consistency.
     */
    match /entities/{entityId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperadmin();
      allow list: if false;
      allow create: if isTenantMember(request.resource.data.tenantId) || isSuperadmin();
      allow update: if isTenantMember(resource.data.tenantId) && (resource.data.tenantId == request.resource.data.tenantId) || isSuperadmin();
      allow delete: if isTenantMember(resource.data.tenantId)  || isSuperadmin();
    }

    /**
     * @description Rules for the /expenses/{expenseId} collection.
     * @path /expenses/{expenseId}
     * @allow (create) If the user is a member of the tenant and the userId matches the auth UID.
     * @deny (create) If the user is not a member of the tenant or the userId does not match the auth UID.
     * @allow (get) If the user is a member of the tenant and the userId matches the auth UID.
     * @deny (get) If the user is not a member of the tenant or the userId does not match the auth UID.
     * @allow (update) If the user is a member of the tenant, the userId matches the auth UID, and tenantId remains immutable.
     * @deny (update) If the user is not a member of the tenant, the userId does not match the auth UID, or tenantId is changed.
     * @allow (delete) If the user is a member of the tenant and the userId matches the auth UID.
     * @deny (delete) If the user is not a member of the tenant or the userId does not match the auth UID.
     * @principle Enforces tenant membership, user ownership, and tenant ID consistency.
     */
    match /expenses/{expenseId} {
      allow get: if isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId) || isSuperadmin();
      allow list: if false;
      allow create: if isTenantMember(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid || isSuperadmin();
      allow update: if isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId) && (resource.data.tenantId == request.resource.data.tenantId) || isSuperadmin();
      allow delete: if isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId) || isSuperadmin();
    }

    /**
     * @description Rules for the /budgets/{budgetId} collection.
     * @path /budgets/{budgetId}
     * @allow (create) If the user is a member of the tenant associated with the budget.
     * @deny (create) If the user is not a member of the tenant associated with the budget.
     * @allow (get) If the user is a member of the tenant associated with the budget.
     * @deny (get) If the user is not a member of the tenant associated with the budget.
     * @allow (update) If the user is a member of the tenant associated with the budget and tenantId remains immutable.
     * @deny (update) If the user is not a member of the tenant associated with the budget or tenantId is changed.
     * @allow (delete) If the user is a member of the tenant associated with the budget.
     * @deny (delete) If the user is not a member of the tenant associated with the budget.
     * @principle Enforces tenant membership for access and ensures tenant ID consistency.
     */
    match /budgets/{budgetId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperadmin();
      allow list: if false;
      allow create: if isTenantMember(request.resource.data.tenantId) || isSuperadmin();
      allow update: if isTenantMember(resource.data.tenantId) && (resource.data.tenantId == request.resource.data.tenantId) || isSuperadmin();
      allow delete: if isTenantMember(resource.data.tenantId)  || isSuperadmin();
    }

    /**
     * @description Rules for the /alerts/{alertId} collection.
     * @path /alerts/{alertId}
     * @allow (create) If the user is a member of the tenant associated with the alert.
     * @deny (create) If the user is not a member of the tenant associated with the alert.
     * @allow (get) If the user is a member of the tenant associated with the alert.
     * @deny (get) If the user is not a member of the tenant associated with the alert.
     * @allow (update) If the user is a member of the tenant associated with the alert and tenantId remains immutable.
     * @deny (update) If the user is not a member of the tenant associated with the alert or tenantId is changed.
     * @allow (delete) If the user is a member of the tenant associated with the alert.
     * @deny (delete) If the user is not a member of the tenant associated with the alert.
     * @principle Enforces tenant membership for access and ensures tenant ID consistency.
     */
    match /alerts/{alertId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperadmin();
      allow list: if false;
      allow create: if isTenantMember(request.resource.data.tenantId) || isSuperadmin();
      allow update: if isTenantMember(resource.data.tenantId) && (resource.data.tenantId == request.resource.data.tenantId) || isSuperadmin();
      allow delete: if isTenantMember(resource.data.tenantId)  || isSuperadmin();
    }

    /**
     * @description Rules for the /receipts_raw/{receiptRawId} collection.
     * @path /receipts_raw/{receiptRawId}
     * @allow (create) If the user is a member of the tenant and the userId matches the auth UID.
     * @deny (create) If the user is not a member of the tenant or the userId does not match the auth UID.
     * @allow (get) If the user is a member of the tenant and the userId matches the auth UID.
     * @deny (get) If the user is not a member of the tenant or the userId does not match the auth UID.
     * @allow (update) If the user is a member of the tenant, the userId matches the auth UID, and tenantId remains immutable.
     * @deny (update) If the user is not a member of the tenant, the userId does not match the auth UID, or tenantId is changed.
     * @allow (delete) If the user is a member of the tenant and the userId matches the auth UID.
     * @deny (delete) If the user is not a member of the tenant or the userId does not match the auth UID.
     * @principle Enforces tenant membership, user ownership, and tenant ID consistency.
     */
    match /receipts_raw/{receiptRawId} {
      allow get: if isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId) || isSuperadmin();
      allow list: if false;
      allow create: if isTenantMember(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid || isSuperadmin();
      allow update: if isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId) && (resource.data.tenantId == request.resource.data.tenantId) || isSuperadmin();
      allow delete: if isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId) || isSuperadmin();
    }

    /**
     * @description Rules for the /receipts_fingerprints/{receiptFingerprintId} collection.
     * @path /receipts_fingerprints/{receiptFingerprintId}
     * @allow (create) If the user is a member of the tenant associated with the fingerprint.
     * @deny (create) If the user is not a member of the tenant associated with the fingerprint.
     * @allow (get) If the user is a member of the tenant associated with the fingerprint.
     * @deny (get) If the user is not a member of the tenant associated with the fingerprint.
     * @allow (update) If the user is a member of the tenant associated with the fingerprint.
     * @deny (update) If the user is not a member of the tenant associated with the fingerprint.
     * @allow (delete) If the user is a member of the tenant associated with the fingerprint.
     * @deny (delete) If the user is not a member of the tenant associated with the fingerprint.
     * @principle Enforces tenant membership for access.
     */
    match /receipts_fingerprints/{receiptFingerprintId} {
      allow get: if isTenantMember(receiptFingerprintId.split("_")[0]) || isSuperadmin();
      allow list: if false;
      allow create: if isTenantMember(receiptFingerprintId.split("_")[0]) || isSuperadmin();
      allow update: if isTenantMember(receiptFingerprintId.split("_")[0]) || isSuperadmin();
      allow delete: if isTenantMember(receiptFingerprintId.split("_")[0]) || isSuperadmin();
    }

    /**
     * @description Rules for the /audit_logs/{auditLogId} collection.
     * @path /audit_logs/{auditLogId}
     * @allow (create) If the user is a member of the tenant associated with the audit log.
     * @deny (create) If the user is not a member of the tenant associated with the audit log.
     * @allow (get) If the user is a member of the tenant associated with the audit log.
     * @deny (get) If the user is not a member of the tenant associated with the audit log.
     * @allow (update) If the user is a member of the tenant associated with the audit log and tenantId remains immutable.
     * @deny (update) If the user is not a member of the tenant associated with the audit log or tenantId is changed.
     * @allow (delete) If the user is a member of the tenant associated with the audit log.
     * @deny (delete) If the user is not a member of the tenant associated with the audit log.
     * @principle Enforces tenant membership for access and ensures tenant ID consistency.
     */
    match /audit_logs/{auditLogId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperadmin();
      allow list: if false;
      allow create: if isTenantMember(request.resource.data.tenantId) || isSuperadmin();
      allow update: if isTenantMember(resource.data.tenantId) && (resource.data.tenantId == request.resource.data.tenantId) || isSuperadmin();
      allow delete: if isTenantMember(resource.data.tenantId)  || isSuperadmin();
    }
  }
}