/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a multi-tenant security model for the "Ahorro Ya" application,
 *              emphasizing authorization independence and structural segregation for robust security and efficient queries.
 *
 * Core Philosophy:
 *  - Strict user-ownership and tenant-isolation model. Users can only access data belonging to tenants
 *    where they are members, and they own their user profiles. Superadmins can bypass these restrictions.
 *
 * Data Structure:
 *  - /tenants/{tenantId}: Represents a tenant, owned by a specific user (ownerUid).
 *  - /licenses/{licenseId}: Represents licenses for tenants.
 *  - /memberships/{membershipId}: Represents user memberships within tenants, defining roles.
 *  - /users/{userId}: Represents user profiles, accessible only by the user themselves.
 *  - Other collections (e.g., /expenses, /categories): Tenant-owned data, with 'tenantId' for isolation.
 *
 * Key Security Decisions:
 *  - No public listing of any collections containing private user data.
 *  - The 'isSuperadmin' flag in the /users/{userId} document allows for bypassing tenant-level restrictions.
 *  - Data consistency checks are enforced on 'create' operations to ensure proper ownership.
 *  - All write operations require document existence checks to prevent accidental modifications.
 *
 * Denormalization for Authorization:
 *  - 'tenantId' is included in almost all documents to avoid costly 'get()' calls to the 'tenants' collection.
 *  - 'ownerUid' is denormalized in the `/tenants/{tenantId}` document to enable simpler ownership checks.
 *
 * Structural Segregation:
 *  - User profiles are stored separately in /users/{userId} to avoid mixing user-specific data with tenant data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Requires authentication for protected resources.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource based on the provided user ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces resource ownership based on user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Combines ownership check with resource existence for destructive operations.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is a superadmin.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Allows superadmins to bypass tenant-level restrictions.
     */
    function isSuperadmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperadmin == true;
    }

    /**
     * @description Rules for the /tenants collection.
     * @path /tenants/{tenantId}
     * @allow (create) User with UID matching tenantId in request.resource.data.ownerUid can create.
     * @allow (get) Any authenticated user can read tenant data.
     * @allow (update, delete) Only the owner (ownerUid) can modify.
     * @deny (create) User with non-matching UID attempts to create.
     * @principle Enforces tenant ownership and creation restrictions.
     */
    match /tenants/{tenantId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.ownerUid && request.resource.id == tenantId;
      allow update: if isExistingOwner(resource.data.ownerUid) || isSuperadmin();
      allow delete: if isExistingOwner(resource.data.ownerUid) || isSuperadmin();
    }

    /**
     * @description Rules for the /licenses collection.
     * @path /licenses/{licenseId}
     * @allow (create) Any authenticated user can create a license.
     * @allow (get, list) Any authenticated user can read license data.
     * @allow (update, delete) No one can update or delete a license (for now).
     * @deny (update, delete) Unauthenticated user tries to update/delete.
     * @principle Restricts license modification.
     */
    match /licenses/{licenseId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Rules for the /memberships collection.
     * @path /memberships/{membershipId}
     * @allow (create) Any authenticated user can create a membership.
     * @allow (get, list) Any authenticated user can read membership data.
     * @allow (update, delete) No one can update or delete a membership (for now).
     * @deny (update, delete) Unauthenticated user tries to update/delete.
     * @principle Restricts membership modification.
     */
    match /memberships/{membershipId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (create) User with UID matching userId can create their own profile.
     * @allow (get) Any authenticated user can read user data.
     * @allow (update, delete) Only the owner can modify.
     * @deny (create) User with non-matching UID attempts to create.
     * @principle Enforces user ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.id == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /currencies collection.
     * @path /currencies/{currencyCode}
     * @allow (get, list) Public read access for currency data.
     * @allow (create, update, delete) No one can create, update, or delete a currency (for now).
     * @deny (create, update, delete) Attempts to modify currency data.
     * @principle Provides public read access with restricted modification.
     */
    match /currencies/{currencyCode} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /fx_rates collection.
     * @path /fx_rates/{fxRateId}
     * @allow (create) Any authenticated user can create a fx_rate.
     * @allow (get, list) Any authenticated user can read fx_rate data.
     * @allow (update, delete) No one can update or delete a fx_rate (for now).
     * @deny (update, delete) Unauthenticated user tries to update/delete.
     * @principle Restricts fx_rate modification.
     */
    match /fx_rates/{fxRateId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Rules for the /categories collection.
     * @path /categories/{categoryId}
     * @allow (create) Any authenticated user can create a category.
     * @allow (get, list) Any authenticated user can read category data.
     * @allow (update, delete) No one can update or delete a category (for now).
     * @deny (update, delete) Unauthenticated user tries to update/delete.
     * @principle Restricts category modification.
     */
    match /categories/{categoryId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Rules for the /subcategories collection.
     * @path /subcategories/{subcategoryId}
     * @allow (create) Any authenticated user can create a subcategory.
     * @allow (get, list) Any authenticated user can read subcategory data.
     * @allow (update, delete) No one can update or delete a subcategory (for now).
     * @deny (update, delete) Unauthenticated user tries to update/delete.
     * @principle Restricts subcategory modification.
     */
    match /subcategories/{subcategoryId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Rules for the /entities collection.
     * @path /entities/{entityId}
     * @allow (create) Any authenticated user can create a entity.
     * @allow (get, list) Any authenticated user can read entity data.
     * @allow (update, delete) No one can update or delete a entity (for now).
     * @deny (update, delete) Unauthenticated user tries to update/delete.
     * @principle Restricts entity modification.
     */
    match /entities/{entityId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Rules for the /expenses collection.
     * @path /expenses/{expenseId}
     * @allow (create) Any authenticated user can create a expense.
     * @allow (get, list) Any authenticated user can read expense data.
     * @allow (update, delete) Only the owner can modify.
     * @deny (update, delete) Unauthenticated user tries to update/delete.
     * @principle Restricts expense modification.
     */
    match /expenses/{expenseId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isExistingOwner(resource.data.userId) || isSuperadmin();
      allow delete: if isExistingOwner(resource.data.userId) || isSuperadmin();
    }

    /**
     * @description Rules for the /incomes collection.
     * @path /incomes/{incomeId}
     * @allow (create) Any authenticated user can create a income.
     * @allow (get, list) Any authenticated user can read income data.
     * @allow (update, delete) Only the owner can modify.
     * @deny (update, delete) Unauthenticated user tries to update/delete.
     * @principle Restricts income modification.
     */
    match /incomes/{incomeId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isExistingOwner(resource.data.userId) || isSuperadmin();
      allow delete: if isExistingOwner(resource.data.userId) || isSuperadmin();
    }

    /**
     * @description Rules for the /budgets collection.
     * @path /budgets/{budgetId}
     * @allow (create) Any authenticated user can create a budget.
     * @allow (get, list) Any authenticated user can read budget data.
     * @allow (update, delete) No one can update or delete a budget (for now).
     * @deny (update, delete) Unauthenticated user tries to update/delete.
     * @principle Restricts budget modification.
     */
    match /budgets/{budgetId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Rules for the /alerts collection.
     * @path /alerts/{alertId}
     * @allow (create) Any authenticated user can create a alert.
     * @allow (get, list) Any authenticated user can read alert data.
     * @allow (update, delete) No one can update or delete a alert (for now).
     * @deny (update, delete) Unauthenticated user tries to update/delete.
     * @principle Restricts alert modification.
     */
    match /alerts/{alertId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Rules for the /receipts_raw collection.
     * @path /receipts_raw/{receiptRawId}
     * @allow (create) Any authenticated user can create a receipt_raw.
     * @allow (get, list) Any authenticated user can read receipt_raw data.
     * @allow (update, delete) Only the owner can modify.
     * @deny (update, delete) Unauthenticated user tries to update/delete.
     * @principle Restricts receipt_raw modification.
     */
    match /receipts_raw/{receiptRawId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isExistingOwner(resource.data.userId) || isSuperadmin();
      allow delete: if isExistingOwner(resource.data.userId) || isSuperadmin();
    }

    /**
     * @description Rules for the /receipts_fingerprints collection.
     * @path /receipts_fingerprints/{receiptFingerprintId}
     * @allow (create) Any authenticated user can create a receipt_fingerprint.
     * @allow (get, list) Any authenticated user can read receipt_fingerprint data.
     * @allow (update, delete) No one can update or delete a receipt_fingerprint (for now).
     * @deny (update, delete) Unauthenticated user tries to update/delete.
     * @principle Restricts receipt_fingerprint modification.
     */
    match /receipts_fingerprints/{receiptFingerprintId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Rules for the /audit_logs collection.
     * @path /audit_logs/{auditLogId}
     * @allow (create) Any authenticated user can create a audit_log.
     * @allow (get, list) Any authenticated user can read audit_log data.
     * @allow (update, delete) No one can update or delete a audit_log (for now).
     * @deny (update, delete) Unauthenticated user tries to update/delete.
     * @principle Restricts audit_log modification.
     */
    match /audit_logs/{auditLogId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Rules for the /reports collection.
     * @path /reports/{reportId}
     * @allow (create) Any authenticated user can create a report.
     * @allow (get, list) Any authenticated user can read report data.
     * @allow (update, delete) Only the owner can modify.
     * @deny (update, delete) Unauthenticated user tries to update/delete.
     * @principle Restricts report modification.
     */
    match /reports/{reportId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isExistingOwner(resource.data.userId) || isSuperadmin();
      allow delete: if isExistingOwner(resource.data.userId) || isSuperadmin();
    }
  }
}