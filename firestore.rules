/**
 * @fileoverview Firestore Security Rules for "Ahorro Ya," a multi-tenant expense tracking application.
 *
 * Core Philosophy: This ruleset enforces a strict multi-tenant data isolation model.
 *  Users can only access data explicitly associated with Tenants they are members of.
 *  Tenant ownership is validated for all write operations.
 *
 * Data Structure:
 *  - /tenants/{tenantId}: Stores tenant profiles, with 'ownerUid' indicating the owner.
 *  - /licenses/{licenseId}: Stores tenant licenses, linked to tenants via 'tenantId'.
 *  - /memberships/{membershipId}: Defines user roles within tenants ('owner', 'admin', 'member').
 *  - /users/{userId}: Stores user profiles. 'isSuperadmin' grants bypass privileges.
 *  - /{collection}/{documentId}: Most collections (expenses, categories, etc.) are tenant-specific,
 *    containing 'tenantId' for access control.
 *
 * Key Security Decisions:
 *  - No public data: all read operations require authentication and tenant membership validation.
 *  - Tenant listing is denied to prevent unauthorized discovery of tenants.
 *  - Superadmin role is supported, but requires a 'get()' call to verify.
 *  - Data consistency checks are performed to prevent orphaned or mis-linked resources.
 *
 * Denormalization for Authorization:
 *  - The 'tenantId' field is present in almost every document to allow for efficient tenant-based filtering.
 *  - The `memberships` collection stores the role of a user within a tenant, avoiding `get()` calls to determine roles.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Requires authentication for all protected resources.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces path-based ownership for user-specific data.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the tenant.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Checks tenant ownership for write access.
     */
    function isTenantOwner(tenantId) {
      return isSignedIn() && get(/databases/$(database)/documents/tenants/$(tenantId)).data.ownerUid == request.auth.uid;
    }

    /**
     * @description Checks if the user is a member of the tenant and the tenant exists.
     * @path N/A
     */
    function isTenantMember(tenantId) {
        return isSignedIn() && exists(/databases/$(database)/documents/memberships/$(tenantId)_$(request.auth.uid));
    }

    /**
     * @description Checks if the user is a superadmin.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Grants bypass privileges to superadmins.
     */
    function isSuperadmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperadmin == true;
    }

    /**
     * @description Checks if the user is the owner and if the resource exists.
     * @path N/A
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Prevents listing of tenants.
     * @path /tenants
     * @allow N/A
     * @deny N/A
     * @principle Avoids listing tenants.
     */
    match /tenants {
        allow list: if false;
    }

    /**
     * @description Manages access to Tenant documents.
     * @path /tenants/{tenantId}
     * @allow (get) Authenticated user can read tenant data.
     * @allow (create) Authenticated user can create a tenant if they are the owner.
     * @allow (update) Authenticated user can update a tenant if they are the owner.
     * @allow (delete) Authenticated user can delete a tenant if they are the owner.
     * @deny (create) Non-authenticated user cannot create a tenant.
     * @deny (update) Non-authenticated user cannot update a tenant.
     * @deny (delete) Non-authenticated user cannot delete a tenant.
     * @principle Enforces tenant ownership for writes, requires auth for reads.
     */
    match /tenants/{tenantId} {
      allow get: if isSignedIn() && isTenantMember(tenantId);
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid && request.resource.data.id == tenantId;
      allow update: if isSignedIn() && isTenantOwner(tenantId);
      allow delete: if isSignedIn() && isTenantOwner(tenantId);
      allow list: if false;
    }

    /**
     * @description Manages access to License documents.
     * @path /licenses/{licenseId}
     * @allow (get) Authenticated user can read license data.
     * @allow (create) Authenticated user can create a license if they are the tenant owner.
     * @allow (update) Authenticated user can update a license if they are the tenant owner.
     * @allow (delete) Authenticated user can delete a license if they are the tenant owner.
     * @deny (create) Non-authenticated user cannot create a license.
     * @deny (update) Non-authenticated user cannot update a license.
     * @deny (delete) Non-authenticated user cannot delete a license.
     * @principle Enforces tenant ownership for writes, requires auth for reads.
     */
    match /licenses/{licenseId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow list: if false;
    }

    /**
     * @description Manages access to Membership documents.
     * @path /memberships/{membershipId}
     * @allow (get) Authenticated user can read membership data.
     * @allow (create) Authenticated user can create a membership if they are the tenant owner.
     * @allow (update) Authenticated user can update a membership if they are the tenant owner.
     * @allow (delete) Authenticated user can delete a membership if they are the tenant owner.
     * @deny (create) Non-authenticated user cannot create a membership.
     * @deny (update) Non-authenticated user cannot update a membership.
     * @deny (delete) Non-authenticated user cannot delete a membership.
     * @principle Enforces tenant ownership for writes, requires auth for reads.
     */
    match /memberships/{membershipId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow list: if false;
    }

    /**
     * @description Manages access to User documents.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read their own user data.
     * @allow (create) Authenticated user can create their own user data.
     * @allow (update) Authenticated user can update their own user data.
     * @allow (delete) Authenticated user can delete their own user data.
     * @deny (create) Non-authenticated user cannot create user data.
     * @deny (update) Non-authenticated user cannot update user data.
     * @deny (delete) Non-authenticated user cannot delete user data.
     * @principle Enforces user ownership for all operations on user data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Manages access to Currency documents.
     * @path /currencies/{currencyCode}
     * @allow (get) Authenticated user can read currency data.
     * @allow (create) Not allowed.
     * @allow (update) Not allowed.
     * @allow (delete) Not allowed.
     * @deny (get) Non-authenticated user cannot read currency data.
     * @principle Requires authentication for reads, denies all writes.
     */
    match /currencies/{currencyCode} {
      allow get: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
      allow list: if false;
    }

    /**
     * @description Manages access to FxRate documents.
     * @path /fx_rates/{fxRateId}
     * @allow (get) Authenticated user can read fx_rate data.
     * @allow (create) Authenticated user can create fx_rate data if they are a tenant member.
     * @allow (update) Authenticated user can update fx_rate data if they are a tenant member.
     * @allow (delete) Authenticated user can delete fx_rate data if they are a tenant member.
     * @deny (get) Non-authenticated user cannot read fx_rate data.
     * @deny (create) Non-authenticated user cannot create fx_rate data if they are not a tenant member.
     * @deny (update) Non-authenticated user cannot update fx_rate data if they are not a tenant member.
     * @deny (delete) Non-authenticated user cannot delete fx_rate data if they are not a tenant member.
     * @principle Requires authentication for reads, tenant membership for writes.
     */
    match /fx_rates/{fxRateId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if false;
    }

    /**
     * @description Manages access to Category documents.
     * @path /categories/{categoryId}
     * @allow (get) Authenticated user can read category data.
     * @allow (create) Authenticated user can create category data if they are a tenant member.
     * @allow (update) Authenticated user can update category data if they are a tenant member.
     * @allow (delete) Authenticated user can delete category data if they are a tenant member.
     * @deny (get) Non-authenticated user cannot read category data.
     * @deny (create) Non-authenticated user cannot create category data if they are not a tenant member.
     * @deny (update) Non-authenticated user cannot update category data if they are not a tenant member.
     * @deny (delete) Non-authenticated user cannot delete category data if they are not a tenant member.
     * @principle Requires authentication for reads, tenant membership for writes.
     */
    match /categories/{categoryId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if false;
    }

    /**
     * @description Manages access to Subcategory documents.
     * @path /subcategories/{subcategoryId}
     * @allow (get) Authenticated user can read subcategory data.
     * @allow (create) Authenticated user can create subcategory data if they are a tenant member.
     * @allow (update) Authenticated user can update subcategory data if they are a tenant member.
     * @allow (delete) Authenticated user can delete subcategory data if they are a tenant member.
     * @deny (get) Non-authenticated user cannot read subcategory data.
     * @deny (create) Non-authenticated user cannot create subcategory data if they are not a tenant member.
     * @deny (update) Non-authenticated user cannot update subcategory data if they are not a tenant member.
     * @deny (delete) Non-authenticated user cannot delete subcategory data if they are not a tenant member.
     * @principle Requires authentication for reads, tenant membership for writes.
     */
    match /subcategories/{subcategoryId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if false;
    }

    /**
     * @description Manages access to Entity documents.
     * @path /entities/{entityId}
     * @allow (get) Authenticated user can read entity data.
     * @allow (create) Authenticated user can create entity data if they are a tenant member.
     * @allow (update) Authenticated user can update entity data if they are a tenant member.
     * @allow (delete) Authenticated user can delete entity data if they are a tenant member.
     * @deny (get) Non-authenticated user cannot read entity data.
     * @deny (create) Non-authenticated user cannot create entity data if they are not a tenant member.
     * @deny (update) Non-authenticated user cannot update entity data if they are not a tenant member.
     * @deny (delete) Non-authenticated user cannot delete entity data if they are not a tenant member.
     * @principle Requires authentication for reads, tenant membership for writes.
     */
    match /entities/{entityId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if false;
    }

    /**
     * @description Manages access to Expense documents.
     * @path /expenses/{expenseId}
     * @allow (get) Authenticated user can read expense data.
     * @allow (create) Authenticated user can create expense data if they are a tenant member.
     * @allow (update) Authenticated user can update expense data if they are a tenant member.
     * @allow (delete) Authenticated user can delete expense data if they are a tenant member.
     * @deny (get) Non-authenticated user cannot read expense data.
     * @deny (create) Non-authenticated user cannot create expense data if they are not a tenant member.
     * @deny (update) Non-authenticated user cannot update expense data if they are not a tenant member.
     * @deny (delete) Non-authenticated user cannot delete expense data if they are not a tenant member.
     * @principle Requires authentication for reads, tenant membership for writes.
     */
    match /expenses/{expenseId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if false;
    }

    /**
     * @description Manages access to Budget documents.
     * @path /budgets/{budgetId}
     * @allow (get) Authenticated user can read budget data.
     * @allow (create) Authenticated user can create budget data if they are a tenant member.
     * @allow (update) Authenticated user can update budget data if they are a tenant member.
     * @allow (delete) Authenticated user can delete budget data if they are a tenant member.
     * @deny (get) Non-authenticated user cannot read budget data.
     * @deny (create) Non-authenticated user cannot create budget data if they are not a tenant member.
     * @deny (update) Non-authenticated user cannot update budget data if they are not a tenant member.
     * @deny (delete) Non-authenticated user cannot delete budget data if they are not a tenant member.
     * @principle Requires authentication for reads, tenant membership for writes.
     */
    match /budgets/{budgetId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if false;
    }

    /**
     * @description Manages access to Alert documents.
     * @path /alerts/{alertId}
     * @allow (get) Authenticated user can read alert data.
     * @allow (create) Authenticated user can create alert data if they are a tenant member.
     * @allow (update) Authenticated user can update alert data if they are a tenant member.
     * @allow (delete) Authenticated user can delete alert data if they are a tenant member.
     * @deny (get) Non-authenticated user cannot read alert data.
     * @deny (create) Non-authenticated user cannot create alert data if they are not a tenant member.
     * @deny (update) Non-authenticated user cannot update alert data if they are not a tenant member.
     * @deny (delete) Non-authenticated user cannot delete alert data if they are not a tenant member.
     * @principle Requires authentication for reads, tenant membership for writes.
     */
    match /alerts/{alertId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if false;
    }

    /**
     * @description Manages access to ReceiptRaw documents.
     * @path /receipts_raw/{receiptRawId}
     * @allow (get) Authenticated user can read receipt_raw data.
     * @allow (create) Authenticated user can create receipt_raw data if they are a tenant member.
     * @allow (update) Authenticated user can update receipt_raw data if they are a tenant member.
     * @allow (delete) Authenticated user can delete receipt_raw data if they are a tenant member.
     * @deny (get) Non-authenticated user cannot read receipt_raw data.
     * @deny (create) Non-authenticated user cannot create receipt_raw data if they are not a tenant member.
     * @deny (update) Non-authenticated user cannot update receipt_raw data if they are not a tenant member.
     * @deny (delete) Non-authenticated user cannot delete receipt_raw data if they are not a tenant member.
     * @principle Requires authentication for reads, tenant membership for writes.
     */
    match /receipts_raw/{receiptRawId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if false;
    }

    /**
     * @description Manages access to ReceiptFingerprint documents.
     * @path /receipts_fingerprints/{receiptFingerprintId}
     * @allow (get) Authenticated user can read receipt_fingerprint data.
     * @allow (create) Authenticated user can create receipt_fingerprint data.
     * @allow (update) Authenticated user can update receipt_fingerprint data.
     * @allow (delete) Authenticated user can delete receipt_fingerprint data.
     * @deny (get) Non-authenticated user cannot read receipt_fingerprint data.
     * @principle Requires authentication for reads, allows writes to all authenticated users.
     */
    match /receipts_fingerprints/{receiptFingerprintId} {
      allow get: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
      allow list: if false;
    }

    /**
     * @description Manages access to AuditLog documents.
     * @path /audit_logs/{auditLogId}
     * @allow (get) Authenticated user can read audit_log data.
     * @allow (create) Authenticated user can create audit_log data if they are a tenant member.
     * @allow (update) Authenticated user can update audit_log data if they are a tenant member.
     * @allow (delete) Authenticated user can delete audit_log data if they are a tenant member.
     * @deny (get) Non-authenticated user cannot read audit_log data.
     * @deny (create) Non-authenticated user cannot create audit_log data if they are not a tenant member.
     * @deny (update) Non-authenticated user cannot update audit_log data if they are not a tenant member.
     * @deny (delete) Non-authenticated user cannot delete audit_log data if they are not a tenant member.
     * @principle Requires authentication for reads, tenant membership for writes.
     */
    match /audit_logs/{auditLogId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if false;
    }
  }
}