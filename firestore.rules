/**
 * @fileoverview Firestore Security Rules for the Ahorro Ya application.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-tenant security model where users can only access data within tenants they are members of.
 * Ownership is enforced for user-specific data.
 *
 * Data Structure:
 * - /tenants/{tenantId}: Stores tenant information, with 'ownerUid' indicating the tenant owner.
 * - /licenses/{licenseId}: Stores license information, associated with a 'tenantId'.
 * - /memberships/{membershipId}: Stores user memberships in tenants, including 'tenantId', 'uid', and 'role'.
 * - /users/{userId}: Stores user profile data, accessible only by the user themselves.
 * - /currencies/{currencyCode}: Stores currency data.
 * - /fx_rates/{fxRateId}: Stores foreign exchange rates, associated with a 'tenantId'.
 * - /categories/{categoryId}: Stores expense categories, associated with a 'tenantId'.
 * - /subcategories/{subcategoryId}: Stores expense subcategories, associated with a 'tenantId'.
 * - /entities/{entityId}: Stores business or bank entities, associated with a 'tenantId'.
 * - /expenses/{expenseId}: Stores expense records, associated with a 'tenantId' and 'userId'.
 * - /budgets/{budgetId}: Stores monthly budget data, associated with a 'tenantId'.
 * - /alerts/{alertId}: Stores alert notifications, associated with a 'tenantId'.
 * - /receipts_raw/{receiptRawId}: Stores raw OCR data from receipts, associated with a 'tenantId' and 'userId'.
 * - /receipts_fingerprints/{receiptFingerprintId}: Stores fingerprints for deduplicating receipts.
 * - /audit_logs/{auditLogId}: Stores audit log entries, associated with a 'tenantId'.
 *
 * Key Security Decisions:
 * - Strict user-ownership model for /users/{userId}.
 * - Tenant-based access control for all other collections, enforced by the 'tenantId' field.
 * - No public listing of any tenant-specific data.
 * - Superadmin privileges are NOT currently implemented in these rules.
 *
 * Denormalization for Authorization:
 * - The 'tenantId' field is present in almost every collection to avoid complex queries.
 * - The 'ownerUid' field is present in the 'tenants' collection to easily identify the tenant owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is a member of the tenant associated with the resource.
     */
    function isTenantMember(tenantId) {
        return isSignedIn() && exists(/databases/$(database)/documents/memberships/$(request.auth.uid + '_' + tenantId));
    }

    /**
     * @description Checks if the authenticated user is the owner of the tenant associated with the resource.
     */
    function isTenantOwner(ownerUid) {
      return isSignedIn() && request.auth.uid == ownerUid;
    }

    /**
     * @description Checks if the authenticated user is the owner of the tenant associated with the resource.
     */
    function isExistingTenantOwner(ownerUid) {
      return isTenantOwner(ownerUid) && resource != null;
    }

    /**
     * @description Enforces access control for tenants.
     * @path /tenants/{tenantId}
     * @allow (create) User with UID 'user123' creates a new tenant document where request.resource.data.ownerUid == 'user123'.
     * @allow (get) User with UID 'user123' gets a tenant document if they are the owner.
     * @deny (create) User with UID 'user456' tries to create a tenant document where request.resource.data.ownerUid == 'user123'.
     * @deny (update) User with UID 'user456' tries to update a tenant document they don't own.
     * @principle Enforces document ownership for writes; allows owner-only reads and writes after creation.
     */
    match /tenants/{tenantId} {
      allow get: if isTenantOwner(resource.data.ownerUid);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update: if isExistingTenantOwner(resource.data.ownerUid);
      allow delete: if isExistingTenantOwner(resource.data.ownerUid);
    }

     /**
      * @description Enforces access control for licenses.
      * Licenses are publicly readable, but creation, updates, and deletion are denied.
      * @path /licenses/{licenseId}
      * @allow (get) Any user can get a license document.
      * @deny (create) Any user tries to create a license document.
      * @deny (update) Any user tries to update a license document.
      * @deny (delete) Any user tries to delete a license document.
      * @principle Public read access with no write access.
      */
    match /licenses/{licenseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces access control for memberships.
     * @path /memberships/{membershipId}
     * @allow (create) User with UID 'user123' creates a membership document where request.resource.data.uid == 'user123'.
     * @allow (get) User with UID 'user123' gets a membership document if they are the member.
     * @deny (create) User with UID 'user456' tries to create a membership document for 'user123'.
     * @deny (update) User with UID 'user456' tries to update a membership document they don't own.
     * @principle Enforces document ownership for writes; allows owner-only reads and writes after creation.
     */
    match /memberships/{membershipId} {
      allow get: if isSignedIn() && resource.data.uid == request.auth.uid;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow update: if isSignedIn() && resource.data.uid == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.uid == request.auth.uid && resource != null;
    }

    /**
     * @description Enforces access control for users.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates a user document for themselves.
     * @allow (get) User with UID 'user123' gets their own user document.
     * @deny (create) User with UID 'user456' tries to create a user document for 'user123'.
     * @deny (update) User with UID 'user456' tries to update the user document for 'user123'.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for currencies.
     * Currencies are publicly readable, but creation, updates, and deletion are denied.
     * @path /currencies/{currencyCode}
     * @allow (get) Any user can get a currency document.
     * @deny (create) Any user tries to create a currency document.
     * @deny (update) Any user tries to update a currency document.
     * @deny (delete) Any user tries to delete a currency document.
     * @principle Public read access with no write access.
     */
    match /currencies/{currencyCode} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces access control for fx_rates.
     * @path /fx_rates/{fxRateId}
     * @allow (create) User is member of tenant, creates a fx_rate.
     * @allow (get) User is member of tenant, gets a fx_rate.
     * @deny (create) User not member of tenant, tries to create a fx_rate.
     * @deny (update) User not member of tenant, tries to update a fx_rate.
     * @principle Enforces tenant membership for reads and writes.
     */
    match /fx_rates/{fxRateId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if false;
      allow create: if isTenantMember(request.resource.data.tenantId);
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantMember(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Enforces access control for categories.
     * @path /categories/{categoryId}
     * @allow (create) User is member of tenant, creates a category.
     * @allow (get) User is member of tenant, gets a category.
     * @deny (create) User not member of tenant, tries to create a category.
     * @deny (update) User not member of tenant, tries to update a category.
     * @principle Enforces tenant membership for reads and writes.
     */
    match /categories/{categoryId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if false;
      allow create: if isTenantMember(request.resource.data.tenantId);
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantMember(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Enforces access control for subcategories.
     * @path /subcategories/{subcategoryId}
     * @allow (create) User is member of tenant, creates a subcategory.
     * @allow (get) User is member of tenant, gets a subcategory.
     * @deny (create) User not member of tenant, tries to create a subcategory.
     * @deny (update) User not member of tenant, tries to update a subcategory.
     * @principle Enforces tenant membership for reads and writes.
     */
    match /subcategories/{subcategoryId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if false;
      allow create: if isTenantMember(request.resource.data.tenantId);
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantMember(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Enforces access control for entities.
     * @path /entities/{entityId}
     * @allow (create) User is member of tenant, creates a entity.
     * @allow (get) User is member of tenant, gets a entity.
     * @deny (create) User not member of tenant, tries to create a entity.
     * @deny (update) User not member of tenant, tries to update a entity.
     * @principle Enforces tenant membership for reads and writes.
     */
    match /entities/{entityId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if false;
      allow create: if isTenantMember(request.resource.data.tenantId);
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantMember(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Enforces access control for expenses.
     * @path /expenses/{expenseId}
     * @allow (create) User is member of tenant, creates a expense.
     * @allow (get) User is member of tenant, gets a expense.
     * @deny (create) User not member of tenant, tries to create a expense.
     * @deny (update) User not member of tenant, tries to update a expense.
     * @principle Enforces tenant membership for reads and writes.
     */
    match /expenses/{expenseId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if false;
      allow create: if isTenantMember(request.resource.data.tenantId);
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantMember(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Enforces access control for budgets.
     * @path /budgets/{budgetId}
     * @allow (create) User is member of tenant, creates a budget.
     * @allow (get) User is member of tenant, gets a budget.
     * @deny (create) User not member of tenant, tries to create a budget.
     * @deny (update) User not member of tenant, tries to update a budget.
     * @principle Enforces tenant membership for reads and writes.
     */
    match /budgets/{budgetId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if false;
      allow create: if isTenantMember(request.resource.data.tenantId);
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantMember(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Enforces access control for alerts.
     * @path /alerts/{alertId}
     * @allow (create) User is member of tenant, creates a alert.
     * @allow (get) User is member of tenant, gets a alert.
     * @deny (create) User not member of tenant, tries to create a alert.
     * @deny (update) User not member of tenant, tries to update a alert.
     * @principle Enforces tenant membership for reads and writes.
     */
    match /alerts/{alertId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if false;
      allow create: if isTenantMember(request.resource.data.tenantId);
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantMember(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Enforces access control for receipts_raw.
     * @path /receipts_raw/{receiptRawId}
     * @allow (create) User is member of tenant, creates a receipts_raw.
     * @allow (get) User is member of tenant, gets a receipts_raw.
     * @deny (create) User not member of tenant, tries to create a receipts_raw.
     * @deny (update) User not member of tenant, tries to update a receipts_raw.
     * @principle Enforces tenant membership for reads and writes.
     */
    match /receipts_raw/{receiptRawId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if false;
      allow create: if isTenantMember(request.resource.data.tenantId);
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantMember(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Enforces access control for receipts_fingerprints.
     * @path /receipts_fingerprints/{receiptFingerprintId}
     * @allow (create) User is member of tenant, creates a receipts_fingerprints.
     * @allow (get) User is member of tenant, gets a receipts_fingerprints.
     * @deny (create) User not member of tenant, tries to create a receipts_fingerprints.
     * @deny (update) User not member of tenant, tries to update a receipts_fingerprints.
     * @principle Enforces tenant membership for reads and writes.
     */
    match /receipts_fingerprints/{receiptFingerprintId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if false;
      allow create: if isTenantMember(request.resource.data.tenantId);
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantMember(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Enforces access control for audit_logs.
     * @path /audit_logs/{auditLogId}
     * @allow (create) User is member of tenant, creates a audit_logs.
     * @allow (get) User is member of tenant, gets a audit_logs.
     * @deny (create) User not member of tenant, tries to create a audit_logs.
     * @deny (update) User not member of tenant, tries to update a audit_logs.
     * @principle Enforces tenant membership for reads and writes.
     */
    match /audit_logs/{auditLogId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if false;
      allow create: if isTenantMember(request.resource.data.tenantId);
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantMember(resource.data.tenantId) && resource != null;
    }
  }
}