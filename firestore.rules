/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a multi-tenant security model for the "Ahorro Ya" application,
 *              emphasizing tenant-level isolation and user-based access control.
 *
 * Data Structure:
 * - /tenants/{tenantId}: Stores tenant information; access is restricted to the tenant owner.
 * - /licenses/{licenseId}: Stores license information for a tenant; access is restricted based on tenant membership.
 * - /memberships/{membershipId}: Stores user memberships in tenants; accessible only to members of the tenant.
 * - /users/{userId}: Stores user profiles; access is limited to the user themselves (owner-only).
 * - /currencies/{currencyCode}: Stores currency data; publicly readable.
 * - /fx_rates/{fxRateId}: Stores FX rates, tenant specific; access is restricted based on tenant membership.
 * - /categories/{categoryId}: Stores expense categories; access is restricted based on tenant membership.
 * - /subcategories/{subcategoryId}: Stores expense subcategories; access is restricted based on tenant membership.
 * - /entities/{entityId}: Stores business/bank entities; access is restricted based on tenant membership.
 * - /expenses/{expenseId}: Stores expense records; access is restricted based on tenant membership and user ownership.
 * - /incomes/{incomeId}: Stores income records; access is restricted based on tenant membership and user ownership.
 * - /budgets/{budgetId}: Stores budget data; access is restricted based on tenant membership.
 * - /alerts/{alertId}: Stores alert notifications; access is restricted based on tenant membership.
 * - /receipts_raw/{receiptRawId}: Stores raw receipt data; access is restricted based on tenant membership and user ownership.
 * - /receipts_fingerprints/{receiptFingerprintId}: Stores receipt fingerprints; access is unrestricted.
 * - /audit_logs/{auditLogId}: Stores audit logs; access is restricted based on tenant membership.
 * - /reports/{reportId}: Stores financial reports; access is restricted based on tenant membership and user ownership.
 *
 * Key Security Decisions:
 * - Strict tenant-level isolation: Most data access is scoped to the tenant.
 * - User-ownership model: Users can only modify data they own within a tenant.
 * - Public read access for currencies.
 * - No public listing of user documents.
 *
 * Denormalization for Authorization:
 * - 'tenantId' is included in most documents to avoid costly `get()` calls and enforce tenant-level access control.
 * - 'ownerUid' is included in the `tenants` collection to easily determine the owner of a tenant.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the resource's ownerUid and that the resource exists.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is the existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is a member of the tenant based on the tenantId in the resource data.
     * @returns {boolean} True if the user is a member of the tenant, false otherwise.
     */
    function isTenantMember(tenantId) {
        return isSignedIn() && get(/databases/$(database)/documents/memberships/$(tenantId + "_" + request.auth.uid)).data.uid == request.auth.uid;
    }

    /**
     * @description Checks if the authenticated user is the owner of the tenant.
     * @returns {boolean} True if the user is the owner of the tenant, false otherwise.
     */
    function isTenantOwner(tenantId) {
        return isSignedIn() && get(/databases/$(database)/documents/tenants/$(tenantId)).data.ownerUid == request.auth.uid;
    }
    
    /**
     * @description Rules for the /tenants collection.
     * @path /tenants/{tenantId}
     * @allow (create) - Authenticated user can create a tenant if the `ownerUid` matches their `uid`.
     * @allow (get) - Authenticated user can get a tenant if the `ownerUid` matches their `uid`.
     * @deny (create) - Unauthenticated user cannot create a tenant.
     * @deny (update) - Authenticated user cannot update if they are not the owner of the tenant.
     * @principle Enforces document ownership for writes.
     */
    match /tenants/{tenantId} {
      allow get: if isTenantOwner(tenantId);
      allow list: if false; // No client listing of tenants

      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid && request.resource.data.id == tenantId;
      allow update: if isExistingOwner(resource.data.ownerUid) && resource.data.ownerUid == request.resource.data.ownerUid;
      allow delete: if isExistingOwner(resource.data.ownerUid);
    }

    /**
     * @description Rules for the /licenses collection.
     * @path /licenses/{licenseId}
     * @allow (create) - Authenticated user can create a license if they are a member of the tenant.
     * @allow (get) - Authenticated user can get a license if they are a member of the tenant.
     * @deny (create) - Unauthenticated user cannot create a license.
     * @deny (update) - Authenticated user cannot update if they are not a member of the tenant.
     * @principle Restricts access to a tenant's data.
     */
    match /licenses/{licenseId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if isTenantMember(resource.data.tenantId);
      allow create: if isTenantMember(request.resource.data.tenantId) && request.resource.data.id == licenseId;
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantOwner(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Rules for the /memberships collection.
     * @path /memberships/{membershipId}
     * @allow (create) - Authenticated user can create a membership if they are the owner of the tenant.
     * @allow (get) - Authenticated user can get a membership if they are the owner of the tenant.
     * @deny (create) - Unauthenticated user cannot create a membership.
     * @deny (update) - Authenticated user cannot update if they are not the owner of the tenant.
     * @principle Restricts access to tenant membership data.
     */
    match /memberships/{membershipId} {
      allow get: if isTenantOwner(resource.data.tenantId);
      allow list: if isTenantOwner(resource.data.tenantId);
      allow create: if isTenantOwner(request.resource.data.tenantId) && request.resource.data.tenantId + "_" + request.resource.data.uid == membershipId;
      allow update: if isTenantOwner(resource.data.tenantId) && resource != null;
      allow delete: if isTenantOwner(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own user document.
     * @allow (get) - Authenticated user can get their own user document.
     * @deny (create) - Unauthenticated user cannot create a user document.
     * @deny (update) - Authenticated user cannot update if they are not the owner.
     * @principle Enforces user-ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // No client listing of users

      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && resource.data.uid == request.resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /currencies collection.
     * @path /currencies/{currencyCode}
     * @allow (get) - Public read access for currencies.
     * @deny (create) - No public writes allowed.
     * @principle Public read access for currency data.
     */
    match /currencies/{currencyCode} {
      allow get, list: if true;
      allow create, update, delete: if false; // No public writes allowed
    }

    /**
     * @description Rules for the /fx_rates collection.
     * @path /fx_rates/{fxRateId}
     * @allow (create) - Authenticated user can create a fx_rate if they are a member of the tenant.
     * @allow (get) - Authenticated user can get a fx_rate if they are a member of the tenant.
     * @deny (create) - Unauthenticated user cannot create a fx_rate.
     * @deny (update) - Authenticated user cannot update if they are not a member of the tenant.
     * @principle Restricts access to a tenant's fx_rate data.
     */
    match /fx_rates/{fxRateId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if isTenantMember(resource.data.tenantId);
      allow create: if isTenantMember(request.resource.data.tenantId);
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantOwner(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Rules for the /categories collection.
     * @path /categories/{categoryId}
     * @allow (create) - Authenticated user can create a category if they are a member of the tenant.
     * @allow (get) - Authenticated user can get a category if they are a member of the tenant.
     * @deny (create) - Unauthenticated user cannot create a category.
     * @deny (update) - Authenticated user cannot update if they are not a member of the tenant.
     * @principle Restricts access to a tenant's category data.
     */
    match /categories/{categoryId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if isTenantMember(resource.data.tenantId);
      allow create: if isTenantMember(request.resource.data.tenantId) && request.resource.data.id == categoryId;
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantOwner(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Rules for the /subcategories collection.
     * @path /subcategories/{subcategoryId}
     * @allow (create) - Authenticated user can create a subcategory if they are a member of the tenant.
     * @allow (get) - Authenticated user can get a subcategory if they are a member of the tenant.
     * @deny (create) - Unauthenticated user cannot create a subcategory.
     * @deny (update) - Authenticated user cannot update if they are not a member of the tenant.
     * @principle Restricts access to a tenant's subcategory data.
     */
    match /subcategories/{subcategoryId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if isTenantMember(resource.data.tenantId);
      allow create: if isTenantMember(request.resource.data.tenantId) && request.resource.data.id == subcategoryId;
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantOwner(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Rules for the /entities collection.
     * @path /entities/{entityId}
     * @allow (create) - Authenticated user can create an entity if they are a member of the tenant.
     * @allow (get) - Authenticated user can get an entity if they are a member of the tenant.
     * @deny (create) - Unauthenticated user cannot create an entity.
     * @deny (update) - Authenticated user cannot update if they are not a member of the tenant.
     * @principle Restricts access to a tenant's entity data.
     */
    match /entities/{entityId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if isTenantMember(resource.data.tenantId);
      allow create: if isTenantMember(request.resource.data.tenantId) && request.resource.data.id == entityId;
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantOwner(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Rules for the /expenses collection.
     * @path /expenses/{expenseId}
     * @allow (create) - Authenticated user can create an expense if they are a member of the tenant and the userId matches their uid.
     * @allow (get) - Authenticated user can get an expense if they are a member of the tenant and the userId matches their uid.
     * @deny (create) - Unauthenticated user cannot create an expense.
     * @deny (update) - Authenticated user cannot update if they are not a member of the tenant or the owner.
     * @principle Restricts access to a tenant's expense data.
     */
    match /expenses/{expenseId} {
      allow get: if isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId);
      allow list: if isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId);
      allow create: if isTenantMember(request.resource.data.tenantId) && isOwner(request.resource.data.userId) && request.resource.data.id == expenseId;
      allow update: if isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId) && resource != null;
      allow delete: if isTenantOwner(resource.data.tenantId) && isOwner(resource.data.userId) && resource != null;
    }

    /**
     * @description Rules for the /incomes collection.
     * @path /incomes/{incomeId}
     * @allow (create) - Authenticated user can create an income if they are a member of the tenant and the userId matches their uid.
     * @allow (get) - Authenticated user can get an income if they are a member of the tenant and the userId matches their uid.
     * @deny (create) - Unauthenticated user cannot create an income.
     * @deny (update) - Authenticated user cannot update if they are not a member of the tenant or the owner.
     * @principle Restricts access to a tenant's income data.
     */
    match /incomes/{incomeId} {
      allow get: if isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId);
      allow list: if isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId);
      allow create: if isTenantMember(request.resource.data.tenantId) && isOwner(request.resource.data.userId) && request.resource.data.id == incomeId;
      allow update: if isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId) && resource != null;
      allow delete: if isTenantOwner(resource.data.tenantId) && isOwner(resource.data.userId) && resource != null;
    }

    /**
     * @description Rules for the /budgets collection.
     * @path /budgets/{budgetId}
     * @allow (create) - Authenticated user can create a budget if they are a member of the tenant.
     * @allow (get) - Authenticated user can get a budget if they are a member of the tenant.
     * @deny (create) - Unauthenticated user cannot create a budget.
     * @deny (update) - Authenticated user cannot update if they are not a member of the tenant.
     * @principle Restricts access to a tenant's budget data.
     */
    match /budgets/{budgetId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if isTenantMember(resource.data.tenantId);
      allow create: if isTenantMember(request.resource.data.tenantId) && request.resource.data.id == budgetId;
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantOwner(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Rules for the /alerts collection.
     * @path /alerts/{alertId}
     * @allow (create) - Authenticated user can create an alert if they are a member of the tenant.
     * @allow (get) - Authenticated user can get an alert if they are a member of the tenant.
     * @deny (create) - Unauthenticated user cannot create an alert.
     * @deny (update) - Authenticated user cannot update if they are not a member of the tenant.
     * @principle Restricts access to a tenant's alert data.
     */
    match /alerts/{alertId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if isTenantMember(resource.data.tenantId);
      allow create: if isTenantMember(request.resource.data.tenantId) && request.resource.data.id == alertId;
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantOwner(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Rules for the /receipts_raw collection.
     * @path /receipts_raw/{receiptRawId}
     * @allow (create) - Authenticated user can create a receipt_raw if they are a member of the tenant and the userId matches their uid.
     * @allow (get) - Authenticated user can get a receipt_raw if they are a member of the tenant and the userId matches their uid.
     * @deny (create) - Unauthenticated user cannot create a receipt_raw.
     * @deny (update) - Authenticated user cannot update if they are not a member of the tenant or the owner.
     * @principle Restricts access to a tenant's receipt_raw data.
     */
    match /receipts_raw/{receiptRawId} {
      allow get: if isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId);
      allow list: if isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId);
      allow create: if isTenantMember(request.resource.data.tenantId) && isOwner(request.resource.data.userId) && request.resource.data.id == receiptRawId;
      allow update: if isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId) && resource != null;
      allow delete: if isTenantOwner(resource.data.tenantId) && isOwner(resource.data.userId) && resource != null;
    }

    /**
     * @description Rules for the /receipts_fingerprints collection.
     * @path /receipts_fingerprints/{receiptFingerprintId}
     * @allow (get) - Public read access for receipt_fingerprints.
     * @deny (create) - No public writes allowed.
     */
    match /receipts_fingerprints/{receiptFingerprintId} {
      allow get, list: if true;
      allow create, update, delete: if false; // No public writes allowed
    }

    /**
     * @description Rules for the /audit_logs collection.
     * @path /audit_logs/{auditLogId}
     * @allow (create) - Authenticated user can create an audit_log if they are a member of the tenant.
     * @allow (get) - Authenticated user can get an audit_log if they are a member of the tenant.
     * @deny (create) - Unauthenticated user cannot create an audit_log.
     * @deny (update) - Authenticated user cannot update if they are not a member of the tenant.
     * @principle Restricts access to a tenant's audit_log data.
     */
    match /audit_logs/{auditLogId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if isTenantMember(resource.data.tenantId);
      allow create: if isTenantMember(request.resource.data.tenantId) && request.resource.data.id == auditLogId;
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantOwner(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Rules for the /reports collection.
     * @path /reports/{reportId}
     * @allow (create) - Authenticated user can create a report if they are a member of the tenant and the userId matches their uid.
     * @allow (get) - Authenticated user can get a report if they are a member of the tenant and the userId matches their uid.
     * @deny (create) - Unauthenticated user cannot create a report.
     * @deny (update) - Authenticated user cannot update if they are not a member of the tenant or the owner.
     * @principle Restricts access to a tenant's report data.
     */
    match /reports/{reportId} {
      allow get: if isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId);
      allow list: if isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId);
      allow create: if isTenantMember(request.resource.data.tenantId) && isOwner(request.resource.data.userId) && request.resource.data.id == reportId;
      allow update: if isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId) && resource != null;
      allow delete: if isTenantOwner(resource.data.tenantId) && isOwner(resource.data.userId) && resource != null;
    }
  }
}