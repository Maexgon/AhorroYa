rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isTenantMember(tenantId) {
        return exists(/databases/$(database)/documents/memberships/$(tenantId + "_" + request.auth.uid));
    }

    /**
     * @description Grants access to tenants collection. Members can list available tenants. Only the owner can create, update or delete.
     * @path /tenants/{tenantId}
     * @allow get: if isTenantMember(tenantId);
     * @allow list: if isSignedIn();
     * @allow create: if request.auth.uid == request.resource.data.ownerUid;
     * @deny update: if !isOwner(resource.data.ownerUid);
     * @deny delete: if !isOwner(resource.data.ownerUid);
     * @principle Enforces tenant ownership for writes. Allows members to view tenants.
     */
    match /tenants/{tenantId} {
      allow get: if isTenantMember(tenantId);
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
    }

     /**
      * @description Grants access to licenses collection. Licenses can be read by tenant members. Writes are denied.
      * @path /licenses/{licenseId}
      * @allow get: if isTenantMember(resource.data.tenantId);
      * @allow list: if isSignedIn();
      * @deny create: if true;
      * @deny update: if true;
      * @deny delete: if true;
      * @principle Licenses can be read by signed in users. Writes are denied.
      */
    match /licenses/{licenseId} {
      allow get: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to memberships collection. Members can be read by tenant members. Writes are denied.
     * @path /memberships/{membershipId}
     * @allow get: if isTenantMember(resource.data.tenantId);
     * @allow list: if isSignedIn();
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Memberships can be read by signed in users. Writes are denied.
     */
    match /memberships/{membershipId} {
      allow get: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to users collection. Users can read/write their own profile. Listing is denied.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @deny list: if true;
     * @allow create: if isOwner(userId);
     * @allow update: if isOwner(userId) && resource.data.uid == userId;
     * @allow delete: if isOwner(userId);
     * @principle Enforces user ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && request.resource.data.uid == userId;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Grants access to currencies collection. Currencies can be read by everyone. Writes are denied.
     * @path /currencies/{currencyCode}
     * @allow get: if true;
     * @allow list: if true;
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Currencies are public read-only data.
     */
    match /currencies/{currencyCode} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to fx_rates collection. FxRates can be read by tenant members. Writes are denied.
     * @path /fx_rates/{fxRateId}
     * @allow get: if isTenantMember(resource.data.tenantId);
     * @allow list: if isSignedIn();
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle FxRates can be read by members of a tenant. Writes are denied.
     */
    match /fx_rates/{fxRateId} {
      allow get: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to categories collection. Categories can be read by tenant members. Writes are denied.
     * @path /categories/{categoryId}
     * @allow get: if isTenantMember(resource.data.tenantId);
     * @allow list: if isSignedIn();
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Categories can be read by members of a tenant. Writes are denied.
     */
    match /categories/{categoryId} {
      allow get: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to subcategories collection. Subcategories can be read by tenant members. Writes are denied.
     * @path /subcategories/{subcategoryId}
     * @allow get: if isTenantMember(resource.data.tenantId);
     * @allow list: if isSignedIn();
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Subcategories can be read by members of a tenant. Writes are denied.
     */
    match /subcategories/{subcategoryId} {
      allow get: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to entities collection. Entities can be read by tenant members. Writes are denied.
     * @path /entities/{entityId}
     * @allow get: if isTenantMember(resource.data.tenantId);
     * @allow list: if isSignedIn();
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Entities can be read by members of a tenant. Writes are denied.
     */
    match /entities/{entityId} {
      allow get: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to expenses collection. Expenses can be read by tenant members. Writes are denied.
     * @path /expenses/{expenseId}
     * @allow get: if isTenantMember(resource.data.tenantId);
     * @allow list: if isSignedIn();
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Expenses can be read by members of a tenant. Writes are denied.
     */
    match /expenses/{expenseId} {
      allow get: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to budgets collection. Budgets can be read by tenant members. Writes are denied.
     * @path /budgets/{budgetId}
     * @allow get: if isTenantMember(resource.data.tenantId);
     * @allow list: if isSignedIn();
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Budgets can be read by members of a tenant. Writes are denied.
     */
    match /budgets/{budgetId} {
      allow get: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to alerts collection. Alerts can be read by tenant members. Writes are denied.
     * @path /alerts/{alertId}
     * @allow get: if isTenantMember(resource.data.tenantId);
     * @allow list: if isSignedIn();
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Alerts can be read by members of a tenant. Writes are denied.
     */
    match /alerts/{alertId} {
      allow get: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to receipts_raw collection. ReceiptsRaw can be read by tenant members. Writes are denied.
     * @path /receipts_raw/{receiptRawId}
     * @allow get: if isTenantMember(resource.data.tenantId);
     * @allow list: if isSignedIn();
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle ReceiptsRaw can be read by members of a tenant. Writes are denied.
     */
    match /receipts_raw/{receiptRawId} {
      allow get: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to receipts_fingerprints collection. ReceiptsFingerprints can be read by tenant members. Writes are denied.
     * @path /receipts_fingerprints/{receiptFingerprintId}
     * @allow get: if isTenantMember(tenantId);
     * @allow list: if isSignedIn();
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle ReceiptsFingerprints can be read by members of a tenant. Writes are denied.
     */
    match /receipts_fingerprints/{receiptFingerprintId} {
      allow get: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to audit_logs collection. AuditLogs can be read by tenant members. Writes are denied.
     * @path /audit_logs/{auditLogId}
     * @allow get: if isTenantMember(resource.data.tenantId);
     * @allow list: if isSignedIn();
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle AuditLogs can be read by members of a tenant. Writes are denied.
     */
    match /audit_logs/{auditLogId} {
      allow get: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}