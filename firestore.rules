/**
 * @fileoverview Firestore Security Rules for "Ahorro Ya" - a multi-tenant expense tracking application.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-tenant security model. Users can only access data belonging to tenants they are members of.
 * Access is primarily controlled through tenant membership and ownership, with denormalization used to avoid complex queries in rules.
 *
 * Data Structure:
 * - /tenants/{tenantId}: Stores tenant information, including the ownerUid.
 * - /licenses/{licenseId}: Stores license information, linked to a tenant by tenantId.
 * - /memberships/{membershipId}: Defines user roles within a tenant, linking tenantId and uid.
 * - /users/{userId}: Stores user profiles, with an optional isSuperadmin flag.
 * - Other collections (currencies, fx_rates, categories, subcategories, entities, expenses, budgets, alerts, receipts_raw, audit_logs)
 *   are tenant-specific and include a tenantId field for access control.
 *
 * Key Security Decisions:
 * - User data (/users/{userId}) is private and accessible only to the authenticated user.
 * - Tenant data (/tenants/{tenantId}) can only be created by the owner.
 * - Most tenant-owned data requires the user to be a member of the tenant.
 * - Superadmin users (users.isSuperadmin == true) can bypass some restrictions, but this should be avoided.
 * - Public listing of collections is generally disallowed, except for /currencies.
 *
 * Denormalization for Authorization:
 * - The tenantId is included in most documents to avoid needing to perform additional reads to verify tenant membership.
 * - The ownerUid is included in the tenant document to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Authentication required for all protected resources.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Enforces user ownership.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the tenant.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Enforces tenant ownership.
     */
    function isTenantOwner(tenantId) {
        return isSignedIn() && get(/databases/$(database)/documents/tenants/$(tenantId)).data.ownerUid == request.auth.uid;
    }

    /**
     * @description Checks if the authenticated user is a member of the specified tenant.
     * @path N/A (Helper function)
     */
    function isTenantMember(tenantId) {
        return isSignedIn() && exists(/databases/$(database)/documents/memberships/$(tenantId + "_" + request.auth.uid));
    }

    /**
     * @description Checks if the authenticated user is the owner of the tenant and the document exists.
     * @path N/A (Helper function)
     */
    function isExistingTenantOwner(tenantId) {
        return isTenantOwner(tenantId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is the owner and the document exists.
     * @path N/A (Helper function)
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Grants create permission if the authenticated user is the owner of the Tenant.
     * @path N/A (Helper function)
     */
    function canCreateTenant(tenantId) {
        return isSignedIn() && request.resource.data.ownerUid == request.auth.uid && request.resource.data.id == tenantId;
    }

    /**
     * @description Grants create permission if the authenticated user is the owner of the Tenant.
     * @path N/A (Helper function)
     */
    function isCreatingMembershipForSelf(tenantId, userId) {
      return isSignedIn() && request.resource.data.tenantId == tenantId && request.resource.data.uid == userId && request.auth.uid == userId;
    }


    /**
     * @description Rules for the /tenants collection.
     * @path /tenants/{tenantId}
     * @allow (create) User with UID 'user123' can create a tenant document if request.resource.data.ownerUid == 'user123'.
     * @deny (create) User with UID 'user456' cannot create a tenant document if request.resource.data.ownerUid != 'user456'.
     * @allow (read) User with UID 'user123' can get tenant data if they are the owner.
     * @deny (update) User with UID 'user456' cannot update a tenant if they are not the owner.
     * @principle Enforces tenant ownership for writes.
     */
    match /tenants/{tenantId} {
      allow get: if isTenantOwner(tenantId);
      allow list: if false;
      allow create: if canCreateTenant(tenantId);
      allow update: if isExistingTenantOwner(tenantId);
      allow delete: if isExistingTenantOwner(tenantId);
    }

    /**
     * @description Rules for the /licenses collection.
     * @path /licenses/{licenseId}
     * @allow (create) Tenant owner can create a license.
     * @deny (create) Non-tenant owner cannot create a license.
     * @allow (read) Tenant owner can read a license.
     * @deny (update) Non-tenant owner cannot update a license.
     * @principle Enforces tenant ownership for licenses.
     */
    match /licenses/{licenseId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if false;
      allow create: if isTenantMember(resource.data.tenantId);
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantMember(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Rules for the /memberships collection.
     * @path /memberships/{membershipId}
     * @allow (create) A user can create a membership for themselves.
     * @deny (create) A user cannot create a membership for another user.
     * @allow (read) Tenant members can read a membership.
     * @deny (update) Non-tenant members cannot update a membership.
     * @principle Enforces tenant membership for access.
     */
    match /memberships/{membershipId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if isTenantMember(resource.data.tenantId);
      allow create: if isCreatingMembershipForSelf(resource.data.tenantId, resource.data.uid);
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantMember(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (create) User can create their own profile.
     * @deny (create) User cannot create another user's profile.
     * @allow (read) User can read their own profile.
     * @deny (update) User cannot update another user's profile.
     * @principle Enforces user ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /currencies collection.
     * @path /currencies/{currencyCode}
     * @allow (read) Public read access to currency data.
     * @deny (write) No write access allowed.
     * @principle Public read-only access for currencies.
     */
    match /currencies/{currencyCode} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /fx_rates collection.
     * @path /fx_rates/{fxRateId}
     * @allow (create) Tenant members can create fx rates.
     * @deny (create) Non-tenant members cannot create fx rates.
     * @allow (read) Tenant members can read fx rates.
     * @deny (update) Non-tenant members cannot update fx rates.
     * @principle Enforces tenant membership for access.
     */
    match /fx_rates/{fxRateId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if isTenantMember(resource.data.tenantId);
      allow create: if isTenantMember(request.resource.data.tenantId);
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantMember(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Rules for the /categories collection.
     * @path /categories/{categoryId}
     * @allow (create) Tenant members can create categories.
     * @deny (create) Non-tenant members cannot create categories.
     * @allow (read) Tenant members can read categories.
     * @deny (update) Non-tenant members cannot update categories.
     * @principle Enforces tenant membership for access.
     */
    match /categories/{categoryId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if isTenantMember(resource.data.tenantId);
      allow create: if isTenantMember(request.resource.data.tenantId);
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantMember(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Rules for the /subcategories collection.
     * @path /subcategories/{subcategoryId}
     * @allow (create) Tenant members can create subcategories.
     * @deny (create) Non-tenant members cannot create subcategories.
     * @allow (read) Tenant members can read subcategories.
     * @deny (update) Non-tenant members cannot update subcategories.
     * @principle Enforces tenant membership for access.
     */
    match /subcategories/{subcategoryId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if isTenantMember(resource.data.tenantId);
      allow create: if isTenantMember(request.resource.data.tenantId);
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantMember(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Rules for the /entities collection.
     * @path /entities/{entityId}
     * @allow (create) Tenant members can create entities.
     * @deny (create) Non-tenant members cannot create entities.
     * @allow (read) Tenant members can read entities.
     * @deny (update) Non-tenant members cannot update entities.
     * @principle Enforces tenant membership for access.
     */
    match /entities/{entityId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if isTenantMember(resource.data.tenantId);
      allow create: if isTenantMember(request.resource.data.tenantId);
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantMember(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Rules for the /expenses collection.
     * @path /expenses/{expenseId}
     * @allow (create) Tenant members can create expenses.
     * @deny (create) Non-tenant members cannot create expenses.
     * @allow (read) Tenant members can read expenses.
     * @deny (update) Non-tenant members cannot update expenses.
     * @principle Enforces tenant membership for access.
     */
    match /expenses/{expenseId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if isTenantMember(resource.data.tenantId);
      allow create: if isTenantMember(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantMember(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Rules for the /budgets collection.
     * @path /budgets/{budgetId}
     * @allow (create) Tenant members can create budgets.
     * @deny (create) Non-tenant members cannot create budgets.
     * @allow (read) Tenant members can read budgets.
     * @deny (update) Non-tenant members cannot update budgets.
     * @principle Enforces tenant membership for access.
     */
    match /budgets/{budgetId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if isTenantMember(resource.data.tenantId);
      allow create: if isTenantMember(request.resource.data.tenantId);
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantMember(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Rules for the /alerts collection.
     * @path /alerts/{alertId}
     * @allow (create) Tenant members can create alerts.
     * @deny (create) Non-tenant members cannot create alerts.
     * @allow (read) Tenant members can read alerts.
     * @deny (update) Non-tenant members cannot update alerts.
     * @principle Enforces tenant membership for access.
     */
    match /alerts/{alertId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if isTenantMember(resource.data.tenantId);
      allow create: if isTenantMember(request.resource.data.tenantId);
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantMember(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Rules for the /receipts_raw collection.
     * @path /receipts_raw/{receiptRawId}
     * @allow (create) Tenant members can create receipts_raw.
     * @deny (create) Non-tenant members cannot create receipts_raw.
     * @allow (read) Tenant members can read receipts_raw.
     * @deny (update) Non-tenant members cannot update receipts_raw.
     * @principle Enforces tenant membership for access.
     */
    match /receipts_raw/{receiptRawId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if isTenantMember(resource.data.tenantId);
      allow create: if isTenantMember(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantMember(resource.data.tenantId) && resource != null;
    }

    /**
     * @description Rules for the /receipts_fingerprints collection.
     * @path /receipts_fingerprints/{receiptFingerprintId}
     * @allow (read) Public read access to receipt fingerprints.
     * @deny (write) No write access allowed.
     */
    match /receipts_fingerprints/{receiptFingerprintId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /audit_logs collection.
     * @path /audit_logs/{auditLogId}
     * @allow (create) Tenant members can create audit_logs.
     * @deny (create) Non-tenant members cannot create audit_logs.
     * @allow (read) Tenant members can read audit_logs.
     * @deny (update) Non-tenant members cannot update audit_logs.
     * @principle Enforces tenant membership for access.
     */
    match /audit_logs/{auditLogId} {
      allow get: if isTenantMember(resource.data.tenantId);
      allow list: if isTenantMember(resource.data.tenantId);
      allow create: if isTenantMember(request.resource.data.tenantId);
      allow update: if isTenantMember(resource.data.tenantId) && resource != null;
      allow delete: if isTenantMember(resource.data.tenantId) && resource != null;
    }
  }
}