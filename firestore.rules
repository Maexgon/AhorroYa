rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile data, accessible only by the user.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the request is made by the user (isOwner).
     * @deny (get, create, update, delete, list) if the request is not made by the user.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages tenants in the system. Only the owner can manage a tenant.
     * @path /tenants/{tenantId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if the user is the owner (ownerUid).
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces tenant ownership for writes.
     */
    match /tenants/{tenantId} {
      allow get: if isSignedIn() && isTenantMember(tenantId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update: if isSignedIn() && isTenantOwner(tenantId);
      allow delete: if isSignedIn() && isTenantOwner(tenantId);
    }

    /**
     * @description Manages licenses.
     * @path /licenses/{licenseId}
     * @allow (get, list) if the user is a member of the tenant associated with the license.
     * @allow (create, update, delete) if the user is the owner of the tenant associated with the license.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces tenant ownership for writes.
     */
    match /licenses/{licenseId} {
      allow get: if isSignedIn() && isTenantMember(getTenantId(licenseId));
      allow list: if isSignedIn() && isTenantMember(getTenantId(licenseId));
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Manages memberships.
     * @path /memberships/{membershipId}
     * @allow (get, list) if the user is a member of the tenant.
     * @allow (create, update, delete) if the user is the owner of the tenant.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces tenant ownership for writes.
     */
    match /memberships/{membershipId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Manages currencies. Public read-only data.
     * @path /currencies/{currencyCode}
     * @allow get, list: if true.
     * @deny create, update, delete: if false.
     * @principle Public read, no writes allowed.
     */
    match /currencies/{currencyCode} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages exchange rates.
     * @path /fx_rates/{fxRateId}
     * @allow (get, list) if the user is a member of the tenant.
     * @allow (create, update, delete) if the user is the owner of the tenant.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces tenant ownership for writes.
     */
    match /fx_rates/{fxRateId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Manages categories.
     * @path /categories/{categoryId}
     * @allow (get, list) if the user is a member of the tenant.
     * @allow (create, update, delete) if the user is the owner of the tenant.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces tenant ownership for writes.
     */
    match /categories/{categoryId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Manages subcategories.
     * @path /subcategories/{subcategoryId}
     * @allow (get, list) if the user is a member of the tenant.
     * @allow (create, update, delete) if the user is the owner of the tenant.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces tenant ownership for writes.
     */
    match /subcategories/{subcategoryId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Manages entities.
     * @path /entities/{entityId}
     * @allow (get, list) if the user is a member of the tenant.
     * @allow (create, update, delete) if the user is the owner of the tenant.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces tenant ownership for writes.
     */
    match /entities/{entityId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Manages expenses.
     * @path /expenses/{expenseId}
     * @allow (get, list) if the user is a member of the tenant and the expense belongs to them.
     * @allow (create, update, delete) if the user is the owner of the tenant and the expense belongs to them.
     * @deny (create, update, delete) if the user is not the owner or the expense does not belong to them.
     * @principle Enforces tenant ownership for writes.
     */
    match /expenses/{expenseId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Manages budgets.
     * @path /budgets/{budgetId}
     * @allow (get, list) if the user is a member of the tenant.
     * @allow (create, update, delete) if the user is the owner of the tenant.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces tenant ownership for writes.
     */
    match /budgets/{budgetId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Manages alerts.
     * @path /alerts/{alertId}
     * @allow (get, list) if the user is a member of the tenant.
     * @allow (create, update, delete) if the user is the owner of the tenant.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces tenant ownership for writes.
     */
    match /alerts/{alertId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Manages raw receipt data.
     * @path /receipts_raw/{receiptRawId}
     * @allow (get, list) if the user is a member of the tenant and the receipt belongs to them.
     * @allow (create, update, delete) if the user is the owner of the tenant and the receipt belongs to them.
     * @deny (create, update, delete) if the user is not the owner or the receipt does not belong to them.
     * @principle Enforces tenant ownership for writes.
     */
    match /receipts_raw/{receiptRawId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Manages receipt fingerprints.
     * @path /receipts_fingerprints/{receiptFingerprintId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle  Open Read / No Write
     */
    match /receipts_fingerprints/{receiptFingerprintId} {
        allow get, list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Manages audit logs.
     * @path /audit_logs/{auditLogId}
     * @allow (get, list) if the user is a member of the tenant.
     * @allow (create, update, delete) if the user is the owner of the tenant.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces tenant ownership for writes.
     */
    match /audit_logs/{auditLogId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Publicly accessible licenses.
     * @path /licenses
     * @allow list: if true;
     * @deny create, update, delete, get: if false;
     * @principle  Open Read / No Write
     */
    match /licenses {
      allow list: if true;
      allow get: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isTenantOwner(tenantId) {
        return get(/databases/$(database)/documents/tenants/$(tenantId)).data.ownerUid == request.auth.uid;
    }

    function isTenantMember(tenantId) {
        return get(/databases/$(database)/documents/memberships/$(tenantId + "_" + request.auth.uid)).data.uid == request.auth.uid;
    }

    function getTenantId(licenseId) {
      return get(/databases/$(database)/documents/licenses/$(licenseId)).data.tenantId;
    }
  }
}