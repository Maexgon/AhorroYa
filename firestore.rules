/**
 * @fileoverview Firestore Security Rules for "Ahorro Ya," a multi-tenant expense tracking application.
 *
 * Core Philosophy: This ruleset enforces a strict, multi-tenant data isolation model.
 *  Each tenant's data is segregated, and users can only access data within tenants they are members of.
 *  User profiles are private and only accessible to the user themselves.
 *
 * Data Structure:
 * - /tenants/{tenantId}: Stores tenant information.
 * - /licenses/{licenseId}: Stores license information for tenants.
 * - /memberships/{membershipId}: Stores user-tenant membership relationships.
 * - /users/{userId}: Stores user profile data.
 * - /currencies/{currencyCode}: Stores currency data. Publicly readable.
 * - /fx_rates/{fxRateId}: Stores foreign exchange rates.
 * - /categories/{categoryId}: Stores expense categories.
 * - /subcategories/{subcategoryId}: Stores expense subcategories.
 * - /entities/{entityId}: Stores business/bank entity data.
 * - /expenses/{expenseId}: Stores expense records.
 * - /budgets/{budgetId}: Stores budget data.
 * - /alerts/{alertId}: Stores alert notifications.
 * - /receipts_raw/{receiptRawId}: Stores raw receipt OCR data.
 * - /receipts_fingerprints/{receiptFingerprintId}: Stores receipt fingerprints for deduplication.
 * - /audit_logs/{auditLogId}: Stores audit log entries.
 *
 * Key Security Decisions:
 * - Strict tenant-based access control: Users can only access resources associated with tenants they belong to.
 * - User profiles are private: Only the authenticated user can read/write their own profile.
 * - No public listing of tenants or memberships: Listing these collections is denied to prevent unauthorized enumeration.
 * - Currencies are publicly readable: Currency data is considered public information.
 *
 * Denormalization for Authorization:
 * - Most documents include `tenantId` to quickly verify user membership without extra `get()` calls.
 * - `Expense` and `ReceiptRaw` also include `userId` to enforce user-specific ownership within a tenant.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows only the tenant owner to read and write tenant data.
     * @path /tenants/{tenantId}
     * @allow (get, list): if isSignedIn() && isTenantOwner(tenantId);
     * @allow (create, update, delete): if isSignedIn() && isTenantOwner(tenantId);
     * @deny (get, list): if !isSignedIn();
     * @deny (create, update, delete): if !isSignedIn() || !isTenantOwner(tenantId);
     * @principle Enforces tenant ownership for all operations.
     */
    match /tenants/{tenantId} {
      allow get: if isSignedIn() && isTenantOwner(tenantId);
      allow list: if false;
      allow create: if isSignedIn() && isTenantOwner(tenantId) && request.resource.data.ownerUid == request.auth.uid;
      allow update: if isSignedIn() && isTenantOwner(tenantId) && request.resource.data.ownerUid == get(/databases/$(database)/documents/tenants/$(tenantId)).data.ownerUid;
      allow delete: if isSignedIn() && isTenantOwner(tenantId);
    }

    /**
     * @description Allows only users who are members of the tenant to read and write license data.
     * @path /licenses/{licenseId}
     * @allow (get, list): if isSignedIn() && isTenantMember(resource.data.tenantId);
     * @allow (create, update, delete): if isSignedIn() && isTenantOwner(getTenantIdFromLicense()) && resource != null;
     * @deny (get, list): if !isSignedIn() || !isTenantMember(resource.data.tenantId);
     * @deny (create, update, delete): if !isSignedIn() || !isTenantOwner(getTenantIdFromLicense()) || resource == null;
     * @principle Enforces tenant membership and ownership for all operations.
     */
    match /licenses/{licenseId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if false;
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Allows users to read and write their own membership data.  Tenant owners can also manage memberships.
     * @path /memberships/{membershipId}
     * @allow (get): if isSignedIn() && (isOwnerOfMembership(membershipId) || isTenantOwnerFromMembership(membershipId));
     * @allow (list): if false;
     * @allow (create): if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
     * @allow (update, delete): if isSignedIn() && (isOwnerOfMembership(membershipId) || isTenantOwnerFromMembership(membershipId)) && resource != null;
     * @deny (get): if !isSignedIn() || (!isOwnerOfMembership(membershipId) && !isTenantOwnerFromMembership(membershipId));
     * @deny (create): if !isSignedIn() || !isTenantOwner(request.resource.data.tenantId);
     * @deny (update, delete): if !isSignedIn() || (!isOwnerOfMembership(membershipId) && !isTenantOwnerFromMembership(membershipId)) || resource == null;
     * @principle Enforces ownership and tenant owner control for membership management.
     */
    match /memberships/{membershipId} {
      allow get: if isSignedIn() && (isOwnerOfMembership(membershipId) || isTenantOwnerFromMembership(membershipId));
      allow list: if false;
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && (isOwnerOfMembership(membershipId) || isTenantOwnerFromMembership(membershipId));
      allow delete: if isSignedIn() && (isOwnerOfMembership(membershipId) || isTenantOwnerFromMembership(membershipId));
    }

    /**
     * @description Allows only the authenticated user to read and write their own user profile.
     * @path /users/{userId}
     * @allow (get, list): if isSignedIn() && isOwner(userId);
     * @allow (create): if isSignedIn() && isOwner(userId);
     * @allow (update, delete): if isSignedIn() && isOwner(userId) && resource != null;
     * @deny (get, list): if !isSignedIn() || !isOwner(userId);
     * @deny (create): if !isSignedIn() || !isOwner(userId);
     * @deny (update, delete): if !isSignedIn() || !isOwner(userId) || resource == null;
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow delete: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
    }

    /**
     * @description Allows anyone to read currency data, but restricts writing.
     * @path /currencies/{currencyCode}
     * @allow get, list: if true;
     * @deny create, update, delete: if true; // TODO: Limit to superadmin only.
     * @principle Publicly readable currency data with restricted writes.
     */
    match /currencies/{currencyCode} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Limit to superadmin only.
      allow update: if false; // TODO: Limit to superadmin only.
      allow delete: if false; // TODO: Limit to superadmin only.
    }

    /**
     * @description Allows users who are members of the tenant to read and write FX rate data.
     * @path /fx_rates/{fxRateId}
     * @allow (get, list): if isSignedIn() && isTenantMember(resource.data.tenantId);
     * @allow (create, update, delete): if isSignedIn() && isTenantMember(resource.data.tenantId) && resource != null;
     * @deny (get, list): if !isSignedIn() || !isTenantMember(resource.data.tenantId);
     * @deny (create, update, delete): if !isSignedIn() || !isTenantMember(resource.data.tenantId) || resource == null;
     * @principle Enforces tenant membership for all operations.
     */
    match /fx_rates/{fxRateId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Allows users who are members of the tenant to read and write category data.
     * @path /categories/{categoryId}
     * @allow (get, list): if isSignedIn() && isTenantMember(resource.data.tenantId);
     * @allow (create, update, delete): if isSignedIn() && isTenantMember(resource.data.tenantId) && resource != null;
     * @deny (get, list): if !isSignedIn() || !isTenantMember(resource.data.tenantId);
     * @deny (create, update, delete): if !isSignedIn() || !isTenantMember(resource.data.tenantId) || resource == null;
     * @principle Enforces tenant membership for all operations.
     */
    match /categories/{categoryId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Allows users who are members of the tenant to read and write subcategory data.
     * @path /subcategories/{subcategoryId}
     * @allow (get, list): if isSignedIn() && isTenantMember(resource.data.tenantId);
     * @allow (create, update, delete): if isSignedIn() && isTenantMember(resource.data.tenantId) && resource != null;
     * @deny (get, list): if !isSignedIn() || !isTenantMember(resource.data.tenantId);
     * @deny (create, update, delete): if !isSignedIn() || !isTenantMember(resource.data.tenantId) || resource == null;
     * @principle Enforces tenant membership for all operations.
     */
    match /subcategories/{subcategoryId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Allows users who are members of the tenant to read and write entity data.
     * @path /entities/{entityId}
     * @allow (get, list): if isSignedIn() && isTenantMember(resource.data.tenantId);
     * @allow (create, update, delete): if isSignedIn() && isTenantMember(resource.data.tenantId) && resource != null;
     * @deny (get, list): if !isSignedIn() || !isTenantMember(resource.data.tenantId);
     * @deny (create, update, delete): if !isSignedIn() || !isTenantMember(resource.data.tenantId) || resource == null;
     * @principle Enforces tenant membership for all operations.
     */
    match /entities/{entityId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Allows users who are members of the tenant to read and write expense data, enforcing user-specific ownership.
     * @path /expenses/{expenseId}
     * @allow (get): if isSignedIn() && isTenantMember(resource.data.tenantId) && isOwnerOfExpense(resource.data.userId);
     * @allow (list): if isSignedIn() && isTenantMember(resource.data.tenantId) && isOwnerOfExpense(request.auth.uid);
     * @allow (create): if isSignedIn() && isTenantMember(request.resource.data.tenantId) && isOwnerOfExpense(request.resource.data.userId);
     * @allow (update): if isSignedIn() && isTenantMember(resource.data.tenantId) && isExistingOwnerOfExpense(resource.data.userId);
     * @allow (delete): if isSignedIn() && isTenantMember(resource.data.tenantId) && isExistingOwnerOfExpense(resource.data.userId);
     * @deny (get): if !isSignedIn() || !isTenantMember(resource.data.tenantId) || !isOwnerOfExpense(resource.data.userId);
     * @deny (create): if !isSignedIn() || !isTenantMember(request.resource.data.tenantId) || !isOwnerOfExpense(request.resource.data.userId);
     * @deny (update): if !isSignedIn() || !isTenantMember(resource.data.tenantId) || !isExistingOwnerOfExpense(resource.data.userId);
     * @principle Enforces tenant membership and user-ownership for all operations.
     */
    match /expenses/{expenseId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId) && isOwnerOfExpense(resource.data.userId);
      allow list: if isSignedIn() && isTenantMember(getTenantIdFromExpense());
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId) && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId) && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Allows users who are members of the tenant to read and write budget data.
     * @path /budgets/{budgetId}
     * @allow (get, list): if isSignedIn() && isTenantMember(resource.data.tenantId);
     * @allow (create, update, delete): if isSignedIn() && isTenantMember(resource.data.tenantId) && resource != null;
     * @deny (get, list): if !isSignedIn() || !isTenantMember(resource.data.tenantId);
     * @deny (create, update, delete): if !isSignedIn() || !isTenantMember(resource.data.tenantId) || resource == null;
     * @principle Enforces tenant membership for all operations.
     */
    match /budgets/{budgetId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Allows users who are members of the tenant to read and write alert data.
     * @path /alerts/{alertId}
     * @allow (get, list): if isSignedIn() && isTenantMember(resource.data.tenantId);
     * @allow (create, update, delete): if isSignedIn() && isTenantMember(resource.data.tenantId) && resource != null;
     * @deny (get, list): if !isSignedIn() || !isTenantMember(resource.data.tenantId);
     * @deny (create, update, delete): if !isSignedIn() || !isTenantMember(resource.data.tenantId) || resource == null;
     * @principle Enforces tenant membership for all operations.
     */
    match /alerts/{alertId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Allows users who are members of the tenant to read and write raw receipt data, enforcing user-specific ownership.
     * @path /receipts_raw/{receiptRawId}
     * @allow (get): if isSignedIn() && isTenantMember(resource.data.tenantId) && isOwnerOfReceiptRaw(resource.data.userId);
     * @allow (list): if isSignedIn() && isTenantMember(getTenantIdFromReceiptRaw()) && isOwnerOfReceiptRaw(request.auth.uid);
     * @allow (create): if isSignedIn() && isTenantMember(request.resource.data.tenantId) && isOwnerOfReceiptRaw(request.resource.data.userId);
     * @allow (update): if isSignedIn() && isTenantMember(resource.data.tenantId) && isExistingOwnerOfReceiptRaw(resource.data.userId);
     * @allow (delete): if isSignedIn() && isTenantMember(resource.data.tenantId) && isExistingOwnerOfReceiptRaw(resource.data.userId);
     * @deny (get): if !isSignedIn() || !isTenantMember(resource.data.tenantId) || !isOwnerOfReceiptRaw(resource.data.userId);
     * @deny (create): if !isSignedIn() || !isTenantMember(request.resource.data.tenantId) || !isOwnerOfReceiptRaw(request.resource.data.userId);
     * @deny (update): if !isSignedIn() || !isTenantMember(resource.data.tenantId) || !isExistingOwnerOfReceiptRaw(resource.data.userId);
     * @principle Enforces tenant membership and user-ownership for all operations.
     */
    match /receipts_raw/{receiptRawId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId) && isOwnerOfReceiptRaw(resource.data.userId);
      allow list: if isSignedIn() && isTenantMember(getTenantIdFromReceiptRaw());
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId) && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId) && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Allows read/write access to receipt fingerprints, based on tenant membership.
     * @path /receipts_fingerprints/{receiptFingerprintId}
     * @allow (get, list): if isSignedIn() && isTenantMember(getTenantIdFromReceiptFingerprint());
     * @allow (create, update, delete): if isSignedIn() && isTenantMember(getTenantIdFromReceiptFingerprint()) && resource != null;
     * @deny (get, list): if !isSignedIn() || !isTenantMember(getTenantIdFromReceiptFingerprint());
     * @deny (create, update, delete): if !isSignedIn() || !isTenantMember(getTenantIdFromReceiptFingerprint()) || resource == null;
     * @principle Enforces tenant membership for all operations.
     */
    match /receipts_fingerprints/{receiptFingerprintId} {
      allow get: if isSignedIn() && isTenantMember(getTenantIdFromReceiptFingerprint());
      allow list: if isSignedIn() && isTenantMember(getTenantIdFromReceiptFingerprint());
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Allows users who are members of the tenant to read and write audit log data.
     * @path /audit_logs/{auditLogId}
     * @allow (get, list): if isSignedIn() && isTenantMember(resource.data.tenantId);
     * @allow (create, update, delete): if isSignedIn() && isTenantMember(resource.data.tenantId) && resource != null; // Consider restricting writes to server-only
     * @deny (get, list): if !isSignedIn() || !isTenantMember(resource.data.tenantId);
     * @deny (create, update, delete): if !isSignedIn() || !isTenantMember(resource.data.tenantId) || resource == null;
     * @principle Enforces tenant membership for all operations.  Writes should ideally be restricted to the backend.
     */
    match /audit_logs/{auditLogId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId); // Consider restricting writes to server-only
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId); // Consider restricting writes to server-only
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId); // Consider restricting writes to server-only
    }


    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId);
    }

    function isTenantOwner(tenantId) {
      return get(/databases/$(database)/documents/tenants/$(tenantId)).data.ownerUid == request.auth.uid;
    }

    function isTenantMember(tenantId) {
      return exists(/databases/$(database)/documents/memberships/$(request.auth.uid)_$(tenantId));
    }

    function isOwnerOfExpense(userId) {
        return request.auth.uid == userId;
    }

    function isExistingOwnerOfExpense(userId) {
      return isOwnerOfExpense(userId);
    }

    function isOwnerOfReceiptRaw(userId) {
        return request.auth.uid == userId;
    }

    function isExistingOwnerOfReceiptRaw(userId) {
      return isOwnerOfReceiptRaw(userId);
    }

    function isOwnerOfMembership(membershipId) {
      return request.auth.uid == membershipId.split("_")[0];
    }

    function isTenantOwnerFromMembership(membershipId) {
      let tenantId = membershipId.split("_")[1];
      return get(/databases/$(database)/documents/tenants/$(tenantId)).data.ownerUid == request.auth.uid;
    }

    function getTenantIdFromLicense() {
      return request.resource.data.tenantId;
    }

    function getTenantIdFromExpense() {
      return resource.data.tenantId;
    }

    function getTenantIdFromReceiptRaw() {
        return resource.data.tenantId;
    }

    function getTenantIdFromReceiptFingerprint() {
      return get(/databases/$(database)/documents/receipts_fingerprints/$(receiptFingerprintId)).data.tenantId;
    }

    function getAfter() {
        return get(/databases/$(database)/documents/$(request.path));
    }
  }
}