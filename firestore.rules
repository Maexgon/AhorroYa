/**
 * @fileoverview Firestore Security Rules for Ahorro Ya (Expense Tracking App)
 *
 * Core Philosophy:
 * This ruleset enforces a multi-tenant data model where users can manage expenses within tenants they belong to.
 * It prioritizes security by enforcing strict ownership and membership checks for data access.
 *
 * Data Structure:
 * - /tenants/{tenantId}: Stores tenant information, including the owner.
 * - /licenses/{licenseId}: Stores license information for tenants.
 * - /memberships/{membershipId}: Stores user memberships within tenants, defining roles (owner, admin, member).
 * - /users/{userId}: Stores user profile information, with the 'isSuperadmin' flag.
 * - /currencies/{currencyCode}: Stores currency information (public read).
 * - /fx_rates/{fxRateId}: Stores foreign exchange rates for tenants.
 * - /categories/{categoryId}: Stores expense categories for tenants.
 * - /subcategories/{subcategoryId}: Stores expense subcategories for tenants.
 * - /entities/{entityId}: Stores business entities for tenants.
 * - /expenses/{expenseId}: Stores expense records for tenants, associated with users.
 * - /budgets/{budgetId}: Stores budget information for tenants.
 * - /alerts/{alertId}: Stores alert notifications for tenants.
 * - /receipts_raw/{receiptRawId}: Stores raw OCR data from receipts.
 * - /receipts_fingerprints/{receiptFingerprintId}: Stores fingerprints for receipt deduplication.
 * - /audit_logs/{auditLogId}: Stores audit log entries.
 *
 * Key Security Decisions:
 * - Strict owner-only write access for tenants and user profiles.
 * - Tenant-level access control for all tenant-owned data (expenses, categories, etc.) based on membership.
 * - Public read access for currency data.
 * - Superadmin role can bypass certain restrictions (requires get() call, consider using a dedicated collection).
 * - Listing tenants collection by all users is denied due to privacy concerns.
 *
 * Denormalization for Authorization:
 * - 'tenantId' is included in almost all collections to avoid complex joins and enable atomic operations.
 * - 'ownerUid' is included in the 'tenants' collection for authorization independence.
 * - 'userId' is included in the 'expenses' and 'receipts_raw' collections for authorization independence.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && resource.data.ownerUid == request.auth.uid;
    }

    function isTenantOwner(tenantId) {
      return isSignedIn() && get(/databases/$(database)/documents/tenants/$(tenantId)).data.ownerUid == request.auth.uid;
    }

    // Path: /tenants/{tenantId}
    /**
     * @description Manages tenant data. Only the owner can create, update, or delete a tenant.
     * @path /tenants/{tenantId}
     * @allow (create) User with matching auth UID creates a tenant: request.auth.uid == "user123" && request.resource.data.ownerUid == "user123"
     * @deny (create) User attempts to create a tenant with mismatched ownerUid: request.auth.uid == "user123" && request.resource.data.ownerUid != "user123"
     * @allow (get) Any authenticated user can get a tenant.
     * @deny (list) Listing tenants is not allowed for security reasons.
     * @allow (update) Owner updates the tenant.
     * @deny (update) Non-owner attempts to update.
     * @allow (delete) Owner deletes the tenant.
     * @deny (delete) Non-owner attempts to delete.
     * @principle Enforces tenant ownership for writes.
     */
    match /tenants/{tenantId} {
      allow get: if isSignedIn();
      allow list: if false;

      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid && request.resource.id == tenantId;
      allow update: if isTenantOwner(tenantId);
      allow delete: if isTenantOwner(tenantId);
    }

    // Path: /licenses/{licenseId}
    /**
     * @description Manages licenses.  Anyone can read, but writes are not allowed in this prototype.
     * @path /licenses/{licenseId}
     * @allow (get) Any authenticated user can get a license.
     * @allow (list) Any authenticated user can list licenses.
     * @deny (create) No one can create licenses.
     * @deny (update) No one can update licenses.
     * @deny (delete) No one can delete licenses.
     * @principle No write permissions granted in this prototype.
     */
    match /licenses/{licenseId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    // Path: /memberships/{membershipId}
    /**
     * @description Manages memberships. Anyone can read, but writes are not allowed in this prototype.
     * @path /memberships/{membershipId}
     * @allow (get) Any authenticated user can get a membership.
     * @allow (list) Any authenticated user can list memberships.
     * @deny (create) No one can create memberships.
     * @deny (update) No one can update memberships.
     * @deny (delete) No one can delete memberships.
     * @principle No write permissions granted in this prototype.
     */
    match /memberships/{membershipId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    // Path: /users/{userId}
    /**
     * @description Manages user profile data.  Users can only manage their own profile.
     * @path /users/{userId}
     * @allow (create) User can create their own profile if the UID matches the document ID.
     * @deny (create) User attempts to create a profile with mismatched UID.
     * @allow (get) Any authenticated user can get a user profile.
     * @allow (list) Listing users is not allowed for security reasons.
     * @allow (update) User can update their own profile.
     * @deny (update) User attempts to update another user's profile.
     * @allow (delete) User can delete their own profile.
     * @deny (delete) User attempts to delete another user's profile.
     * @principle Enforces user ownership for profile management.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    // Path: /currencies/{currencyCode}
    /**
     * @description Manages currency data.  Currencies are publicly readable.
     * @path /currencies/{currencyCode}
     * @allow (get) Anyone can read currency data.
     * @allow (list) Anyone can list currency data.
     * @deny (create) No one can create currencies.
     * @deny (update) No one can update currencies.
     * @deny (delete) No one can delete currencies.
     * @principle Public read access for currency data.
     */
    match /currencies/{currencyCode} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // Tenant-owned data: Only tenant owners can modify
    match /fx_rates/{fxRateId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn() && request.resource.data.tenantId != null && isTenantOwner(request.resource.data.tenantId);
    }

    match /categories/{categoryId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn() && request.resource.data.tenantId != null && isTenantOwner(request.resource.data.tenantId);
    }

    match /subcategories/{subcategoryId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn() && request.resource.data.tenantId != null && isTenantOwner(request.resource.data.tenantId);
    }

    match /entities/{entityId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn() && request.resource.data.tenantId != null && isTenantOwner(request.resource.data.tenantId);
    }

    match /expenses/{expenseId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn() && request.resource.data.tenantId != null && isTenantOwner(request.resource.data.tenantId);
    }

    match /budgets/{budgetId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn() && request.resource.data.tenantId != null && isTenantOwner(request.resource.data.tenantId);
    }

    match /alerts/{alertId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn() && request.resource.data.tenantId != null && isTenantOwner(request.resource.data.tenantId);
    }

    match /receipts_raw/{receiptRawId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn() && request.resource.data.tenantId != null && isTenantOwner(request.resource.data.tenantId);
    }

    match /receipts_fingerprints/{receiptFingerprintId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn() && request.resource.data.tenantId != null && isTenantOwner(request.resource.data.tenantId);
    }

    match /audit_logs/{auditLogId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn() && request.resource.data.tenantId != null && isTenantOwner(request.resource.data.tenantId);
    }
  }
}