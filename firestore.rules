/**
 * @fileoverview Firestore Security Rules for "Ahorro Ya," a multi-tenant expense tracking application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict tenant-based isolation model where users can only access data belonging to tenants they are members of.
 * Most collections are tenant-scoped and require membership validation.  User data is secured via ownership.
 *
 * Data Structure:
 * - /tenants/{tenantId}:  Tenant documents, owned by a specific user.
 * - /licenses/{licenseId}: License documents, linked to a tenant.
 * - /memberships/{membershipId}: User memberships within a tenant, defining roles.
 * - /users/{userId}: User profile data, accessible only by the user themselves.
 * - /currencies/{currencyCode}: Currency data. Intended to be world-readable.
 * - /fx_rates/{fxRateId}: Foreign exchange rates, scoped to a tenant.
 * - /categories/{categoryId}: Expense categories, scoped to a tenant.
 * - /subcategories/{subcategoryId}: Expense subcategories, scoped to a tenant.
 * - /entities/{entityId}: Business/bank entities, scoped to a tenant.
 * - /expenses/{expenseId}: Expense records, scoped to a tenant and owned by a user.
 * - /incomes/{incomeId}: Income records, scoped to a tenant and owned by a user.
 * - /budgets/{budgetId}: Budget data, scoped to a tenant.
 * - /alerts/{alertId}: Alert notifications, scoped to a tenant.
 * - /receipts_raw/{receiptRawId}: Raw receipt data (OCR), scoped to a tenant and owned by a user.
 * - /receipts_fingerprints/{receiptFingerprintId}: Receipt fingerprints for deduplication.
 * - /audit_logs/{auditLogId}: Audit log entries, scoped to a tenant.
 * - /reports/{reportId}: Financial reports, scoped to a tenant and generated by a user.
 *
 * Key Security Decisions:
 * - No user listing is allowed (explicitly denied).
 * - Most data requires tenant membership for access.
 * - Superadmin role can bypass certain restrictions. A better approach would be to use a dedicated collection to check the isSuperAdmin role.
 *
 * Denormalization for Authorization:
 * - Most tenant-specific collections include a 'tenantId' field to avoid costly 'get()' calls to the /tenants collection.
 * - Expenses and Receipts include a 'userId' to quickly verify the user's access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the requesting user is signed in.
     * @path N/A (Helper Function)
     * @allow N/A (Helper Function)
     * @deny N/A (Helper Function)
     * @principle Requires a valid authentication token for any access.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user's UID matches the provided userId.
     * @path N/A (Helper Function)
     * @allow N/A (Helper Function)
     * @deny N/A (Helper Function)
     * @principle Enforces ownership by comparing the authenticated user's ID with the resource's owner ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource and if the resource exists.
     * @path N/A (Helper Function)
     * @allow N/A (Helper Function)
     * @deny N/A (Helper Function)
     * @principle Ensures that only existing resources can be modified or deleted by their owner.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the requesting user is a member of the tenant associated with the resource.
     * @path N/A (Helper Function)
     */
    function isTenantMember(tenantId) {
        return isSignedIn() && exists(/databases/$(database)/documents/memberships/$(tenantId + "_" + request.auth.uid));
    }

    /**
     * @description Allows superadmins to bypass tenant membership checks.
     * @path N/A (Helper Function)
     */
    function isSuperAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperadmin == true;
    }


    /**
     * @description Manages Tenant documents.
     * @path /tenants/{tenantId}
     * @allow Signed-in user (create) if the 'ownerUid' field in the request matches their UID. Signed-in user (get, update, delete) if they are the owner of the tenant.
     * @deny Non-signed-in user (any). Signed-in user (create) if the 'ownerUid' does not match their UID.
     * @principle Enforces tenant ownership and prevents unauthorized modifications.
     */
    match /tenants/{tenantId} {
      allow get: if isTenantMember(tenantId) || isSuperAdmin();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerUid) || isSuperAdmin();
      allow delete: if isExistingOwner(resource.data.ownerUid) || isSuperAdmin();
    }

    /**
     * @description Manages License documents.
     * @path /licenses/{licenseId}
     * @allow Signed-in user (get) if they are a member of the tenant associated with the license.
     * @deny Non-signed-in user (any). Signed-in user (get) if they are not a member of the tenant.
     * @principle Restricts license access to tenant members.
     */
    match /licenses/{licenseId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow list: if false;
      allow create: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow update: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow delete: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
    }

    /**
     * @description Manages Membership documents.
     * @path /memberships/{membershipId}
     * @allow Signed-in user (get) if they are a member of the tenant associated with the membership.
     * @deny Non-signed-in user (any). Signed-in user (get) if they are not a member of the tenant.
     * @principle Restricts membership access to tenant members.
     */
    match /memberships/{membershipId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow list: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow create: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow update: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow delete: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
    }

    /**
     * @description Manages User documents.
     * @path /users/{userId}
     * @allow Signed-in user (get, update) if their UID matches the userId.
     * @deny Non-signed-in user (any). Signed-in user (get, update) if their UID does not match the userId.
     * @principle Enforces user-ownership of their own profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Manages Currency documents.
     * @path /currencies/{currencyCode}
     * @allow Anyone (get, list).
     * @deny No one (this data is public).
     */
    match /currencies/{currencyCode} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Only allow superadmins to modify currencies
    }

    /**
     * @description Manages FxRate documents.
     * @path /fx_rates/{fxRateId}
     * @allow Signed-in user (get) if they are a member of the tenant associated with the fx rate.
     * @deny Non-signed-in user (any). Signed-in user (get) if they are not a member of the tenant.
     * @principle Restricts fx rate access to tenant members.
     */
    match /fx_rates/{fxRateId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow list: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow create: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow update: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow delete: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
    }

    /**
     * @description Manages Category documents.
     * @path /categories/{categoryId}
     * @allow Signed-in user (get) if they are a member of the tenant associated with the category.
     * @deny Non-signed-in user (any). Signed-in user (get) if they are not a member of the tenant.
     * @principle Restricts category access to tenant members.
     */
    match /categories/{categoryId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow list: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow create: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow update: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow delete: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
    }

    /**
     * @description Manages Subcategory documents.
     * @path /subcategories/{subcategoryId}
     * @allow Signed-in user (get) if they are a member of the tenant associated with the subcategory.
     * @deny Non-signed-in user (any). Signed-in user (get) if they are not a member of the tenant.
     * @principle Restricts subcategory access to tenant members.
     */
    match /subcategories/{subcategoryId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow list: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow create: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow update: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow delete: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
    }

    /**
     * @description Manages Entity documents.
     * @path /entities/{entityId}
     * @allow Signed-in user (get) if they are a member of the tenant associated with the entity.
     * @deny Non-signed-in user (any). Signed-in user (get) if they are not a member of the tenant.
     * @principle Restricts entity access to tenant members.
     */
    match /entities/{entityId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow list: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow create: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow update: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow delete: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
    }

    /**
     * @description Manages Expense documents.
     * @path /expenses/{expenseId}
     * @allow Signed-in user (get) if they are a member of the tenant associated with the expense.
     * @deny Non-signed-in user (any). Signed-in user (get) if they are not a member of the tenant.
     * @principle Restricts expense access to tenant members.
     */
    match /expenses/{expenseId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow list: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow create: if isTenantMember(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid || isSuperAdmin();
      allow update: if isExistingOwner(resource.data.userId) || isSuperAdmin();
      allow delete: if isExistingOwner(resource.data.userId) || isSuperAdmin();
    }

    /**
     * @description Manages Income documents.
     * @path /incomes/{incomeId}
     * @allow Signed-in user (get) if they are a member of the tenant associated with the income.
     * @deny Non-signed-in user (any). Signed-in user (get) if they are not a member of the tenant.
     * @principle Restricts income access to tenant members.
     */
    match /incomes/{incomeId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow list: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow create: if isTenantMember(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid || isSuperAdmin();
      allow update: if isExistingOwner(resource.data.userId) || isSuperAdmin();
      allow delete: if isExistingOwner(resource.data.userId) || isSuperAdmin();
    }

    /**
     * @description Manages Budget documents.
     * @path /budgets/{budgetId}
     * @allow Signed-in user (get) if they are a member of the tenant associated with the budget.
     * @deny Non-signed-in user (any). Signed-in user (get) if they are not a member of the tenant.
     * @principle Restricts budget access to tenant members.
     */
    match /budgets/{budgetId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow list: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow create: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow update: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow delete: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
    }

    /**
     * @description Manages Alert documents.
     * @path /alerts/{alertId}
     * @allow Signed-in user (get) if they are a member of the tenant associated with the alert.
     * @deny Non-signed-in user (any). Signed-in user (get) if they are not a member of the tenant.
     * @principle Restricts alert access to tenant members.
     */
    match /alerts/{alertId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow list: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow create: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow update: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow delete: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
    }

    /**
     * @description Manages ReceiptRaw documents.
     * @path /receipts_raw/{receiptRawId}
     * @allow Signed-in user (get) if they are a member of the tenant associated with the receipt and they are the owner of the document.
     * @deny Non-signed-in user (any). Signed-in user (get) if they are not a member of the tenant or they are not the owner.
     * @principle Restricts receipt access to tenant members.
     */
    match /receipts_raw/{receiptRawId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow list: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow create: if isTenantMember(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid || isSuperAdmin();
      allow update: if isExistingOwner(resource.data.userId) || isSuperAdmin();
      allow delete: if isExistingOwner(resource.data.userId) || isSuperAdmin();
    }

    /**
     * @description Manages ReceiptFingerprint documents.
     * @path /receipts_fingerprints/{receiptFingerprintId}
     * @allow Signed-in user (get) if they are a member of the tenant associated with the receipt fingerprint.
     * @deny Non-signed-in user (any). Signed-in user (get) if they are not a member of the tenant.
     * @principle Restricts receipt fingerprint access to tenant members.
     */
    match /receipts_fingerprints/{receiptFingerprintId} {
      allow get: if isTenantMember(resource.data.id.split("_")[0]) || isSuperAdmin();
      allow list: if false; // Receipt fingerprints should never be listed
      allow create: if isTenantMember(resource.data.id.split("_")[0]) || isSuperAdmin();
      allow update: if isTenantMember(resource.data.id.split("_")[0]) || isSuperAdmin();
      allow delete: if isTenantMember(resource.data.id.split("_")[0]) || isSuperAdmin();
    }

    /**
     * @description Manages AuditLog documents.
     * @path /audit_logs/{auditLogId}
     * @allow Signed-in user (get) if they are a member of the tenant associated with the audit log.
     * @deny Non-signed-in user (any). Signed-in user (get) if they are not a member of the tenant.
     * @principle Restricts audit log access to tenant members.
     */
    match /audit_logs/{auditLogId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow list: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow create: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages Report documents.
     * @path /reports/{reportId}
     * @allow Signed-in user (get) if they are a member of the tenant associated with the report.
     * @deny Non-signed-in user (any). Signed-in user (get) if they are not a member of the tenant.
     */
    match /reports/{reportId} {
      allow get: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow list: if isTenantMember(resource.data.tenantId) || isSuperAdmin();
      allow create: if isTenantMember(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid || isSuperAdmin();
      allow update: if isTenantMember(resource.data.tenantId) && resource.data.userId == request.auth.uid || isSuperAdmin();
      allow delete: if isTenantMember(resource.data.tenantId) && resource.data.userId == request.auth.uid || isSuperAdmin();
    }
  }
}