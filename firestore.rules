/**
 * @fileoverview Firestore Security Rules for Ahorro Ya.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-tenant security model where users can only access data
 * within tenants they are members of. The rules leverage denormalized tenantId and
 * userId fields within documents to efficiently enforce authorization.
 *
 * Data Structure:
 * - /tenants/{tenantId}: Tenant information, owned by a specific user (ownerUid).
 * - /licenses/{licenseId}: License information, related to a tenant (tenantId).
 * - /memberships/{membershipId}: User membership information within a tenant (tenantId, uid, role).
 * - /users/{userId}: User profile data, accessible only by the user themselves.
 * - /currencies/{currencyCode}: Public currency data.
 * - /fx_rates/{fxRateId}: Exchange rates, specific to a tenant (tenantId).
 * - /categories/{categoryId}: Expense categories, specific to a tenant (tenantId).
 * - /subcategories/{subcategoryId}: Expense subcategories, specific to a tenant (tenantId).
 * - /entities/{entityId}: Business entities, specific to a tenant (tenantId).
 * - /expenses/{expenseId}: Expense records, specific to a tenant and user (tenantId, userId).
 * - /budgets/{budgetId}: Budget records, specific to a tenant (tenantId).
 * - /alerts/{alertId}: Alert notifications, specific to a tenant (tenantId).
 * - /receipts_raw/{receiptRawId}: Raw receipt data, specific to a tenant and user (tenantId, userId).
 * - /receipts_fingerprints/{receiptFingerprintId}: Receipt fingerprints for deduplication.
 * - /audit_logs/{auditLogId}: Audit logs, specific to a tenant (tenantId).
 *
 * Key Security Decisions:
 * - Users can only access their own user document.
 * - Most tenant-related data is accessible only to members of that tenant.
 * - Currency data is publicly readable.
 * - Data validation is limited to authorization-critical fields to allow for rapid iteration.
 * - Superadmin role can bypass certain restrictions (using `get()` call, consider using a dedicated roles collection in the future).
 *
 * Denormalization for Authorization:
 * - Most documents contain 'tenantId' to allow direct validation against user memberships.
 * - Expenses and receipts also include the 'userId' for path-based ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @path N/A
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @path N/A
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     * @path N/A
     */
    function isExistingOwner(userId) {
        return isSignedIn() && request.auth.uid == userId && resource.data.userId == userId;
    }

    /**
     * @description Checks if the authenticated user is a member of the specified tenant.
     * @path N/A
     */
    function isTenantMember(tenantId) {
        return exists(/databases/$(database)/documents/memberships/$(tenantId + "_" + request.auth.uid));
    }

    /**
     * @description Checks if the authenticated user is the owner of the specified tenant.
     * @path N/A
     */
    function isTenantOwner(tenantId) {
        return get(/databases/$(database)/documents/tenants/$(tenantId)).data.ownerUid == request.auth.uid;
    }

    /**
     * @description Checks if the authenticated user is a superadmin. This requires a `get()` call.
     * @path N/A
     */
    function isSuperadmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperadmin == true;
    }

    /**
     * @description Rules for the /tenants collection.
     * @path /tenants/{tenantId}
     */
    match /tenants/{tenantId} {
      allow get: if isSignedIn() && isTenantMember(tenantId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update: if isSignedIn() && isTenantOwner(tenantId);
      allow delete: if isSignedIn() && isTenantOwner(tenantId);
    }

    /**
     * @description Rules for the /licenses collection.
     * @path /licenses/{licenseId}
     */
    match /licenses/{licenseId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if false;
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Rules for the /memberships collection.
     * @path /memberships/{membershipId}
     */
    match /memberships/{membershipId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if false;
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /currencies collection.
     * @path /currencies/{currencyCode}
     */
    match /currencies/{currencyCode} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin validation if needed
    }

    /**
     * @description Rules for the /fx_rates collection.
     * @path /fx_rates/{fxRateId}
     */
    match /fx_rates/{fxRateId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if false;
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Rules for the /categories collection.
     * @path /categories/{categoryId}
     */
    match /categories/{categoryId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if false;
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Rules for the /subcategories collection.
     * @path /subcategories/{subcategoryId}
     */
    match /subcategories/{subcategoryId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
       allow list: if false;
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Rules for the /entities collection.
     * @path /entities/{entityId}
     */
    match /entities/{entityId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
       allow list: if false;
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Rules for the /expenses collection.
     * @path /expenses/{expenseId}
     */
    match /expenses/{expenseId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId);
      allow list: if false;
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) && request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Rules for the /budgets collection.
     * @path /budgets/{budgetId}
     */
    match /budgets/{budgetId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
       allow list: if false;
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Rules for the /alerts collection.
     * @path /alerts/{alertId}
     */
    match /alerts/{alertId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
       allow list: if false;
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Rules for the /receipts_raw collection.
     * @path /receipts_raw/{receiptRawId}
     */
    match /receipts_raw/{receiptRawId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId) && isOwner(resource.data.userId);
       allow list: if false;
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) && request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Rules for the /receipts_fingerprints collection.
     * @path /receipts_fingerprints/{receiptFingerprintId}
     */
    match /receipts_fingerprints/{receiptFingerprintId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
       allow list: if false;
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Rules for the /audit_logs collection.
     * @path /audit_logs/{auditLogId}
     */
    match /audit_logs/{auditLogId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
       allow list: if false;
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(resource.data.tenantId);
    }
  }
}