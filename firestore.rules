/**
 * @fileoverview Firestore Security Rules for "Ahorro Ya," a multi-tenant expense tracking application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict multi-tenant security model where users can only access data
 * belonging to tenants they are members of. The rules leverage denormalized tenant IDs and
 * user IDs within documents to achieve authorization independence, avoiding costly `get()` calls.
 *
 * Data Structure:
 * - /tenants/{tenantId}: Represents a tenant. Includes ownerUid.
 * - /licenses/{licenseId}: Represents a license for a tenant, includes tenantId.
 * - /memberships/{membershipId}: Represents a user's membership in a tenant. Includes tenantId, uid, and role.
 * - /users/{userId}: Represents a user. Includes isSuperadmin.
 * - /currencies/{currencyCode}: Represents a currency.
 * - /fx_rates/{fxRateId}: Represents a foreign exchange rate. Includes tenantId.
 * - /categories/{categoryId}: Represents an expense category. Includes tenantId.
 * - /subcategories/{subcategoryId}: Represents an expense subcategory. Includes tenantId.
 * - /entities/{entityId}: Represents a business or bank entity. Includes tenantId.
 * - /expenses/{expenseId}: Represents an expense record. Includes tenantId and userId.
 * - /budgets/{budgetId}: Represents a monthly budget. Includes tenantId.
 * - /alerts/{alertId}: Represents an alert notification. Includes tenantId.
 * - /receipts_raw/{receiptRawId}: Represents raw OCR data from a receipt. Includes tenantId and userId.
 * - /receipts_fingerprints/{receiptFingerprintId}: Represents a fingerprint used for deduplicating receipts.
 * - /audit_logs/{auditLogId}: Represents an audit log entry. Includes tenantId.
 *
 * Key Security Decisions:
 * - Strict Tenant Isolation: All tenant-related data is isolated by tenantId, preventing cross-tenant access.
 * - Owner-Based Access: Tenant owners have full control over their tenant data.
 * - Membership-Based Access: Access to tenant data is granted based on explicit membership records.
 * - No User Listing: Listing of users is generally disallowed, except for superadmins (requires get() call).
 * - Read-Only Currencies: The /currencies collection is intended to be publicly readable.
 *
 * Denormalization for Authorization:
 * - Most documents include a tenantId field to quickly determine tenant association.
 * - Expenses and ReceiptRaws include both tenantId and userId for ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows reading and writing to currencies collection if unauthenticated, but no deleting.
     * @path /currencies/{currencyCode}
     * @allow (get, list): Unauthenticated user reading currency data.
     * @allow (create, update): Never.
     * @deny (delete): Never.
     * @principle Public read access for currency data, no writes allowed.
     */
    match /currencies/{currencyCode} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants the tenant owner full access to their tenant document.
     * @path /tenants/{tenantId}
     * @allow (get, list): Tenant owner can read tenant data.
     * @allow (create, update, delete): Tenant owner can create, update and delete tenant data.
     * @deny (get, list): Any user trying to read another tenant's data.
     * @deny (create, update, delete): Any user trying to modify another tenant's data.
     * @principle Enforces document ownership for all operations.
     */
    match /tenants/{tenantId} {
      allow get: if isSignedIn() && isTenantOwner(tenantId, request.auth.uid);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.ownerUid;
      allow update: if isSignedIn() && isTenantOwner(tenantId, request.auth.uid);
      allow delete: if isSignedIn() && isTenantOwner(tenantId, request.auth.uid);
    }

    /**
     * @description Grants the tenant owner full access to their tenant license.
     * @path /licenses/{licenseId}
     * @allow (get, list): Tenant owner can read tenant license data.
     * @allow (create, update, delete): Tenant owner can create, update and delete tenant license data.
     * @deny (get, list): Any user trying to read another tenant's license data.
     * @deny (create, update, delete): Any user trying to modify another tenant's license data.
     * @principle Enforces document ownership for all operations.
     */
    match /licenses/{licenseId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId, request.auth.uid);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
    }

    /**
     * @description Allows a user to read their own membership, and admins to manage all memberships.
     * @path /memberships/{membershipId}
     * @allow (get): User can read their own membership or admin can read any.
     * @allow (list): Admin can list all memberships.
     * @allow (create): User can create their own membership or admin can create any.
     * @allow (update): User can update their own membership or admin can update any.
     * @allow (delete): User can delete their own membership or admin can delete any.
     * @deny (get): User trying to read another user's membership.
     * @deny (create, update, delete): User trying to modify another user's membership.
     * @principle Enforces document ownership for non-admins.
     */
    match /memberships/{membershipId} {
      allow get: if isSignedIn() && (isMembershipOwner(resource.data.uid, request.auth.uid) || isTenantAdmin(resource.data.tenantId, request.auth.uid));
      allow list: if isSignedIn() && isTenantAdmin(resource.data.tenantId, request.auth.uid);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId, request.auth.uid);
      allow update: if isSignedIn() && (isMembershipOwner(resource.data.uid, request.auth.uid) || isTenantAdmin(resource.data.tenantId, request.auth.uid));
      allow delete: if isSignedIn() && (isMembershipOwner(resource.data.uid, request.auth.uid) || isTenantAdmin(resource.data.tenantId, request.auth.uid));
    }

    /**
     * @description Grants the user full access to their own user document.
     * @path /users/{userId}
     * @allow (get, list): User can read their own user data.
     * @allow (create, update, delete): User can create, update and delete their own user data.
     * @deny (get, list): Any user trying to read another user's data.
     * @deny (create, update, delete): Any user trying to modify another user's data.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants access to fx_rates based on tenant membership.
     * @path /fx_rates/{fxRateId}
     * @allow (get, list): Tenant member can read fx_rates data.
     * @allow (create, update, delete): Tenant member can create, update and delete fx_rates data.
     * @deny (get, list): Any user trying to read another tenant's fx_rates data.
     * @deny (create, update, delete): Any user trying to modify another tenant's fx_rates data.
     * @principle Tenant members have full access to fx_rates.
     */
    match /fx_rates/{fxRateId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId, request.auth.uid);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
    }

    /**
     * @description Grants access to categories based on tenant membership.
     * @path /categories/{categoryId}
     * @allow (get, list): Tenant member can read categories data.
     * @allow (create, update, delete): Tenant member can create, update and delete categories data.
     * @deny (get, list): Any user trying to read another tenant's categories data.
     * @deny (create, update, delete): Any user trying to modify another tenant's categories data.
     * @principle Tenant members have full access to categories.
     */
    match /categories/{categoryId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId, request.auth.uid);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
    }

    /**
     * @description Grants access to subcategories based on tenant membership.
     * @path /subcategories/{subcategoryId}
     * @allow (get, list): Tenant member can read subcategories data.
     * @allow (create, update, delete): Tenant member can create, update and delete subcategories data.
     * @deny (get, list): Any user trying to read another tenant's subcategories data.
     * @deny (create, update, delete): Any user trying to modify another tenant's subcategories data.
     * @principle Tenant members have full access to subcategories.
     */
    match /subcategories/{subcategoryId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId, request.auth.uid);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
    }

    /**
     * @description Grants access to entities based on tenant membership.
     * @path /entities/{entityId}
     * @allow (get, list): Tenant member can read entities data.
     * @allow (create, update, delete): Tenant member can create, update and delete entities data.
     * @deny (get, list): Any user trying to read another tenant's entities data.
     * @deny (create, update, delete): Any user trying to modify another tenant's entities data.
     * @principle Tenant members have full access to entities.
     */
    match /entities/{entityId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId, request.auth.uid);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
    }

    /**
     * @description Grants access to expenses based on tenant membership and user ownership.
     * @path /expenses/{expenseId}
     * @allow (get, list): Tenant member can read expenses data.
     * @allow (create, update, delete): Tenant member can create, update and delete expenses data.
     * @deny (get, list): Any user trying to read another tenant's expenses data.
     * @deny (create, update, delete): Any user trying to modify another tenant's expenses data.
     * @principle Tenant members have full access to expenses.
     */
    match /expenses/{expenseId} {
      allow get: if isSignedIn() && isExpenseOwner(resource.data.tenantId, resource.data.userId, request.auth.uid);
      allow list: if isSignedIn() && isExpenseOwner(resource.data.tenantId, resource.data.userId, request.auth.uid);
      allow create: if isSignedIn() && isExpenseOwner(request.resource.data.tenantId, request.resource.data.userId, request.auth.uid);
      allow update: if isSignedIn() && isExpenseOwner(resource.data.tenantId, resource.data.userId, request.auth.uid);
      allow delete: if isSignedIn() && isExpenseOwner(resource.data.tenantId, resource.data.userId, request.auth.uid);
    }

    /**
     * @description Grants access to budgets based on tenant membership.
     * @path /budgets/{budgetId}
     * @allow (get, list): Tenant member can read budgets data.
     * @allow (create, update, delete): Tenant member can create, update and delete budgets data.
     * @deny (get, list): Any user trying to read another tenant's budgets data.
     * @deny (create, update, delete): Any user trying to modify another tenant's budgets data.
     * @principle Tenant members have full access to budgets.
     */
    match /budgets/{budgetId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId, request.auth.uid);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
    }

    /**
     * @description Grants access to alerts based on tenant membership.
     * @path /alerts/{alertId}
     * @allow (get, list): Tenant member can read alerts data.
     * @allow (create, update, delete): Tenant member can create, update and delete alerts data.
     * @deny (get, list): Any user trying to read another tenant's alerts data.
     * @deny (create, update, delete): Any user trying to modify another tenant's alerts data.
     * @principle Tenant members have full access to alerts.
     */
    match /alerts/{alertId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId, request.auth.uid);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
    }

    /**
     * @description Grants access to receipt_raws based on tenant membership and user ownership.
     * @path /receipts_raw/{receiptRawId}
     * @allow (get, list): Tenant member can read receipt_raws data.
     * @allow (create, update, delete): Tenant member can create, update and delete receipt_raws data.
     * @deny (get, list): Any user trying to read another tenant's receipt_raws data.
     * @deny (create, update, delete): Any user trying to modify another tenant's receipt_raws data.
     * @principle Tenant members have full access to receipt_raws.
     */
    match /receipts_raw/{receiptRawId} {
      allow get: if isSignedIn() && isReceiptRawOwner(resource.data.tenantId, resource.data.userId, request.auth.uid);
      allow list: if isSignedIn() && isReceiptRawOwner(resource.data.tenantId, resource.data.userId, request.auth.uid);
      allow create: if isSignedIn() && isReceiptRawOwner(request.resource.data.tenantId, request.resource.data.userId, request.auth.uid);
      allow update: if isSignedIn() && isReceiptRawOwner(resource.data.tenantId, resource.data.userId, request.auth.uid);
      allow delete: if isSignedIn() && isReceiptRawOwner(resource.data.tenantId, resource.data.userId, request.auth.uid);
    }

    /**
     * @description Public read-only access to receipt fingerprints for deduplication, with no write access.
     * @path /receipts_fingerprints/{receiptFingerprintId}
     * @allow (get, list): Any user can check for existing receipt fingerprints.
     * @deny (create, update, delete): No one can create, update, or delete receipt fingerprints through the client.
     * @principle Public read, owner-only writes (handled by backend functions).
     */
    match /receipts_fingerprints/{receiptFingerprintId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants access to audit_logs based on tenant membership.
     * @path /audit_logs/{auditLogId}
     * @allow (get, list): Tenant member can read audit_logs data.
     * @allow (create, update, delete): Tenant member can create, update and delete audit_logs data.
     * @deny (get, list): Any user trying to read another tenant's audit_logs data.
     * @deny (create, update, delete): Any user trying to modify another tenant's audit_logs data.
     * @principle Tenant members have full access to audit_logs.
     */
    match /audit_logs/{auditLogId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
      allow list: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId, request.auth.uid);
      allow update: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
      allow delete: if isSignedIn() && isTenantMember(resource.data.tenantId, request.auth.uid);
    }

    // ---- Helper functions ----

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isTenantOwner(tenantId, userId) {
      return get(/databases/$(database)/documents/tenants/$(tenantId)).data.ownerUid == userId;
    }

    function isTenantMember(tenantId, userId) {
        return exists(/databases/$(database)/documents/memberships/$(tenantId)_$(userId));
    }

    function isTenantAdmin(tenantId, userId) {
      return get(/databases/$(database)/documents/memberships/$(tenantId)_$(userId)).data.role == 'admin';
    }

    function isMembershipOwner(membershipUid, userId) {
      return membershipUid == userId;
    }

    function isExpenseOwner(tenantId, expenseUserId, userId) {
      return isTenantMember(tenantId, userId) && expenseUserId == userId;
    }

    function isReceiptRawOwner(tenantId, receiptRawUserId, userId) {
      return isTenantMember(tenantId, userId) && receiptRawUserId == userId;
    }
  }
}