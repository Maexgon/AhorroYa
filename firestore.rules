/**
 * @fileoverview Firestore Security Rules for "Ahorro Ya," a multi-tenant expense tracking application.
 *
 * Core Philosophy: This ruleset enforces a strict multi-tenant data isolation model.
 *  Each tenant's data is segregated, and users can only access data within tenants
 *  where they have a defined membership.  User data is protected by ownership.
 *
 * Data Structure:
 * - /tenants/{tenantId}: Root for tenant-specific data. 'ownerUid' field determines ownership.
 * - /licenses/{licenseId}: Stores tenant licenses, linked by 'tenantId'.
 * - /memberships/{membershipId}: Defines user roles ('owner', 'admin', 'member') within tenants, linking 'tenantId' and 'uid'.
 * - /users/{userId}: Stores user profile data, with 'uid' matching the Firebase auth UID. 'isSuperadmin' enables bypass.
 * - /{collection}/{documentId}: Tenant-owned data, including 'tenantId' for filtering.
 *
 * Key Security Decisions:
 * - Explicitly deny global listing of tenants.
 * - Superadmin role enables bypass for most checks via `isSuperadmin()` function, but requires `get()` calls.
 * - Enforce ownership and tenant membership for all writes.
 * - Data validation is relaxed in this prototyping phase.
 *
 * Denormalization for Authorization:
 * - The 'tenantId' field is present in most collections to avoid `get()` calls and enable tenant-level data isolation.
 * - The 'ownerUid' field is denormalized in the `tenants` collection to quickly check ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data.uid == userId;
    }

    function isSuperadmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperadmin == true;
    }

    function getTenantId() {
        return get(/databases/$(database)/documents/memberships/$(request.auth.uid)).data.tenantId;
    }

    function belongsToTenant(tenantId) {
      return isSignedIn() && (resource.data.tenantId == tenantId);
    }

    function isTenantMember(tenantId) {
        return exists(/databases/$(database)/documents/memberships/$(request.auth.uid))
               && get(/databases/$(database)/documents/memberships/$(request.auth.uid)).data.tenantId == tenantId;
    }

    /**
     * @description Controls access to the /tenants collection. Tenants can only be accessed by ID.
     * @path /tenants/{tenantId}
     * @allow (get) User with membership can read a tenant's document.
     * @deny (list) Prevents listing all tenants.
     * @deny (create) Prevents creating a tenant without proper authorization.
     * @principle Enforces tenant-level data isolation and prevents unauthorized listing of tenants.
     */
    match /tenants/{tenantId} {
      allow get: if isSignedIn() && isTenantMember(tenantId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/tenants/$(tenantId)).data.ownerUid == request.auth.uid;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/tenants/$(tenantId)).data.ownerUid == request.auth.uid;
    }

    /**
     * @description Controls access to the /licenses collection. Licenses are linked to tenants.
     * @path /licenses/{licenseId}
     * @allow (get) User with membership can read a license document.
     * @allow (list) No direct listing.
     * @allow (create) No general access.
     * @deny (update) Prevents license update without proper authorization.
     * @deny (delete) Prevents license deletion without proper authorization.
     * @principle Enforces tenant-level data isolation and prevents unauthorized modification of licenses.
     */
    match /licenses/{licenseId} {
      allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow list: if false;
      allow create: if isSignedIn() && isSuperadmin();
      allow update: if isSignedIn() && isSuperadmin();
      allow delete: if isSignedIn() && isSuperadmin();
    }

    /**
     * @description Controls access to the /memberships collection. Memberships define user roles within tenants.
     * @path /memberships/{membershipId}
     * @allow (get) User can get their own membership.
     * @allow (list) No direct listing.
     * @allow (create) No general access.
     * @deny (update) Prevents membership update without proper authorization.
     * @deny (delete) Prevents membership deletion without proper authorization.
     * @principle Enforces tenant-level data isolation and prevents unauthorized modification of memberships.
     */
    match /memberships/{membershipId} {
      allow get: if isSignedIn() && request.auth.uid == membershipId;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.uid;
      allow update: if isSignedIn() && request.auth.uid == get(/databases/$(database)/documents/memberships/$(membershipId)).data.uid || isSuperadmin();
      allow delete: if isSignedIn() && isSuperadmin();
    }

    /**
     * @description Controls access to the /users collection. Users can only access their own profile data.
     * @path /users/{userId}
     * @allow (get) User can read their own profile data.
     * @allow (list) No listing of all users.
     * @allow (create) User can create their own profile.
     * @deny (update) Prevents user profile update without being the owner.
     * @deny (delete) Prevents user profile deletion without being the owner.
     * @principle Enforces user-level data isolation and prevents unauthorized access to user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) || isSuperadmin();
    }

    /**
     * @description Controls access to the /currencies collection. Public read-only access.
     * @path /currencies/{currencyCode}
     * @allow (get) Allows public read access to currency data.
     * @allow (list) Allows public listing of currency data.
     * @deny (create) Prevents currency creation.
     * @deny (update) Prevents currency updates.
     * @deny (delete) Prevents currency deletion.
     * @principle Provides public access to currency information while restricting write operations.
     */
    match /currencies/{currencyCode} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    function isTenantDocument() {
        return 'tenantId' in resource.data;
    }

    /**
     * @description Controls access to the /fx_rates collection. FxRates are linked to tenants.
     * @path /fx_rates/{fxRateId}
     */
    match /fx_rates/{fxRateId} {
        allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
        allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) || isSuperadmin();
        allow update: if isSignedIn() && isTenantMember(resource.data.tenantId) || isSuperadmin();
        allow delete: if isSignedIn() && isSuperadmin();
        allow list: if false;
    }

    /**
     * @description Controls access to the /categories collection. Categories are linked to tenants.
     * @path /categories/{categoryId}
     */
    match /categories/{categoryId} {
        allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
        allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) || isSuperadmin();
        allow update: if isSignedIn() && isTenantMember(resource.data.tenantId) || isSuperadmin();
        allow delete: if isSignedIn() && isSuperadmin();
        allow list: if false;
    }

    /**
     * @description Controls access to the /subcategories collection. Subcategories are linked to tenants.
     * @path /subcategories/{subcategoryId}
     */
    match /subcategories/{subcategoryId} {
        allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
        allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) || isSuperadmin();
        allow update: if isSignedIn() && isTenantMember(resource.data.tenantId) || isSuperadmin();
        allow delete: if isSignedIn() && isSuperadmin();
        allow list: if false;
    }

    /**
     * @description Controls access to the /entities collection. Entities are linked to tenants.
     * @path /entities/{entityId}
     */
    match /entities/{entityId} {
        allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
        allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) || isSuperadmin();
        allow update: if isSignedIn() && isTenantMember(resource.data.tenantId) || isSuperadmin();
        allow delete: if isSignedIn() && isSuperadmin();
        allow list: if false;
    }

    /**
     * @description Controls access to the /expenses collection. Expenses are linked to tenants and users.
     * @path /expenses/{expenseId}
     */
    match /expenses/{expenseId} {
        allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
        allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) || isSuperadmin();
        allow update: if isSignedIn() && isTenantMember(resource.data.tenantId) || isSuperadmin();
        allow delete: if isSignedIn() && isSuperadmin();
        allow list: if false;
    }

    /**
     * @description Controls access to the /budgets collection. Budgets are linked to tenants.
     * @path /budgets/{budgetId}
     */
    match /budgets/{budgetId} {
        allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
        allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) || isSuperadmin();
        allow update: if isSignedIn() && isTenantMember(resource.data.tenantId) || isSuperadmin();
        allow delete: if isSignedIn() && isSuperadmin();
        allow list: if false;
    }

    /**
     * @description Controls access to the /alerts collection. Alerts are linked to tenants.
     * @path /alerts/{alertId}
     */
    match /alerts/{alertId} {
        allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
        allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) || isSuperadmin();
        allow update: if isSignedIn() && isTenantMember(resource.data.tenantId) || isSuperadmin();
        allow delete: if isSignedIn() && isSuperadmin();
        allow list: if false;
    }

    /**
     * @description Controls access to the /receipts_raw collection. ReceiptsRaw are linked to tenants and users.
     * @path /receipts_raw/{receiptRawId}
     */
    match /receipts_raw/{receiptRawId} {
        allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
        allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) || isSuperadmin();
        allow update: if isSignedIn() && isTenantMember(resource.data.tenantId) || isSuperadmin();
        allow delete: if isSignedIn() && isSuperadmin();
        allow list: if false;
    }

    /**
     * @description Controls access to the /receipts_fingerprints collection. ReceiptsFingerprints are linked to tenants.
     * @path /receipts_fingerprints/{receiptFingerprintId}
     */
    match /receipts_fingerprints/{receiptFingerprintId} {
        allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
        allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) || isSuperadmin();
        allow update: if isSignedIn() && isTenantMember(resource.data.tenantId) || isSuperadmin();
        allow delete: if isSignedIn() && isSuperadmin();
        allow list: if false;
    }

    /**
     * @description Controls access to the /audit_logs collection. AuditLogs are linked to tenants.
     * @path /audit_logs/{auditLogId}
     */
    match /audit_logs/{auditLogId} {
        allow get: if isSignedIn() && isTenantMember(resource.data.tenantId);
        allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) || isSuperadmin();
        allow update: if isSignedIn() && isTenantMember(resource.data.tenantId) || isSuperadmin();
        allow delete: if isSignedIn() && isSuperadmin();
        allow list: if false;
    }
  }
}