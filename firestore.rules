/**
 * @file Firestore Security Rules for Ahorro Ya
 * @description This ruleset enforces a multi-tenant security model, restricting data access based on user roles and tenant ownership.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-tenant security model where users can only access data associated with Tenants they are members of.
 * Data is isolated at the tenant level.
 *
 * Data Structure:
 * - /tenants/{tenantId}: Stores tenant information. Each tenant has an owner (ownerUid).
 * - /licenses/{licenseId}: Stores license information, each associated with a tenant.
 * - /memberships/{membershipId}: Tracks user memberships in tenants and their roles (owner, admin, member).
 * - /users/{userId}: Stores user profile data.
 * - /currencies/{currencyCode}: Stores currency data (public read).
 * - /fx_rates/{fxRateId}: Stores foreign exchange rates, associated with a tenant.
 * - /categories/{categoryId}: Stores expense categories, associated with a tenant.
 * - /subcategories/{subcategoryId}: Stores expense subcategories, associated with a tenant.
 * - /entities/{entityId}: Stores business/bank entities, associated with a tenant.
 * - /expenses/{expenseId}: Stores expense records, associated with a tenant and user.
 * - /budgets/{budgetId}: Stores budget data, associated with a tenant.
 * - /alerts/{alertId}: Stores alert notifications, associated with a tenant.
 * - /receipts_raw/{receiptRawId}: Stores raw OCR receipt data, associated with a tenant and user.
 * - /receipts_fingerprints/{receiptFingerprintId}: Stores receipt fingerprints for deduplication.
 * - /audit_logs/{auditLogId}: Stores audit log entries, associated with a tenant.
 *
 * Key Security Decisions:
 * - Strict tenant isolation: Users can only access data within tenants they are members of.
 * - Ownership enforcement: Certain operations (e.g., creating a tenant) are restricted to the authenticated user.
 * - Superadmin bypass: Superadmins (users with isSuperadmin=true) can bypass tenant-level restrictions (TODO: Refactor with /roles_superadmin/{userId} collection).
 * - Public read access to Currencies collection.
 * - No public listing of any private data.
 *
 * Denormalization for Authorization:
 * - Most documents include a tenantId field, enabling efficient tenant-based filtering and authorization.
 * - Expenses and Receipts also include userId for ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @path N/A
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the resource's owner ID.
     * @path N/A
     */
    function isResourceOwner(resourceOwnerId) {
        return isSignedIn() && request.auth.uid == resourceOwnerId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the tenant.
     * @path N/A
     */
    function isTenantOwner(tenantId) {
      return isSignedIn() && get(/databases/$(database)/documents/tenants/$(tenantId)).data.ownerUid == request.auth.uid;
    }

    /**
     * @description Checks if the document exists and the user is the owner.
     * @path N/A
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is a superadmin.
     * @path N/A
     */
    function isSuperAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperadmin == true;
    }

    /**
     * @description Checks if the tenant exists.
     */
    function tenantExists(tenantId) {
      return exists(/databases/$(database)/documents/tenants/$(tenantId));
    }

    /**
     * @description Checks if the user is a member of the tenant.
     */
    function isTenantMember(tenantId) {
       return isSignedIn() && exists(/databases/$(database)/documents/memberships/$(tenantId)_$(request.auth.uid));
    }

    /**
     * @description Rules for the /tenants collection
     * @path /tenants/{tenantId}
     */
    match /tenants/{tenantId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if isTenantOwner(tenantId);
    }

    /**
     * @description Rules for the /licenses collection
     * @path /licenses/{licenseId}
     */
    match /licenses/{licenseId} {
      allow get: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/licenses/$(licenseId)).data.tenantId);
      allow list: if isSignedIn() && true; // Listing requires its own tenant filtering logic
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && isTenantOwner(get(/databases/$(database)/documents/licenses/$(licenseId)).data.tenantId);
    }

    /**
     * @description Rules for the /memberships collection
     * @path /memberships/{membershipId}
     */
    match /memberships/{membershipId} {
      allow get: if isSignedIn() && get(/databases/$(database)/documents/memberships/$(membershipId)).data.uid == request.auth.uid;
      allow list: if isSignedIn() && true; // Listing requires its own tenant filtering logic
      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && isTenantOwner(get(/databases/$(database)/documents/memberships/$(membershipId)).data.tenantId);
    }

    /**
     * @description Rules for the /users collection
     * @path /users/{userId}
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /currencies collection
     * @path /currencies/{currencyCode}
     */
    match /currencies/{currencyCode} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /fx_rates collection
     * @path /fx_rates/{fxRateId}
     */
    match /fx_rates/{fxRateId} {
      allow get: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/fx_rates/$(fxRateId)).data.tenantId);
      allow list: if isSignedIn() && true; // Listing requires its own tenant filtering logic
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/fx_rates/$(fxRateId)).data.tenantId);
    }

    /**
     * @description Rules for the /categories collection
     * @path /categories/{categoryId}
     */
    match /categories/{categoryId} {
      allow get: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/categories/$(categoryId)).data.tenantId);
      allow list: if isSignedIn() && true; // Listing requires its own tenant filtering logic
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/categories/$(categoryId)).data.tenantId);
    }

    /**
     * @description Rules for the /subcategories collection
     * @path /subcategories/{subcategoryId}
     */
    match /subcategories/{subcategoryId} {
      allow get: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/subcategories/$(subcategoryId)).data.tenantId);
      allow list: if isSignedIn() && true; // Listing requires its own tenant filtering logic
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/subcategories/$(subcategoryId)).data.tenantId);
    }

    /**
     * @description Rules for the /entities collection
     * @path /entities/{entityId}
     */
    match /entities/{entityId} {
      allow get: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/entities/$(entityId)).data.tenantId);
      allow list: if isSignedIn() && true; // Listing requires its own tenant filtering logic
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/entities/$(entityId)).data.tenantId);
    }

    /**
     * @description Rules for the /expenses collection
     * @path /expenses/{expenseId}
     */
    match /expenses/{expenseId} {
      allow get: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/expenses/$(expenseId)).data.tenantId) && isResourceOwner(get(/databases/$(database)/documents/expenses/$(expenseId)).data.userId);
      allow list: if isSignedIn() && true; // Listing requires its own tenant filtering logic
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/expenses/$(expenseId)).data.tenantId) && isResourceOwner(get(/databases/$(database)/documents/expenses/$(expenseId)).data.userId);
    }

    /**
     * @description Rules for the /budgets collection
     * @path /budgets/{budgetId}
     */
    match /budgets/{budgetId} {
      allow get: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/budgets/$(budgetId)).data.tenantId);
      allow list: if isSignedIn() && true; // Listing requires its own tenant filtering logic
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/budgets/$(budgetId)).data.tenantId);
    }

    /**
     * @description Rules for the /alerts collection
     * @path /alerts/{alertId}
     */
    match /alerts/{alertId} {
      allow get: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/alerts/$(alertId)).data.tenantId);
      allow list: if isSignedIn() && true; // Listing requires its own tenant filtering logic
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/alerts/$(alertId)).data.tenantId);
    }

    /**
     * @description Rules for the /receipts_raw collection
     * @path /receipts_raw/{receiptRawId}
     */
    match /receipts_raw/{receiptRawId} {
      allow get: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/receipts_raw/$(receiptRawId)).data.tenantId) && isResourceOwner(get(/databases/$(database)/documents/receipts_raw/$(receiptRawId)).data.userId);
      allow list: if isSignedIn() && true; // Listing requires its own tenant filtering logic
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/receipts_raw/$(receiptRawId)).data.tenantId) && isResourceOwner(get(/databases/$(database)/documents/receipts_raw/$(receiptRawId)).data.userId);
    }

    /**
     * @description Rules for the /receipts_fingerprints collection
     * @path /receipts_fingerprints/{receiptFingerprintId}
     */
    match /receipts_fingerprints/{receiptFingerprintId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /audit_logs collection
     * @path /audit_logs/{auditLogId}
     */
    match /audit_logs/{auditLogId} {
      allow get: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/audit_logs/$(auditLogId)).data.tenantId);
      allow list: if isSignedIn() && true; // Listing requires its own tenant filtering logic
      allow create, update, delete: if false;
    }
  }
}