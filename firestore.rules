/**
 * @fileoverview Firestore Security Rules for "Ahorro Ya," a multi-tenant expense tracking application.
 *
 * Core Philosophy: This ruleset enforces a strict, multi-tenant data isolation model. Users can only access data belonging to tenants they are members of. User profiles are private and only accessible to the authenticated user.
 *
 * Data Structure:
 * - /tenants/{tenantId}: Root-level collection for tenants. 'ownerUid' field denotes the tenant owner.
 * - /licenses/{licenseId}: Root-level collection for tenant licenses. 'tenantId' links to the tenant.
 * - /memberships/{membershipId}: Root-level collection for user memberships within tenants. 'tenantId' and 'uid' link to the respective tenant and user. 'role' defines the user's role within the tenant.
 * - /users/{userId}: Root-level collection for user profiles. The 'uid' field matches the Firebase Authentication UID.
 * - /currencies/{currencyCode}: Root-level collection for currencies. This collection is assumed to be globally readable.
 * - /fx_rates/{fxRateId}: Root-level collection for FX rates. 'tenantId' field links to the tenant.
 * - /categories/{categoryId}: Root-level collection for expense categories. 'tenantId' field links to the tenant.
 * - /subcategories/{subcategoryId}: Root-level collection for expense subcategories. 'tenantId' field links to the tenant.
 * - /entities/{entityId}: Root-level collection for business/bank entities. 'tenantId' field links to the tenant.
 * - /expenses/{expenseId}: Root-level collection for expense records. 'tenantId' and `userId` fields link to the tenant and user who created the expense.
 * - /budgets/{budgetId}: Root-level collection for budget records. 'tenantId' field links to the tenant.
 * - /alerts/{alertId}: Root-level collection for alerts. 'tenantId' field links to the tenant.
 * - /receipts_raw/{receiptRawId}: Root-level collection for raw receipt data. 'tenantId' and `userId` fields link to the tenant and user who uploaded the receipt.
 * - /receipts_fingerprints/{receiptFingerprintId}: Root-level collection for receipt fingerprints.
 * - /audit_logs/{auditLogId}: Root-level collection for audit logs. 'tenantId' field links to the tenant.
 *
 * Key Security Decisions:
 * - Listing Tenants: Listing the `tenants` collection is denied to all users. Tenant visibility is managed through user memberships.
 * - User Listing Disabled: Listing of users is not allowed.
 * - Currency Collection: Assumed to be a public collection, so is globally readable.
 *
 * Denormalization for Authorization:
 * - 'tenantId' is denormalized into most documents to avoid expensive `get()` calls for tenant membership checks.
 * - 'ownerUid' is denormalized into Tenant documents for simpler ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the resource, and that the resource exists.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Matches the /tenants/{tenantId} collection.
     * @path /tenants/{tenantId}
     * @allow (create) If the user's UID matches the 'ownerUid' in the document data.
     * @deny (create) If the user's UID does not match the 'ownerUid' in the document data.
     * @deny (list) No one can list tenants.
     * @principle Enforces tenant ownership.
     */
    match /tenants/{tenantId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerUid);
      allow delete: if isExistingOwner(resource.data.ownerUid);
    }

    /**
     * @description Matches the /licenses/{licenseId} collection.
     * @path /licenses/{licenseId}
     * @allow (create) If the user is signed in.  No further authorization implemented.
     * @deny (create) If the user is not signed in.
     * @principle Requires user to be signed in.
     */
    match /licenses/{licenseId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Matches the /memberships/{membershipId} collection.
     * @path /memberships/{membershipId}
     * @allow (create) If the user is signed in. No further authorization implemented.
     * @deny (create) If the user is not signed in.
     * @principle Requires user to be signed in.
     */
    match /memberships/{membershipId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Matches the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (get) If the user is the owner.
     * @allow (create) If the user's UID matches the document ID.
     * @deny (create) If the user's UID does not match the document ID.
     * @principle Enforces user ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Matches the /currencies/{currencyCode} collection.
     * @path /currencies/{currencyCode}
     * @allow (get, list) Public read access for currency data.
     */
    match /currencies/{currencyCode} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Matches the /fx_rates/{fxRateId} collection.
     * @path /fx_rates/{fxRateId}
     * @allow (create) If the user is signed in. No further authorization implemented.
     * @deny (create) If the user is not signed in.
     * @principle Requires user to be signed in.
     */
    match /fx_rates/{fxRateId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Matches the /categories/{categoryId} collection.
     * @path /categories/{categoryId}
     * @allow (create) If the user is signed in. No further authorization implemented.
     * @deny (create) If the user is not signed in.
     * @principle Requires user to be signed in.
     */
    match /categories/{categoryId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Matches the /subcategories/{subcategoryId} collection.
     * @path /subcategories/{subcategoryId}
     * @allow (create) If the user is signed in. No further authorization implemented.
     * @deny (create) If the user is not signed in.
     * @principle Requires user to be signed in.
     */
    match /subcategories/{subcategoryId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Matches the /entities/{entityId} collection.
     * @path /entities/{entityId}
     * @allow (create) If the user is signed in. No further authorization implemented.
     * @deny (create) If the user is not signed in.
     * @principle Requires user to be signed in.
     */
    match /entities/{entityId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Matches the /expenses/{expenseId} collection.
     * @path /expenses/{expenseId}
     * @allow (create) If the user is signed in. No further authorization implemented.
     * @deny (create) If the user is not signed in.
     * @principle Requires user to be signed in.
     */
    match /expenses/{expenseId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Matches the /budgets/{budgetId} collection.
     * @path /budgets/{budgetId}
     * @allow (create) If the user is signed in. No further authorization implemented.
     * @deny (create) If the user is not signed in.
     * @principle Requires user to be signed in.
     */
    match /budgets/{budgetId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Matches the /alerts/{alertId} collection.
     * @path /alerts/{alertId}
     * @allow (create) If the user is signed in. No further authorization implemented.
     * @deny (create) If the user is not signed in.
     * @principle Requires user to be signed in.
     */
    match /alerts/{alertId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Matches the /receipts_raw/{receiptRawId} collection.
     * @path /receipts_raw/{receiptRawId}
     * @allow (create) If the user is signed in. No further authorization implemented.
     * @deny (create) If the user is not signed in.
     * @principle Requires user to be signed in.
     */
    match /receipts_raw/{receiptRawId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Matches the /receipts_fingerprints/{receiptFingerprintId} collection.
     * @path /receipts_fingerprints/{receiptFingerprintId}
     * @allow (create) If the user is signed in. No further authorization implemented.
     * @deny (create) If the user is not signed in.
     * @principle Requires user to be signed in.
     */
    match /receipts_fingerprints/{receiptFingerprintId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Matches the /audit_logs/{auditLogId} collection.
     * @path /audit_logs/{auditLogId}
     * @allow (create) If the user is signed in. No further authorization implemented.
     * @deny (create) If the user is not signed in.
     * @principle Requires user to be signed in.
     */
    match /audit_logs/{auditLogId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}