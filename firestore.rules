rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @principle Verified Identity.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @principle Ownership.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource, and the resource exists.
     * @principle Ownership and Existence.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is a superadmin.
     * @principle Roles.
     */
    function isSuperadmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperadmin == true;
    }

    /**
     * @description Checks if the authenticated user is a member of the tenant, based on the tenantId.
     * @principle Shared Access (Closed Collaborators).
     */
    function isTenantMember(tenantId) {
      return isSignedIn() && exists(/databases/$(database)/documents/memberships/$(tenantId + "_" + request.auth.uid));
    }

    /**
     * @description Checks if the authenticated user is the owner of the tenant, based on the ownerUid in the tenant document.
     * @principle Ownership.
     */
    function isTenantOwner(ownerUid) {
      return isSignedIn() && request.auth.uid == ownerUid;
    }


    /**
     * @description Enforces access control for tenant documents.
     * @path /tenants/{tenantId}
     * @allow (create) Signed-in user creates a tenant with their UID as the ownerUid.
     * @allow (get, list) Any signed-in user can read tenant documents.
     * @deny (update, delete) Only the owner or a superadmin can modify or delete a tenant document.
     * @deny (create) If not signed in
     * @principle Enforces document ownership for writes.
     */
    match /tenants/{tenantId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if isSignedIn() && (isTenantOwner(resource.data.ownerUid) || isSuperadmin());
    }

    /**
     * @description Enforces access control for license documents.
     * @path /licenses/{licenseId}
     * @allow (create) A signed-in user can create a license associated with a tenant they are a member of.
     * @allow (get, list) Any signed-in user can read license documents associated with a tenant they are a member of.
     * @deny (update, delete) Only the owner or a superadmin can modify or delete a license document.
     * @deny (create) If not signed in
     * @principle Enforces tenant membership for access.
     */
    match /licenses/{licenseId} {
      allow get, list: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/licenses/$(licenseId)).data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && (isTenantOwner(get(/databases/$(database)/documents/tenants/$(resource.data.tenantId)).data.ownerUid) || isSuperadmin());
    }

    /**
     * @description Enforces access control for membership documents.
     * @path /memberships/{membershipId}
     * @allow (create) A signed-in user can create a membership associated with a tenant they are a member of and if the user id is equal to the authenticated user id.
     * @allow (get, list) Any signed-in user can read membership documents.
     * @deny (update, delete) Only the tenant owner or a superadmin can modify or delete a membership document.
     * @deny (create) If not signed in or if the user id is not equal to the authenticated user id.
     * @principle Enforces tenant membership for access.
     */
    match /memberships/{membershipId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid && isTenantMember(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && (isTenantOwner(get(/databases/$(database)/documents/tenants/$(request.resource.data.tenantId)).data.ownerUid) || isSuperadmin());
    }

    /**
     * @description Enforces access control for user documents.
     * @path /users/{userId}
     * @allow (create) A signed-in user can create their own user document.
     * @allow (get) A signed-in user can read their own user document.
     * @allow (update) A signed-in user can update their own user document.
     * @allow (list) Denied globally.
     * @deny (delete) Only the user themselves or a superadmin can delete their user document.
     * @principle Enforces document ownership for access.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if (isOwner(userId) || isSuperadmin());
    }

    /**
     * @description Allows public read access to currency documents, but restricts writes.
     * @path /currencies/{currencyCode}
     * @allow (get, list) Public read access for all users.
     * @deny (create, update, delete) No write access allowed.
     * @principle Public Read with Owner-Only Writes (No owner defined, so writes are disabled)
     */
    match /currencies/{currencyCode} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces access control for FX rate documents.
     * @path /fx_rates/{fxRateId}
     * @allow (create) A signed-in user can create an FX rate associated with a tenant they are a member of.
     * @allow (get, list) Any signed-in user can read FX rate documents associated with a tenant they are a member of.
     * @deny (update, delete) Only the owner or a superadmin can modify or delete an FX rate document.
     * @deny (create) If not signed in.
     * @principle Enforces tenant membership for access.
     */
    match /fx_rates/{fxRateId} {
      allow get, list: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/fx_rates/$(fxRateId)).data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && (isTenantOwner(get(/databases/$(database)/documents/tenants/$(resource.data.tenantId)).data.ownerUid) || isSuperadmin());
    }

    /**
     * @description Enforces access control for category documents.
     * @path /categories/{categoryId}
     * @allow (create) A signed-in user can create a category associated with a tenant they are a member of.
     * @allow (get, list) Any signed-in user can read category documents associated with a tenant they are a member of.
     * @deny (update, delete) Only the owner or a superadmin can modify or delete a category document.
     * @deny (create) If not signed in.
     * @principle Enforces tenant membership for access.
     */
    match /categories/{categoryId} {
      allow get, list: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/categories/$(categoryId)).data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && (isTenantOwner(get(/databases/$(database)/documents/tenants/$(resource.data.tenantId)).data.ownerUid) || isSuperadmin());
    }

    /**
     * @description Enforces access control for subcategory documents.
     * @path /subcategories/{subcategoryId}
     * @allow (create) A signed-in user can create a subcategory associated with a tenant they are a member of.
     * @allow (get, list) Any signed-in user can read subcategory documents associated with a tenant they are a member of.
     * @deny (update, delete) Only the owner or a superadmin can modify or delete a subcategory document.
     * @deny (create) If not signed in.
     * @principle Enforces tenant membership for access.
     */
    match /subcategories/{subcategoryId} {
      allow get, list: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/subcategories/$(subcategoryId)).data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && (isTenantOwner(get(/databases/$(database)/documents/tenants/$(resource.data.tenantId)).data.ownerUid) || isSuperadmin());
    }

    /**
     * @description Enforces access control for entity documents.
     * @path /entities/{entityId}
     * @allow (create) A signed-in user can create an entity associated with a tenant they are a member of.
     * @allow (get, list) Any signed-in user can read entity documents associated with a tenant they are a member of.
     * @deny (update, delete) Only the owner or a superadmin can modify or delete an entity document.
     * @deny (create) If not signed in.
     * @principle Enforces tenant membership for access.
     */
    match /entities/{entityId} {
      allow get, list: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/entities/$(entityId)).data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && (isTenantOwner(get(/databases/$(database)/documents/tenants/$(resource.data.tenantId)).data.ownerUid) || isSuperadmin());
    }

    /**
     * @description Enforces access control for expense documents.
     * @path /expenses/{expenseId}
     * @allow (create) A signed-in user can create an expense associated with a tenant they are a member of and if the user id is equal to the authenticated user id.
     * @allow (get, list) Any signed-in user can read expense documents associated with a tenant they are a member of.
     * @deny (update, delete) Only the owner or a superadmin can modify or delete an expense document.
     * @deny (create) If not signed in or if the user id is not equal to the authenticated user id.
     * @principle Enforces tenant membership and ownership for access.
     */
    match /expenses/{expenseId} {
      allow get, list: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/expenses/$(expenseId)).data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && (isTenantOwner(get(/databases/$(database)/documents/tenants/$(request.resource.data.tenantId)).data.ownerUid) || isSuperadmin());
    }

    /**
     * @description Enforces access control for budget documents.
     * @path /budgets/{budgetId}
     * @allow (create) A signed-in user can create a budget associated with a tenant they are a member of.
     * @allow (get, list) Any signed-in user can read budget documents associated with a tenant they are a member of.
     * @deny (update, delete) Only the owner or a superadmin can modify or delete a budget document.
     * @deny (create) If not signed in.
     * @principle Enforces tenant membership for access.
     */
    match /budgets/{budgetId} {
      allow get, list: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/budgets/$(budgetId)).data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && (isTenantOwner(get(/databases/$(database)/documents/tenants/$(resource.data.tenantId)).data.ownerUid) || isSuperadmin());
    }

    /**
     * @description Enforces access control for alert documents.
     * @path /alerts/{alertId}
     * @allow (create) A signed-in user can create an alert associated with a tenant they are a member of.
     * @allow (get, list) Any signed-in user can read alert documents associated with a tenant they are a member of.
     * @deny (update, delete) Only the owner or a superadmin can modify or delete an alert document.
     * @deny (create) If not signed in.
     * @principle Enforces tenant membership for access.
     */
    match /alerts/{alertId} {
      allow get, list: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/alerts/$(alertId)).data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && (isTenantOwner(get(/databases/$(database)/documents/tenants/$(resource.data.tenantId)).data.ownerUid) || isSuperadmin());
    }

    /**
     * @description Enforces access control for raw receipt documents.
     * @path /receipts_raw/{receiptRawId}
     * @allow (create) A signed-in user can create a raw receipt associated with a tenant they are a member of and if the user id is equal to the authenticated user id.
     * @allow (get, list) Any signed-in user can read raw receipt documents associated with a tenant they are a member of.
     * @deny (update, delete) Only the owner or a superadmin can modify or delete a raw receipt document.
     * @deny (create) If not signed in or if the user id is not equal to the authenticated user id.
     * @principle Enforces tenant membership and ownership for access.
     */
    match /receipts_raw/{receiptRawId} {
      allow get, list: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/receipts_raw/$(receiptRawId)).data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && (isTenantOwner(get(/databases/$(database)/documents/tenants/$(resource.data.tenantId)).data.ownerUid) || isSuperadmin());
    }

    /**
     * @description Enforces access control for receipt fingerprint documents.
     * @path /receipts_fingerprints/{receiptFingerprintId}
     * @allow (create) A signed-in user can create a receipt fingerprint associated with a tenant they are a member of.
     * @allow (get, list) Any signed-in user can read receipt fingerprint documents associated with a tenant they are a member of.
     * @deny (update, delete) Only the owner or a superadmin can modify or delete a receipt fingerprint document.
     * @deny (create) If not signed in.
     * @principle Enforces tenant membership for access.
     */
    match /receipts_fingerprints/{receiptFingerprintId} {
      allow get, list: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/receipts_fingerprints/$(receiptFingerprintId)).data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && (isTenantOwner(get(/databases/$(database)/documents/tenants/$(resource.data.tenantId)).data.ownerUid) || isSuperadmin());
    }

    /**
     * @description Enforces access control for audit log documents.
     * @path /audit_logs/{auditLogId}
     * @allow (create) A signed-in user can create an audit log associated with a tenant they are a member of.
     * @allow (get, list) Any signed-in user can read audit log documents associated with a tenant they are a member of.
     * @deny (update, delete) Only the owner or a superadmin can modify or delete an audit log document.
     * @deny (create) If not signed in.
     * @principle Enforces tenant membership for access.
     */
    match /audit_logs/{auditLogId} {
      allow get, list: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/audit_logs/$(auditLogId)).data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && (isTenantOwner(get(/databases/$(database)/documents/tenants/$(resource.data.tenantId)).data.ownerUid) || isSuperadmin());
    }
  }
}