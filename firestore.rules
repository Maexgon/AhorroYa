rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @principle Requires authentication for all protected resources.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided user ID.
     * @principle Enforces user-ownership.
     * @param {string} userId - The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the ownerUid field and the document exists.
     * @principle Enforces user-ownership and document existence for destructive operations.
     * @param {string} ownerId - The user ID to compare against the resource's ownerUid.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(ownerId) {
      return isOwner(ownerId) && resource.data.ownerUid == ownerId;
    }

    /**
     * @description Checks if the authenticated user is a member of the tenant.
     * @principle Enforces tenant-level isolation.
     * @param {string} tenantId - The tenant ID to compare against.
     * @return {boolean} True if the user is a member of the tenant, false otherwise.
     */
    function isTenantMember(tenantId) {
        return isSignedIn() && exists(/databases/$(database)/documents/memberships/$(request.auth.uid + '_' + tenantId));
    }

    /**
     * @description Helper function to check if the authenticated user is a member of the tenant and the document exists.
     * @principle Enforces tenant membership and document existence for writes.
     * @param {string} tenantId - The tenant ID to compare against.
     * @return {boolean} True if the user is a member of the tenant and the document exists, false otherwise.
     */
    function isExistingTenantMember(tenantId) {
      return isSignedIn() && exists(/databases/$(database)/documents/memberships/$(request.auth.uid + '_' + tenantId));
    }

    /**
     * @description Rules for the /tenants collection.
     * @path /tenants/{tenantId}
     * @allow (create) User with ID 'user123' creates a new tenant with ownerUid 'user123'.
     * @deny (create) User with ID 'user456' attempts to create a tenant with ownerUid 'user123'.
     * @allow (update) User with ID 'user123' updates a tenant where ownerUid is 'user123'.
     * @deny (update) User with ID 'user456' attempts to update a tenant where ownerUid is 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /tenants/{tenantId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
    }

    /**
     * @description Rules for the /licenses collection.
     * @path /licenses/{licenseId}
     * @allow (create) A tenant member creates a license for their tenant.
     * @deny (create) A non-tenant member attempts to create a license.
     * @allow (update) A tenant member updates a license for their tenant.
     * @deny (update) A non-tenant member attempts to update a license.
     * @principle Enforces tenant membership for writes.
     */
    match /licenses/{licenseId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow delete: if false;
    }

    /**
     * @description Rules for the /memberships collection.
     * @path /memberships/{membershipId}
     * @allow (create) A user creates their own membership record.
     * @deny (create) A user attempts to create a membership record for another user.
     * @allow (update) A user updates their own membership record.
     * @deny (update) A user attempts to update a membership record for another user.
     * @principle Enforces document ownership for writes.
     */
    match /memberships/{membershipId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow delete: if false;
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (create) User creates their own profile.
     * @deny (create) User tries to create a profile with a different user ID.
     * @allow (update) User updates their own profile.
     * @deny (update) User tries to update a profile with a different user ID.
     * @principle Enforces path-based ownership.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Rules for the /currencies collection.
     * @path /currencies/{currencyCode}
     * @allow (get, list) Public read access.
     * @deny (create, update, delete) No writes allowed.
     * @principle Provides public read-only data.
     */
    match /currencies/{currencyCode} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /fx_rates collection.
     * @path /fx_rates/{fxRateId}
     * @allow (create) A tenant member creates an fx_rate for their tenant.
     * @deny (create) A non-tenant member attempts to create an fx_rate.
     * @allow (update) A tenant member updates an fx_rate for their tenant.
     * @deny (update) A non-tenant member attempts to update an fx_rate.
     * @principle Enforces tenant membership for writes.
     */
    match /fx_rates/{fxRateId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow delete: if false;
    }

    /**
     * @description Rules for the /categories collection.
     * @path /categories/{categoryId}
     * @allow (create) A tenant member creates a category for their tenant.
     * @deny (create) A non-tenant member attempts to create a category.
     * @allow (update) A tenant member updates a category for their tenant.
     * @deny (update) A non-tenant member attempts to update a category.
     * @principle Enforces tenant membership for writes.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow delete: if false;
    }

    /**
     * @description Rules for the /subcategories collection.
     * @path /subcategories/{subcategoryId}
     * @allow (create) A tenant member creates a subcategory for their tenant.
     * @deny (create) A non-tenant member attempts to create a subcategory.
     * @allow (update) A tenant member updates a subcategory for their tenant.
     * @deny (update) A non-tenant member attempts to update a subcategory.
     * @principle Enforces tenant membership for writes.
     */
    match /subcategories/{subcategoryId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow delete: if false;
    }

    /**
     * @description Rules for the /entities collection.
     * @path /entities/{entityId}
     * @allow (create) A tenant member creates an entity for their tenant.
     * @deny (create) A non-tenant member attempts to create an entity.
     * @allow (update) A tenant member updates an entity for their tenant.
     * @deny (update) A non-tenant member attempts to update an entity.
     * @principle Enforces tenant membership for writes.
     */
    match /entities/{entityId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow delete: if false;
    }

    /**
     * @description Rules for the /expenses collection.
     * @path /expenses/{expenseId}
     * @allow (create) A tenant member creates an expense for their tenant.
     * @deny (create) A non-tenant member attempts to create an expense.
     * @allow (update) A tenant member updates an expense for their tenant.
     * @deny (update) A non-tenant member attempts to update an expense.
     * @principle Enforces tenant membership and user ownership for writes.
     */
    match /expenses/{expenseId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isTenantMember(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow delete: if false;
    }

    /**
     * @description Rules for the /budgets collection.
     * @path /budgets/{budgetId}
     * @allow (create) A tenant member creates a budget for their tenant.
     * @deny (create) A non-tenant member attempts to create a budget.
     * @allow (update) A tenant member updates a budget for their tenant.
     * @deny (update) A non-tenant member attempts to update a budget.
     * @principle Enforces tenant membership for writes.
     */
    match /budgets/{budgetId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow delete: if false;
    }

    /**
     * @description Rules for the /alerts collection.
     * @path /alerts/{alertId}
     * @allow (create) A tenant member creates an alert for their tenant.
     * @deny (create) A non-tenant member attempts to create an alert.
     * @allow (update) A tenant member updates an alert for their tenant.
     * @deny (update) A non-tenant member attempts to update an alert.
     * @principle Enforces tenant membership for writes.
     */
    match /alerts/{alertId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow delete: if false;
    }

    /**
     * @description Rules for the /receipts_raw collection.
     * @path /receipts_raw/{receiptRawId}
     * @allow (create) A tenant member creates a receipt_raw for their tenant.
     * @deny (create) A non-tenant member attempts to create a receipt_raw.
     * @allow (update) A tenant member updates a receipt_raw for their tenant.
     * @deny (update) A non-tenant member attempts to update a receipt_raw.
     * @principle Enforces tenant membership and user ownership for writes.
     */
    match /receipts_raw/{receiptRawId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isTenantMember(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow delete: if false;
    }

    /**
     * @description Rules for the /receipts_fingerprints collection.
     * @path /receipts_fingerprints/{receiptFingerprintId}
     * @allow (create) Any signed-in user can create a receipt fingerprint.
     * @deny (create) An unauthenticated user attempts to create a receipt fingerprint.
     * @principle Enforces authentication for creates.  Reads are public.
     */
    match /receipts_fingerprints/{receiptFingerprintId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /audit_logs collection.
     * @path /audit_logs/{auditLogId}
     * @allow (create) A tenant member creates an audit_log for their tenant.
     * @deny (create) A non-tenant member attempts to create an audit_log.
     * @principle Enforces tenant membership for writes.  No updates or deletes are allowed.
     */
    match /audit_logs/{auditLogId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if false;
      allow delete: if false;
    }
  }
}