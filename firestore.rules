/**
 * @file Firestore Security Rules for Ahorro Ya
 *
 * @Core Philosophy: This ruleset enforces a multi-tenant security model where users can only access data
 *   associated with tenants they are members of. Tenant ownership is enforced for tenant-level operations,
 *   and user-level ownership is enforced where applicable.  Superadmin override is supported via
 *   a `get()` call.
 *
 * @Data Structure:
 *   - /tenants/{tenantId}: Tenant documents, owned by a specific user (ownerUid).
 *   - /licenses/{licenseId}: License documents associated with a tenant (tenantId).
 *   - /memberships/{membershipId}: Membership records linking users to tenants with roles.
 *   - /users/{userId}: User profile documents, accessible only by the user themselves.
 *   - /currencies/{currencyCode}: Public currency data.
 *   - /fx_rates/{fxRateId}: Foreign exchange rates, associated with a tenant (tenantId).
 *   - /categories/{categoryId}: Expense categories, associated with a tenant (tenantId).
 *   - /subcategories/{subcategoryId}: Expense subcategories, associated with a tenant (tenantId).
 *   - /entities/{entityId}: Business entities, associated with a tenant (tenantId).
 *   - /expenses/{expenseId}: Expense records, associated with a tenant and user (tenantId, userId).
 *   - /budgets/{budgetId}: Budget records, associated with a tenant (tenantId).
 *   - /alerts/{alertId}: Alert notifications, associated with a tenant (tenantId).
 *   - /receipts_raw/{receiptRawId}: Raw receipt data, associated with a tenant and user (tenantId, userId).
 *   - /receipts_fingerprints/{receiptFingerprintId}: Receipt fingerprints for deduplication.
 *   - /audit_logs/{auditLogId}: Audit log entries, associated with a tenant (tenantId).
 *
 * @Key Security Decisions:
 *   - Listing tenants is not permitted for regular users.
 *   - Currency data is publicly readable.
 *   - Default security posture for tenant-owned data is owner-only write access.
 *
 * @Denormalization for Authorization:
 *   - Most tenant-owned documents include a `tenantId` field for efficient filtering.
 *   - Tenant documents include an `ownerUid` field for tenant-level ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @principle Requires user to be signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the given user ID.
     * @principle Enforces user-level ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @principle Enforces resource-level ownership.
     */
    function isResourceOwner(resourceOwnerId) {
      return request.auth.uid == resourceOwnerId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the tenant.
     * @principle Enforces tenant ownership.
     */
    function isTenantOwner(tenantId) {
      return get(/databases/$(database)/documents/tenants/$(tenantId)).data.ownerUid == request.auth.uid;
    }

    /**
     * @description Checks if the authenticated user is the owner of the tenant and the document exists.
     */
    function isExistingTenantOwner(tenantId) {
      return exists(/databases/$(database)/documents/tenants/$(tenantId)) && isTenantOwner(tenantId);
    }

    /**
     * @description Checks if the authenticated user is the owner of the user document and the document exists.
     */
    function isExistingOwner(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) && isOwner(userId);
    }

    /**
     * @description Checks if the authenticated user is a superadmin.
     * @principle Allows superadmin to bypass security checks.
     */
    function isSuperadmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperadmin == true;
    }

    /**
     * @description Checks if the authenticated user is a member of the tenant.
     * @principle Enforces tenant membership.
     */
    function isTenantMember(tenantId) {
      return exists(/databases/$(database)/documents/memberships/$(tenantId)_$(request.auth.uid));
    }

    /**
     * @description Tenants collection: Only tenant owners can manage tenants.
     * @path /tenants/{tenantId}
     * @allow (create) User A creates a tenant with ownerUid set to A's UID.
     * @deny (create) User B attempts to create a tenant with ownerUid set to A's UID.
     * @allow (update) User A updates a tenant they own.
     * @deny (update) User B attempts to update a tenant owned by A.
     * @allow (delete) User A deletes a tenant they own.
     * @deny (delete) User B attempts to delete a tenant owned by A.
     * @principle Enforces tenant ownership for writes.
     */
    match /tenants/{tenantId} {
      allow get: if isSignedIn() && (isTenantOwner(tenantId) || isSuperadmin());
      allow list: if false; // Listing tenants is not allowed

      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingTenantOwner(tenantId);
    }

    /**
     * @description Licenses collection: Only tenant owners can manage licenses.
     * @path /licenses/{licenseId}
     * @allow (create) User A creates a license for a tenant they own.
     * @deny (create) User B attempts to create a license for a tenant owned by A.
     * @allow (update) User A updates a license for a tenant they own.
     *
     * @deny (update) User B attempts to update a license for a tenant owned by A.
     * @allow (delete) User A deletes a license for a tenant they own.
     * @deny (delete) User B attempts to delete a license for a tenant owned by A.
     * @principle Enforces tenant ownership for writes.
     */
    match /licenses/{licenseId} {
      allow get: if isSignedIn() && exists(/databases/$(database)/documents/licenses/$(licenseId)) && isTenantMember(get(/databases/$(database)/documents/licenses/$(licenseId)).data.tenantId);
      allow list: if false;

      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && get(/databases/$(database)/documents/licenses/$(licenseId)).data.tenantId == request.resource.data.tenantId && isTenantOwner(get(/databases/$(database)/documents/licenses/$(licenseId)).data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(get(/databases/$(database)/documents/licenses/$(licenseId)).data.tenantId);
    }

    /**
     * @description Memberships collection: Only tenant owners can manage memberships.
     * @path /memberships/{membershipId}
     * @allow (create) User A (tenant owner) creates a membership for User B in tenant A.
     * @deny (create) User B attempts to create a membership for User C in tenant A.
     * @allow (update) User A (tenant owner) updates a membership for User B in tenant A.
     * @deny (update) User B attempts to update a membership for User C in tenant A.
     * @allow (delete) User A (tenant owner) deletes a membership for User B in tenant A.
     * @deny (delete) User B attempts to delete a membership for User C in tenant A.
     * @principle Enforces tenant ownership for writes.
     */
    match /memberships/{membershipId} {
      allow get: if isSignedIn() && exists(/databases/$(database)/documents/memberships/$(membershipId)) && isTenantMember(get(/databases/$(database)/documents/memberships/$(membershipId)).data.tenantId);
      allow list: if false;

      allow create: if isSignedIn() && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && get(/databases/$(database)/documents/memberships/$(membershipId)).data.tenantId == request.resource.data.tenantId && isTenantOwner(get(/databases/$(database)/documents/memberships/$(membershipId)).data.tenantId);
      allow delete: if isSignedIn() && isTenantOwner(get(/databases/$(database)/documents/memberships/$(membershipId)).data.tenantId);
    }

    /**
     * @description Users collection: Users can only manage their own profile.
     * @path /users/{userId}
     * @allow (create) User A creates their own profile (userId matches auth.uid).
     * @deny (create) User B attempts to create a profile for User A.
     * @allow (update) User A updates their own profile.
     * @deny (update) User B attempts to update User A's profile.
     * @allow (delete) User A deletes their own profile.
     * @deny (delete) User B attempts to delete User A's profile.
     * @principle Enforces user-level ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not allowed

      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Currencies collection: Public read-only data.
     * @path /currencies/{currencyCode}
     * @allow (get) Any user can read currency data.
     * @allow (list) Any user can list currency data.
     * @deny (create) No one can create currency data through the client.
     * @deny (update) No one can update currency data through the client.
     * @deny (delete) No one can delete currency data through the client.
     * @principle Public read-only access.
     */
    match /currencies/{currencyCode} {
      allow get, list: if true;

      allow create, update, delete: if false;
    }

    /**
     * @description FxRate collection: Only tenant members can manage fxRates.
     * @path /fx_rates/{fxRateId}
     * @allow (create) User A creates a fxRate for tenant A.
     * @deny (create) User B attempts to create a fxRate for tenant A.
     * @allow (update) User A updates a fxRate for tenant A.
     * @deny (update) User B attempts to update a fxRate for tenant A.
     * @allow (delete) User A deletes a fxRate for tenant A.
     * @deny (delete) User B attempts to delete a fxRate for tenant A.
     * @principle Enforces tenant membership for writes.
     */
    match /fx_rates/{fxRateId} {
      allow get: if isSignedIn() && exists(/databases/$(database)/documents/fx_rates/$(fxRateId)) && isTenantMember(get(/databases/$(database)/documents/fx_rates/$(fxRateId)).data.tenantId);
      allow list: if false;

      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && get(/databases/$(database)/documents/fx_rates/$(fxRateId)).data.tenantId == request.resource.data.tenantId && isTenantMember(get(/databases/$(database)/documents/fx_rates/$(fxRateId)).data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/fx_rates/$(fxRateId)).data.tenantId);
    }

    /**
     * @description Categories collection: Only tenant members can manage categories.
     * @path /categories/{categoryId}
     * @allow (create) User A creates a category for tenant A.
     * @deny (create) User B attempts to create a category for tenant A.
     * @allow (update) User A updates a category for tenant A.
     * @deny (update) User B attempts to update a category for tenant A.
     * @allow (delete) User A deletes a category for tenant A.
     * @deny (delete) User B attempts to delete a category for tenant A.
     * @principle Enforces tenant membership for writes.
     */
    match /categories/{categoryId} {
      allow get: if isSignedIn() && exists(/databases/$(database)/documents/categories/$(categoryId)) && isTenantMember(get(/databases/$(database)/documents/categories/$(categoryId)).data.tenantId);
      allow list: if false;

      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && get(/databases/$(database)/documents/categories/$(categoryId)).data.tenantId == request.resource.data.tenantId && isTenantMember(get(/databases/$(database)/documents/categories/$(categoryId)).data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/categories/$(categoryId)).data.tenantId);
    }

    /**
     * @description Subcategories collection: Only tenant members can manage subcategories.
     * @path /subcategories/{subcategoryId}
     * @allow (create) User A creates a subcategory for tenant A.
     * @deny (create) User B attempts to create a subcategory for tenant A.
     * @allow (update) User A updates a subcategory for tenant A.
     * @deny (update) User B attempts to update a subcategory for tenant A.
     * @allow (delete) User A deletes a subcategory for tenant A.
     * @deny (delete) User B attempts to delete a subcategory for tenant A.
     * @principle Enforces tenant membership for writes.
     */
    match /subcategories/{subcategoryId} {
      allow get: if isSignedIn() && exists(/databases/$(database)/documents/subcategories/$(subcategoryId)) && isTenantMember(get(/databases/$(database)/documents/subcategories/$(subcategoryId)).data.tenantId);
       allow list: if false;

      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && get(/databases/$(database)/documents/subcategories/$(subcategoryId)).data.tenantId == request.resource.data.tenantId && isTenantMember(get(/databases/$(database)/documents/subcategories/$(subcategoryId)).data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/subcategories/$(subcategoryId)).data.tenantId);
    }

    /**
     * @description Entities collection: Only tenant members can manage entities.
     * @path /entities/{entityId}
     * @allow (create) User A creates an entity for tenant A.
     * @deny (create) User B attempts to create an entity for tenant A.
     * @allow (update) User A updates an entity for tenant A.
     * @deny (update) User B attempts to update an entity for tenant A.
     * @allow (delete) User A deletes an entity for tenant A.
     * @deny (delete) User B attempts to delete an entity for tenant A.
     * @principle Enforces tenant membership for writes.
     */
    match /entities/{entityId} {
      allow get: if isSignedIn() && exists(/databases/$(database)/documents/entities/$(entityId)) && isTenantMember(get(/databases/$(database)/documents/entities/$(entityId)).data.tenantId);
      allow list: if false;

      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && get(/databases/$(database)/documents/entities/$(entityId)).data.tenantId == request.resource.data.tenantId && isTenantMember(get(/databases/$(database)/documents/entities/$(entityId)).data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/entities/$(entityId)).data.tenantId);
    }

    /**
     * @description Expenses collection: Only tenant members can manage expenses.
     * @path /expenses/{expenseId}
     * @allow (create) User A creates an expense for tenant A.
     * @deny (create) User B attempts to create an expense for tenant A.
     * @allow (update) User A updates an expense for tenant A.
     * @deny (update) User B attempts to update an expense for tenant A.
     * @allow (delete) User A deletes an expense for tenant A.
     * @deny (delete) User B attempts to delete an expense for tenant A.
     * @principle Enforces tenant membership and user ownership for writes.
     */
    match /expenses/{expenseId} {
      allow get: if isSignedIn() && exists(/databases/$(database)/documents/expenses/$(expenseId)) && isTenantMember(get(/databases/$(database)/documents/expenses/$(expenseId)).data.tenantId) && isResourceOwner(get(/databases/$(database)/documents/expenses/$(expenseId)).data.userId);
      allow list: if false;

      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) && isResourceOwner(request.resource.data.userId);
      allow update: if isSignedIn() && get(/databases/$(database)/documents/expenses/$(expenseId)).data.tenantId == request.resource.data.tenantId && isResourceOwner(get(/databases/$(database)/documents/expenses/$(expenseId)).data.userId);
      allow delete: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/expenses/$(expenseId)).data.tenantId) && isResourceOwner(get(/databases/$(database)/documents/expenses/$(expenseId)).data.userId);
    }

    /**
     * @description Budgets collection: Only tenant members can manage budgets.
     * @path /budgets/{budgetId}
     * @allow (create) User A creates a budget for tenant A.
     * @deny (create) User B attempts to create a budget for tenant A.
     * @allow (update) User A updates a budget for tenant A.
     * @deny (update) User B attempts to update a budget for tenant A.
     * @allow (delete) User A deletes a budget for tenant A.
     * @deny (delete) User B attempts to delete a budget for tenant A.
     * @principle Enforces tenant membership for writes.
     */
    match /budgets/{budgetId} {
      allow get: if isSignedIn() && exists(/databases/$(database)/documents/budgets/$(budgetId)) && isTenantMember(get(/databases/$(database)/documents/budgets/$(budgetId)).data.tenantId);
      allow list: if false;

      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && get(/databases/$(database)/documents/budgets/$(budgetId)).data.tenantId == request.resource.data.tenantId && isTenantMember(get(/databases/$(database)/documents/budgets/$(budgetId)).data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/budgets/$(budgetId)).data.tenantId);
    }

    /**
     * @description Alerts collection: Only tenant members can manage alerts.
     * @path /alerts/{alertId}
     * @allow (create) User A creates an alert for tenant A.
     * @deny (create) User B attempts to create an alert for tenant A.
     * @allow (update) User A updates an alert for tenant A.
     * @deny (update) User B attempts to update an alert for tenant A.
     * @allow (delete) User A deletes an alert for tenant A.
     * @deny (delete) User B attempts to delete an alert for tenant A.
     * @principle Enforces tenant membership for writes.
     */
    match /alerts/{alertId} {
      allow get: if isSignedIn() && exists(/databases/$(database)/documents/alerts/$(alertId)) && isTenantMember(get(/databases/$(database)/documents/alerts/$(alertId)).data.tenantId);
      allow list: if false;

      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && get(/databases/$(database)/documents/alerts/$(alertId)).data.tenantId == request.resource.data.tenantId && isTenantMember(get(/databases/$(database)/documents/alerts/$(alertId)).data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/alerts/$(alertId)).data.tenantId);
    }

    /**
     * @description ReceiptsRaw collection: Only tenant members can manage receipts_raw.
     * @path /receipts_raw/{receiptRawId}
     * @allow (create) User A creates a receipt_raw for tenant A.
     * @deny (create) User B attempts to create a receipt_raw for tenant A.
     * @allow (update) User A updates a receipt_raw for tenant A.
     * @deny (update) User B attempts to update a receipt_raw for tenant A.
     * @allow (delete) User A deletes a receipt_raw for tenant A.
     * @deny (delete) User B attempts to delete a receipt_raw for tenant A.
     * @principle Enforces tenant membership and user ownership for writes.
     */
    match /receipts_raw/{receiptRawId} {
      allow get: if isSignedIn() && exists(/databases/$(database)/documents/receipts_raw/$(receiptRawId)) && isTenantMember(get(/databases/$(database)/documents/receipts_raw/$(receiptRawId)).data.tenantId) && isResourceOwner(get(/databases/$(database)/documents/receipts_raw/$(receiptRawId)).data.userId);
      allow list: if false;

      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) && isResourceOwner(request.resource.data.userId);
      allow update: if isSignedIn() && get(/databases/$(database)/documents/receipts_raw/$(receiptRawId)).data.tenantId == request.resource.data.tenantId && isResourceOwner(get(/databases/$(database)/documents/receipts_raw/$(receiptRawId)).data.userId);
      allow delete: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/receipts_raw/$(receiptRawId)).data.tenantId) && isResourceOwner(get(/databases/$(database)/documents/receipts_raw/$(receiptRawId)).data.userId);
    }

    /**
     * @description ReceiptsFingerprints collection: Only tenant members can manage receipts_fingerprints.
     * @path /receipts_fingerprints/{receiptFingerprintId}
     * @allow (create) User A creates a receipt_fingerprint for tenant A.
     * @deny (create) User B attempts to create a receipt_fingerprint for tenant A.
     * @allow (update) User A updates a receipt_fingerprint for tenant A.
     * @deny (update) User B attempts to update a receipt_fingerprint for tenant A.
     * @allow (delete) User A deletes a receipt_fingerprint for tenant A.
     * @deny (delete) User B attempts to delete a receipt_fingerprint for tenant A.
     * @principle Enforces tenant membership for writes.
     */
    match /receipts_fingerprints/{receiptFingerprintId} {
      allow get: if isSignedIn() && exists(/databases/$(database)/documents/receipts_fingerprints/$(receiptFingerprintId)) && isTenantMember(get(/databases/$(database)/documents/receipts_fingerprints/$(receiptFingerprintId)).data.tenantId);
      allow list: if false;

      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && get(/databases/$(database)/documents/receipts_fingerprints/$(receiptFingerprintId)).data.tenantId == request.resource.data.tenantId && isTenantMember(get(/databases/$(database)/documents/receipts_fingerprints/$(receiptFingerprintId)).data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/receipts_fingerprints/$(receiptFingerprintId)).data.tenantId);
    }

    /**
     * @description AuditLogs collection: Only tenant members can manage audit_logs.
     * @path /audit_logs/{auditLogId}
     * @allow (create) User A creates an audit_log for tenant A.
     * @deny (create) User B attempts to create an audit_log for tenant A.
     * @allow (update) User A updates an audit_log for tenant A.
     * @deny (update) User B attempts to update an audit_log for tenant A.
     * @allow (delete) User A deletes an audit_log for tenant A.
     * @deny (delete) User B attempts to delete an audit_log for tenant A.
     * @principle Enforces tenant membership for writes.
     */
    match /audit_logs/{auditLogId} {
      allow get: if isSignedIn() && exists(/databases/$(database)/documents/audit_logs/$(auditLogId)) && isTenantMember(get(/databases/$(database)/documents/audit_logs/$(auditLogId)).data.tenantId);
      allow list: if false;

      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update: if isSignedIn() && get(/databases/$(database)/documents/audit_logs/$(auditLogId)).data.tenantId == request.resource.data.tenantId && isTenantMember(get(/databases/$(database)/documents/audit_logs/$(auditLogId)).data.tenantId);
      allow delete: if isSignedIn() && isTenantMember(get(/databases/$(database)/documents/audit_logs/$(auditLogId)).data.tenantId);
    }
  }
}