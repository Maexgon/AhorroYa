/**
 * @fileoverview Firestore Security Rules for "Ahorro Ya" - Prototyping Mode
 *
 * Core Philosophy:
 * This ruleset enforces a strict tenant-based security model.  Access is primarily governed by tenant membership and ownership,
 * with data denormalized across collections to avoid costly or impossible security checks. The rules prioritize security over complex
 * schema validation to allow for rapid prototyping and iteration.
 *
 * Data Structure:
 * - /tenants/{tenantId}: Stores tenant information, including the ownerUid.
 * - /licenses/{licenseId}: Stores license information, associated with a tenant.
 * - /memberships/{membershipId}: Stores user memberships within tenants, including role information.
 * - /users/{userId}: Stores user profiles, including a superadmin flag.
 * - Other collections: All other collections (e.g., expenses, categories) store data scoped to a specific tenant, identified by a tenantId field.
 *
 * Key Security Decisions:
 * - **Authorization Independence:** Tenant membership and ownership are denormalized to avoid `get()` calls in rules.
 * - **No User Listing:** Listing users is not allowed to protect privacy.
 * - **Tenant Isolation:**  All tenant-specific data is strictly isolated to members of that tenant.
 * - **Prototyping Mode:** Data schema is not strictly validated.
 *
 * Denormalization for Authorization:
 * - The `tenantId` field is included in almost every collection to enable simple tenant-based access control.
 * - The `ownerUid` field in the `tenants` collection stores the user ID of the tenant owner.
 *
 * Structural Segregation:
 * - User profiles are stored in `/users/{userId}`, separate from tenant-specific data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @principle Verified Identity
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @principle Ownership
     * @param {string} userId - The user ID to compare against.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the tenant referenced by tenantId.
     * @principle Ownership, Authorization Independence
     * @param {string} tenantId - The tenant ID to check ownership against.
     */
    function isTenantOwner(tenantId) {
      return isSignedIn() && get(/databases/$(database)/documents/tenants/$(tenantId)).data.ownerUid == request.auth.uid;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     * @principle Ownership, Robustness for State-Changing Operations
     * @param {string} userId - The user ID to compare against.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
    }

    /**
     * @description Checks if the authenticated user is a superadmin.  Requires a `get()` call.
     * @principle Roles
     */
    function isSuperadmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperadmin == true;
    }

    /**
     * @description Determines if the user is part of the membership and then check if the authenticated user is the owner of the tenant referenced by tenantId.
     * @principle Ownership, Authorization Independence
     * @param {string} membershipId - The membership ID to check ownership against.
     */
    function isMembershipOwner(membershipId) {
      return isSignedIn() && get(/databases/$(database)/documents/memberships/$(membershipId)).data.uid == request.auth.uid;
    }

   /**
     * @description Allows the tenant owner to create, update, and delete the tenant.
     * @path /tenants/{tenantId}
     * @allow (create) - If the user is authenticated and the ownerUid in the request matches the authenticated user's UID.
     * @allow (update) - If the user is authenticated and the ownerUid in the existing document matches the authenticated user's UID.
     * @allow (delete) - If the user is authenticated and the ownerUid in the existing document matches the authenticated user's UID.
     * @deny (create) - If the user is not authenticated.
     * @deny (update) - If the user is not the owner of the tenant.
     * @deny (delete) - If the user is not the owner of the tenant.
     * @principle Enforces tenant ownership for writes.
     */
    match /tenants/{tenantId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update: if isSignedIn() && isTenantOwner(tenantId);
      allow delete: if isSignedIn() && isTenantOwner(tenantId);
    }

    /**
     * @description Allows the tenant owner to create, update, and delete licenses.
     * @path /licenses/{licenseId}
     * @allow (create) - If the user is the owner of the tenant associated with the license.
     * @allow (update) - If the user is the owner of the tenant associated with the license.
     * @allow (delete) - If the user is the owner of the tenant associated with the license.
     * @deny (create) - If the user is not authenticated.
     * @deny (update) - If the user is not the owner of the tenant.
     * @deny (delete) - If the user is not the owner of the tenant.
     * @principle Enforces tenant ownership for writes.
     */
    match /licenses/{licenseId} {
      allow get: if isSignedIn() && isTenantOwner(resource.data.tenantId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.tenantId is string && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Allows a user to read and list memberships based on their user ID or tenant ID, and allows the tenant owner to create, update, and delete memberships.
     * @path /memberships/{membershipId}
     * @allow (get) - If the user is authenticated and the membership ID matches the user's ID.
     * @allow (list) - If the user is authenticated and either the UID in the query matches the user's ID or the tenantId exists in the query.
     * @allow (create) - If the user is authenticated and the user is the owner of the tenant.
     * @allow (update) - If the user is authenticated and the user is the owner of the tenant.
     * @allow (delete) - If the user is authenticated and the user is the owner of the tenant.
     * @deny (create) - If the user is not authenticated.
     * @deny (update) - If the user is not the owner of the tenant.
     * @deny (delete) - If the user is not the owner of the tenant.
     * @principle Enforces tenant ownership for writes, allows user to read and list their own memberships.
     */
    match /memberships/{membershipId} {
      allow get: if isSignedIn() && membershipId.matches('.*_' + request.auth.uid);
      allow list: if false;
      allow create: if isSignedIn() && 
        request.resource.data.tenantId != null &&
        isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && 
        resource.data.tenantId != null &&
        isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && 
        resource.data.tenantId != null &&
        isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Allows a user to read, create, update, and delete their own user document.
     * @path /users/{userId}
     * @allow (get) - If the user is authenticated and the user ID matches the authenticated user's UID.
     * @allow (create) - If the user is authenticated and the user ID matches the authenticated user's UID.
     * @allow (update) - If the user is authenticated and the user ID matches the authenticated user's UID.
     * @allow (delete) - If the user is authenticated and the user ID matches the authenticated user's UID.
     * @deny (create) - If the user is not authenticated.
     * @deny (update) - If the user is not the owner of the user document.
     * @deny (delete) - If the user is not the owner of the user document.
     * @principle Enforces user ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to currencies.
     * @path /currencies/{currencyCode}
     * @allow (get) - Always.
     * @allow (list) - Always.
     * @deny (create) - Never.
     * @deny (update) - Never.
     * @deny (delete) - Never.
     * @principle Public read, no write access.
     */
    match /currencies/{currencyCode} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows the tenant owner to create, update, and delete foreign exchange rates.
     * @path /fx_rates/{fxRateId}
     * @allow (create) - If the user is the owner of the tenant associated with the fxRate.
     * @allow (update) - If the user is the owner of the tenant associated with the fxRate.
     * @allow (delete) - If the user is the owner of the tenant associated with the fxRate.
     * @deny (create) - If the user is not authenticated.
     * @deny (update) - If the user is not the owner of the tenant.
     * @deny (delete) - If the user is not the owner of the tenant.
     * @principle Enforces tenant ownership for writes.
     */
    match /fx_rates/{fxRateId} {
      allow get: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.tenantId is string && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Allows the tenant owner to create, update, and delete categories.
     * @path /categories/{categoryId}
     * @allow (create) - If the user is the owner of the tenant associated with the category.
     * @allow (update) - If the user is the owner of the tenant associated with the category.
     * @allow (delete) - If the user is the owner of the tenant associated with the category.
     * @deny (create) - If the user is not authenticated.
     * @deny (update) - If the user is not the owner of the tenant.
     * @deny (delete) - If the user is not the owner of the tenant.
     * @principle Enforces tenant ownership for writes.
     */
    match /categories/{categoryId} {
      allow get: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.tenantId is string && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Allows the tenant owner to create, update, and delete subcategories.
     * @path /subcategories/{subcategoryId}
     * @allow (create) - If the user is the owner of the tenant associated with the subcategory.
     * @allow (update) - If the user is the owner of the tenant associated with the subcategory.
     * @allow (delete) - If the user is the owner of the tenant associated with the subcategory.
     * @deny (create) - If the user is not authenticated.
     * @deny (update) - If the user is not the owner of the tenant.
     * @deny (delete) - If the user is not the owner of the tenant.
     * @principle Enforces tenant ownership for writes.
     */
    match /subcategories/{subcategoryId} {
      allow get: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.tenantId is string && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Allows the tenant owner to create, update, and delete entities.
     * @path /entities/{entityId}
     * @allow (create) - If the user is the owner of the tenant associated with the entity.
     * @allow (update) - If the user is the owner of the tenant associated with the entity.
     * @allow (delete) - If the user is the owner of the tenant associated with the entity.
     * @deny (create) - If the user is not authenticated.
     * @deny (update) - If the user is not the owner of the tenant.
     * @deny (delete) - If the user is not the owner of the tenant.
     * @principle Enforces tenant ownership for writes.
     */
    match /entities/{entityId} {
      allow get: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.tenantId is string && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Allows the expense owner to create, update, and delete expenses.
     * @path /expenses/{expenseId}
     * @allow (create) - If the user is the owner of the expense and the tenant.
     * @allow (update) - If the user is the owner of the expense and the tenant.
     * @allow (delete) - If the user is the owner of the expense and the tenant.
     * @deny (create) - If the user is not authenticated.
     * @deny (update) - If the user is not the owner of the expense or the tenant.
     * @deny (delete) - If the user is not the owner of the expense or the tenant.
     * @principle Enforces expense ownership for writes.
     */
    match /expenses/{expenseId} {
      allow get: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.tenantId is string && isTenantOwner(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId) && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Allows the income owner to create, update, and delete incomes.
     * @path /incomes/{incomeId}
     * @allow (create) - If the user is the owner of the income and the tenant.
     * @allow (update) - If the user is the owner of the income and the tenant.
     * @allow (delete) - If the user is the owner of the income and the tenant.
     * @deny (create) - If the user is not authenticated.
     * @deny (update) - If the user is not the owner of the income or the tenant.
     * @deny (delete) - If the user is not the owner of the income or the tenant.
     * @principle Enforces income ownership for writes.
     */
    match /incomes/{incomeId} {
      allow get: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.tenantId is string && isTenantOwner(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId) && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Allows the tenant owner to create, update, and delete budgets.
     * @path /budgets/{budgetId}
     * @allow (create) - If the user is the owner of the tenant associated with the budget.
     * @allow (update) - If the user is the owner of the tenant associated with the budget.
     * @allow (delete) - If the user is the owner of the tenant associated with the budget.
     * @deny (create) - If the user is not authenticated.
     * @deny (update) - If the user is not the owner of the tenant.
     * @deny (delete) - If the user is not the owner of the tenant.
     * @principle Enforces tenant ownership for writes.
     */
    match /budgets/{budgetId} {
      allow get: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.tenantId is string && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Allows the tenant owner to create, update, and delete alerts.
     * @path /alerts/{alertId}
     * @allow (create) - If the user is the owner of the tenant associated with the alert.
     * @allow (update) - If the user is the owner of the tenant associated with the alert.
     * @allow (delete) - If the user is the owner of the tenant associated with the alert.
     * @deny (create) - If the user is not authenticated.
     * @deny (update) - If the user is not the owner of the tenant.
     * @deny (delete) - If the user is not the owner of the tenant.
     * @principle Enforces tenant ownership for writes.
     */
    match /alerts/{alertId} {
      allow get: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.tenantId is string && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
    }

    /**
     * @description Allows the receipt owner to create, update, and delete receipts.
     * @path /receipts_raw/{receiptRawId}
     * @allow (create) - If the user is the owner of the receipt and the tenant.
     * @allow (update) - If the user is the owner of the receipt and the tenant.
     * @allow (delete) - If the user is the owner of the receipt and the tenant.
     * @deny (create) - If the user is not authenticated.
     * @deny (update) - If the user is not the owner of the receipt or the tenant.
     * @deny (delete) - If the user is not the owner of the receipt or the tenant.
     * @principle Enforces receipt ownership for writes.
     */
    match /receipts_raw/{receiptRawId} {
      allow get: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.tenantId is string && isTenantOwner(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId) && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Allows the tenant owner to create, update, and delete receipt fingerprints.
     * @path /receipts_fingerprints/{receiptFingerprintId}
     * @allow (create) - If the user is the owner of the tenant associated with the receipt fingerprint.
     * @allow (update) - If the user is the owner of the tenant associated with the receipt fingerprint.
     * @allow (delete) - If the user is the owner of the tenant associated with the receipt fingerprint.
     * @deny (create) - If the user is not authenticated.
     * @deny (update) - If the user is not the owner of the tenant.
     * @deny (delete) - If the user is not the owner of the tenant.
     * @principle Enforces tenant ownership for writes.
     */
    match /receipts_fingerprints/{receiptFingerprintId} {
      allow get: if isSignedIn() && isTenantOwner(receiptFingerprintId.split('_')[0]);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.id is string && isTenantOwner(request.resource.id.split('_')[0]); // Assuming id is in the format {tenantId}_{fingerprint}
      allow update: if isSignedIn() && isTenantOwner(receiptFingerprintId.split('_')[0]); // Assuming id is in the format {tenantId}_{fingerprint}
      allow delete: if isSignedIn() && isTenantOwner(receiptFingerprintId.split('_')[0]); // Assuming id is in the format {tenantId}_{fingerprint}
    }

    /**
     * @description Allows the tenant owner to create, update, and delete audit logs.
     * @path /audit_logs/{auditLogId}
     * @allow (create) - If the user is the owner of the tenant associated with the audit log.
     * @allow (update) - If the user is the owner of the tenant associated with the audit log.
     * @allow (delete) - If the user is the owner of the tenant associated with the audit log.
     * @deny (create) - If the user is not authenticated.
     * @deny (update) - If the user is not the owner of the tenant.
     * @deny (delete) - If the user is not the owner of the tenant.
     * @principle Enforces tenant ownership for writes.
     */
    match /audit_logs/{auditLogId} {
      allow get: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.tenantId is string && isTenantOwner(request.resource.data.tenantId);
      allow update: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
      allow delete: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
    }

     /**
     * @description Allows the report owner to create, update, and delete reports.
     * @path /reports/{reportId}
     * @allow (create) - If the user is the owner of the report and the tenant.
     * @allow (update) - If the user is the owner of the report and the tenant.
     * @allow (delete) - If the user is the owner of the report and the tenant.
     * @deny (create) - If the user is not authenticated.
     * @deny (update) - If the user is not the owner of the report or the tenant.
     * @deny (delete) - If the user is not the owner of the report or the tenant.
     */
    match /reports/{reportId} {
      allow get: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.tenantId is string && isTenantOwner(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.tenantId is string && isTenantOwner(resource.data.tenantId) && resource.data.userId == request.auth.uid;
    }
  }
}