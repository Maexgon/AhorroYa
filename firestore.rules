/**
 * @fileoverview Firestore Security Rules for "Ahorro Ya" Expense Tracking App.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-tenant data model with strict user and tenant-level isolation.
 * Access is primarily controlled through ownership and membership within tenants.
 *
 * Data Structure:
 * - /tenants/{tenantId}: Stores tenant information, with ownerUid indicating the owner.
 * - /licenses/{licenseId}: Stores license information, associated with a tenant via tenantId.
 * - /memberships/{membershipId}: Stores user memberships within tenants, defining roles.
 * - /users/{userId}: Stores user profile information.
 * - Other collections (/currencies, /fx_rates, /categories, /subcategories, /entities, /expenses, /budgets, /alerts, /receipts_raw, /receipts_fingerprints, /audit_logs) store tenant-specific data, each containing a tenantId field.
 *
 * Key Security Decisions:
 * - Users can only access their own user documents (/users/{userId}).
 * - Access to tenant-specific data is restricted to members of that tenant.
 * - Listing of all documents is generally allowed for members of a tenant, enabling efficient queries.
 * - Superadmin privileges are NOT implemented in this version.
 *
 * Denormalization for Authorization:
 * - The tenantId field is included in almost all collections to allow for tenant-level access control without requiring complex queries.
 * - Collections like Expenses and ReceiptsRaw include the userId to enable user-level access control within a tenant.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to tenant documents based on ownership.
     * @path /tenants/{tenantId}
     * @allow (read) Authenticated user can read if they own the tenant.
     * @allow (create) Authenticated user can create a tenant if the ownerUid matches their UID.
     * @allow (update, delete) Authenticated user can update/delete if they own the tenant and the tenant exists.
     * @deny (read) Authenticated user can't read if they don't own the tenant.
     * @deny (write) Unauthenticated user can't create, update, or delete a tenant.
     * @principle Enforces tenant ownership for writes.
     */
    match /tenants/{tenantId} {
      allow get: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
    }

    /**
     * @description Allows access to license documents based on tenant membership.
     * @path /licenses/{licenseId}
     * @allow (read) Authenticated user can read if they are a member of the tenant associated with the license.
     * @allow (create) Authenticated user can create if they are a member of the tenant associated with the license.
     * @allow (update, delete) Authenticated user can update/delete if they are a member of the tenant associated with the license, and the license exists.
     * @deny (read) Authenticated user can't read if they are not a member of the tenant.
     * @deny (write) Unauthenticated user can't create, update, or delete a license.
     * @principle Enforces tenant membership for access to licenses.
     */
    match /licenses/{licenseId} {
      allow get, list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Allows management of membership documents.
     * @path /memberships/{membershipId}
     * @allow (read) Authenticated user can read if they are a member of the tenant associated with the membership.
     * @allow (create) Authenticated user can create if they are a member of the tenant associated with the membership.
     * @allow (update, delete) Authenticated user can update/delete if they are a member of the tenant associated with the membership, and the membership exists.
     * @deny (read) Authenticated user can't read if they are not a member of the tenant.
     * @deny (write) Unauthenticated user can't create, update, or delete a membership.
     * @principle Enforces tenant membership for access to memberships.
     */
    match /memberships/{membershipId} {
      allow get, list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Allows access to user documents based on ownership.
     * @path /users/{userId}
     * @allow (read) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile if the UID matches.
     * @allow (update, delete) Authenticated user can update/delete their own profile if the UID matches, and the user exists.
     * @deny (read) Authenticated user can't read other user profiles.
     * @deny (write) Unauthenticated user can't create, update, or delete any user profile.
     * @principle Enforces user ownership for profile access.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && request.auth.uid == userId;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Allows public read access to currency documents.
     * @path /currencies/{currencyCode}
     * @allow (read) Any user can read currency information.
     * @allow (write) No one can create, update, or delete a currency document.
     * @principle Public read access for currencies.
     */
    match /currencies/{currencyCode} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows access to fx_rate documents based on tenant membership.
     * @path /fx_rates/{fxRateId}
     * @allow (read) Authenticated user can read if they are a member of the tenant associated with the fx rate.
     * @allow (create) Authenticated user can create if they are a member of the tenant associated with the fx rate.
     * @allow (update, delete) Authenticated user can update/delete if they are a member of the tenant associated with the fx rate, and the fx rate exists.
     * @deny (read) Authenticated user can't read if they are not a member of the tenant.
     * @deny (write) Unauthenticated user can't create, update, or delete a fx rate.
     * @principle Enforces tenant membership for access to fx rates.
     */
    match /fx_rates/{fxRateId} {
      allow get, list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Allows access to category documents based on tenant membership.
     * @path /categories/{categoryId}
     * @allow (read) Authenticated user can read if they are a member of the tenant associated with the category.
     * @allow (create) Authenticated user can create if they are a member of the tenant associated with the category.
     * @allow (update, delete) Authenticated user can update/delete if they are a member of the tenant associated with the category, and the category exists.
     * @deny (read) Authenticated user can't read if they are not a member of the tenant.
     * @deny (write) Unauthenticated user can't create, update, or delete a category.
     * @principle Enforces tenant membership for access to categories.
     */
    match /categories/{categoryId} {
      allow get, list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Allows access to subcategory documents based on tenant membership.
     * @path /subcategories/{subcategoryId}
     * @allow (read) Authenticated user can read if they are a member of the tenant associated with the subcategory.
     * @allow (create) Authenticated user can create if they are a member of the tenant associated with the subcategory.
     * @allow (update, delete) Authenticated user can update/delete if they are a member of the tenant associated with the subcategory, and the subcategory exists.
     * @deny (read) Authenticated user can't read if they are not a member of the tenant.
     * @deny (write) Unauthenticated user can't create, update, or delete a subcategory.
     * @principle Enforces tenant membership for access to subcategories.
     */
    match /subcategories/{subcategoryId} {
      allow get, list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Allows access to entity documents based on tenant membership.
     * @path /entities/{entityId}
     * @allow (read) Authenticated user can read if they are a member of the tenant associated with the entity.
     * @allow (create) Authenticated user can create if they are a member of the tenant associated with the entity.
     * @allow (update, delete) Authenticated user can update/delete if they are a member of the tenant associated with the entity, and the entity exists.
     * @deny (read) Authenticated user can't read if they are not a member of the tenant.
     * @deny (write) Unauthenticated user can't create, update, or delete an entity.
     * @principle Enforces tenant membership for access to entities.
     */
    match /entities/{entityId} {
      allow get, list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Allows access to expense documents based on tenant membership and user ownership.
     * @path /expenses/{expenseId}
     * @allow (read) Authenticated user can read if they are a member of the tenant associated with the expense.
     * @allow (create) Authenticated user can create if they are a member of the tenant associated with the expense and if they are the owner of the expense.
     * @allow (update, delete) Authenticated user can update/delete if they are a member of the tenant and the owner of the expense, and the expense exists.
     * @deny (read) Authenticated user can't read if they are not a member of the tenant.
     * @deny (write) Unauthenticated user can't create, update, or delete an expense.
     * @principle Enforces tenant membership and user ownership for access to expenses.
     */
    match /expenses/{expenseId} {
      allow get, list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && isTenantMember(resource.data.tenantId) && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Allows access to budget documents based on tenant membership.
     * @path /budgets/{budgetId}
     * @allow (read) Authenticated user can read if they are a member of the tenant associated with the budget.
     * @allow (create) Authenticated user can create if they are a member of the tenant associated with the budget.
     * @allow (update, delete) Authenticated user can update/delete if they are a member of the tenant associated with the budget, and the budget exists.
     * @deny (read) Authenticated user can't read if they are not a member of the tenant.
     * @deny (write) Unauthenticated user can't create, update, or delete a budget.
     * @principle Enforces tenant membership for access to budgets.
     */
    match /budgets/{budgetId} {
      allow get, list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Allows access to alert documents based on tenant membership.
     * @path /alerts/{alertId}
     * @allow (read) Authenticated user can read if they are a member of the tenant associated with the alert.
     * @allow (create) Authenticated user can create if they are a member of the tenant associated with the alert.
     * @allow (update, delete) Authenticated user can update/delete if they are a member of the tenant associated with the alert, and the alert exists.
     * @deny (read) Authenticated user can't read if they are not a member of the tenant.
     * @deny (write) Unauthenticated user can't create, update, or delete an alert.
     * @principle Enforces tenant membership for access to alerts.
     */
    match /alerts/{alertId} {
      allow get, list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Allows access to receipt raw data documents based on tenant membership and user ownership.
     * @path /receipts_raw/{receiptRawId}
     * @allow (read) Authenticated user can read if they are a member of the tenant associated with the receipt and is the owner.
     * @allow (create) Authenticated user can create if they are a member of the tenant and is the owner.
     * @allow (update, delete) Authenticated user can update/delete if they are a member of the tenant and is the owner, and the receipt raw data exists.
     * @deny (read) Authenticated user can't read if they are not a member of the tenant.
     * @deny (write) Unauthenticated user can't create, update, or delete a receipt raw data document.
     * @principle Enforces tenant membership and user ownership for access to receipt raw data.
     */
    match /receipts_raw/{receiptRawId} {
      allow get, list: if isSignedIn() && isTenantMember(resource.data.tenantId) && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId) && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && isTenantMember(resource.data.tenantId) && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Allows access to receipt fingerprint documents based on tenant membership.
     * @path /receipts_fingerprints/{receiptFingerprintId}
     * @allow (read) Authenticated user can read if they are a member of the tenant associated with the receipt fingerprint.
     * @allow (create) Authenticated user can create if they are a member of the tenant associated with the receipt fingerprint.
     * @allow (update, delete) Authenticated user can update/delete if they are a member of the tenant associated with the receipt fingerprint, and the receipt fingerprint exists.
     * @deny (read) Authenticated user can't read if they are not a member of the tenant.
     * @deny (write) Unauthenticated user can't create, update, or delete a receipt fingerprint document.
     * @principle Enforces tenant membership for access to receipt fingerprints.
     */
    match /receipts_fingerprints/{receiptFingerprintId} {
      allow get, list: if isSignedIn() && isTenantMember(getTenantIdFromReceiptFingerprintId(receiptFingerprintId));
      allow create: if isSignedIn() && isTenantMember(getTenantIdFromReceiptFingerprintId(request.resource.id));
      allow update, delete: if isSignedIn() && isTenantMember(getTenantIdFromReceiptFingerprintId(resource.id));
    }

     /**
     * @description Allows access to audit log documents based on tenant membership.
     * @path /audit_logs/{auditLogId}
     * @allow (read) Authenticated user can read if they are a member of the tenant associated with the audit log.
     * @allow (create) Authenticated user can create if they are a member of the tenant associated with the audit log.
     * @allow (update, delete) Authenticated user can update/delete if they are a member of the tenant associated with the audit log, and the audit log exists.
     * @deny (read) Authenticated user can't read if they are not a member of the tenant.
     * @deny (write) Unauthenticated user can't create, update, or delete an audit log document.
     * @principle Enforces tenant membership for access to audit logs.
     */
    match /audit_logs/{auditLogId} {
      allow get, list: if isSignedIn() && isTenantMember(resource.data.tenantId);
      allow create: if isSignedIn() && isTenantMember(request.resource.data.tenantId);
      allow update, delete: if isSignedIn() && isTenantMember(resource.data.tenantId);
    }

    /**
     * @description Placeholder for batch-write operations, which are not directly supported by security rules.
     * @path /batch-write(licenses, tenants/{tenantId})
     * @allow (write) Always deny batch writes.
     * @principle Batch writes are not directly supported by security rules.
     */
    match /batch-write(licenses, tenants/{tenantId}) {
        allow create, update, delete, get, list: if false;
    }
  }

  // --- Helper Functions ---

  /**
   * @description Checks if the user is signed in.
   * @return {boolean} True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the user is the owner of the resource.
   * @param {string} userId The user ID to check.
   * @return {boolean} True if the user is the owner, false otherwise.
   */
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  /**
   * @description Checks if the user is the owner of the resource and it exists.
   * @param {string} userId The user ID to check.
   * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
   */
  function isExistingOwner(userId) {
    return isOwner(userId);
  }

  /**
   * @description Checks if the user is a member of the tenant.
   * @param {string} tenantId The tenant ID to check.
   * @return {boolean} True if the user is a member of the tenant, false otherwise.
   */
  function isTenantMember(tenantId) {
    return exists(/databases/$(database)/documents/memberships/$(tenantId)_$(request.auth.uid));
  }

   /**
    * @description Extracts the tenantId from a receiptFingerprintId.
    * @param {string} receiptFingerprintId The receiptFingerprintId to extract from.
    * @return {string} The tenantId extracted from receiptFingerprintId, or null if the ID is invalid.
    */
    function getTenantIdFromReceiptFingerprintId(receiptFingerprintId) {
        return receiptFingerprintId.split("_")[0];
    }
}